
avr_mmc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00003e50  00003ee4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ea  00800092  00800092  00003f16  2**0
                  ALLOC
  3 .stab         000015a8  00000000  00000000  00003f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b6  00000000  00000000  000054c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00005576  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000207  00000000  00000000  000055f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000026d3  00000000  00000000  000057fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000083d  00000000  00000000  00007ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002455  00000000  00000000  0000870d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000310  00000000  00000000  0000ab64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000071d  00000000  00000000  0000ae74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003154  00000000  00000000  0000b591  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  0000e6e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__ctors_end>
       4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
       8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
       c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      10:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_4>
      14:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      18:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      1c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      20:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      24:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      28:	0c 94 65 05 	jmp	0xaca	; 0xaca <__vector_10>
      2c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      30:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      34:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__vector_13>
      38:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__vector_14>
      3c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      40:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      44:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      48:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      4c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      50:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      54:	79 03       	fmul	r23, r17
      56:	ed 01       	movw	r28, r26
      58:	7d 03       	fmul	r23, r21
      5a:	ed 01       	movw	r28, r26
      5c:	ed 01       	movw	r28, r26
      5e:	ed 01       	movw	r28, r26
      60:	3c 02       	muls	r19, r28
      62:	ed 01       	movw	r28, r26
      64:	ed 01       	movw	r28, r26
      66:	42 02       	muls	r20, r18
      68:	b1 04       	cpc	r11, r1
      6a:	ed 01       	movw	r28, r26
      6c:	6b 03       	fmul	r22, r19
      6e:	ed 01       	movw	r28, r26
      70:	ed 01       	movw	r28, r26
      72:	be 03       	fmulsu	r19, r22
      74:	ed 01       	movw	r28, r26
      76:	ed 01       	movw	r28, r26
      78:	ad 04       	cpc	r10, r13
      7a:	ed 01       	movw	r28, r26
      7c:	41 04       	cpc	r4, r1
      7e:	4c 1c       	adc	r4, r12
      80:	62 1c       	adc	r6, r2
      82:	c3 1c       	adc	r12, r3
      84:	c9 1c       	adc	r12, r9
      86:	49 1c       	adc	r4, r9
      88:	49 1c       	adc	r4, r9
      8a:	49 1c       	adc	r4, r9
      8c:	49 1c       	adc	r4, r9
      8e:	49 1c       	adc	r4, r9
      90:	49 1c       	adc	r4, r9
      92:	58 1d       	adc	r21, r8
      94:	5d 1d       	adc	r21, r13
      96:	5f 1d       	adc	r21, r15
      98:	6c 1d       	adc	r22, r12
      9a:	84 1d       	adc	r24, r4

0000009c <__c.1809>:
      9c:	64 72 69 76 65 20 77 69 6c 6c 20 62 65 20 66 6f     drive will be fo
      ac:	72 6d 61 74 74 65 64 2e 73 75 72 65 3f 20 28 59     rmatted.sure? (Y
      bc:	2f 6e 29 3d 00                                      /n)=.

000000c1 <__c.1805>:
      c1:	25 6c 75 00                                         %lu.

000000c5 <__c.1799>:
      c5:	25 6c 75 00                                         %lu.

000000c9 <__c.1793>:
      c9:	70 74 72 20 3d 20 25 6c 75 00                       ptr = %lu.

000000d3 <__c.1788>:
      d3:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
      e3:	72 65 65 0a 00                                      ree..

000000e8 <__c.1786>:
      e8:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
      f8:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     108:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000111 <__c.1783>:
     111:	25 63 25 63 25 63 25 63 25 63 20 25 75 2f 25 30     %c%c%c%c%c %u/%0
     121:	32 75 2f 25 30 32 75 20 25 30 32 75 3a 25 30 32     2u/%02u %02u:%02
     131:	75 20 25 39 6c 75 20 20 25 73 0a 00                 u %9lu  %s..

0000013d <__c.1774>:
     13d:	72 63 3d 25 64 0a 00                                rc=%d..

00000144 <__c.1770>:
     144:	3e 00                                               >.

00000146 <__c.1768>:
     146:	74 69 6e 79 66 61 74 20 66 69 6c 65 73 79 73 74     tinyfat filesyst
     156:	65 6e 20 66 6f 72 20 64 65 62 75 67 67 69 6e 67     en for debugging
	...

00000167 <__c.1732>:
     167:	72 63 3d 25 75 20 46 52 5f 25 53 0a 00              rc=%u FR_%S..

00000174 <str.1718>:
     174:	4f 4b 00 4e 4f 54 5f 52 45 41 44 59 00 4e 4f 5f     OK.NOT_READY.NO_
     184:	46 49 4c 45 00 4e 4f 5f 50 41 54 48 00 49 4e 56     FILE.NO_PATH.INV
     194:	41 4c 49 44 5f 4e 41 4d 45 00 49 4e 56 41 4c 49     ALID_NAME.INVALI
     1a4:	44 5f 44 52 49 56 45 00 44 45 4e 49 45 44 00 45     D_DRIVE.DENIED.E
     1b4:	58 49 53 54 00 52 57 5f 45 52 52 4f 52 00 57 52     XIST.RW_ERROR.WR
     1c4:	49 54 45 5f 50 52 4f 54 45 43 54 45 44 00 4e 4f     ITE_PROTECTED.NO
     1d4:	54 5f 45 4e 41 42 4c 45 44 00 4e 4f 5f 46 49 4c     T_ENABLED.NO_FIL
     1e4:	45 53 59 53 54 45 4d 00 49 4e 56 41 4c 49 44 5f     ESYSTEM.INVALID_
     1f4:	4f 42 4a 45 43 54 00 4d 4b 46 53 5f 41 42 4f 52     OBJECT.MKFS_ABOR
     204:	54 45 44 00 00 00                                   TED...

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf e5       	ldi	r28, 0x5F	; 95
     210:	d8 e0       	ldi	r29, 0x08	; 8
     212:	de bf       	out	0x3e, r29	; 62
     214:	cd bf       	out	0x3d, r28	; 61

00000216 <__do_copy_data>:
     216:	10 e0       	ldi	r17, 0x00	; 0
     218:	a0 e6       	ldi	r26, 0x60	; 96
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	e0 e5       	ldi	r30, 0x50	; 80
     21e:	fe e3       	ldi	r31, 0x3E	; 62
     220:	02 c0       	rjmp	.+4      	; 0x226 <.do_copy_data_start>

00000222 <.do_copy_data_loop>:
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0

00000226 <.do_copy_data_start>:
     226:	a2 39       	cpi	r26, 0x92	; 146
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <.do_copy_data_loop>

0000022c <__do_clear_bss>:
     22c:	12 e0       	ldi	r17, 0x02	; 2
     22e:	a2 e9       	ldi	r26, 0x92	; 146
     230:	b0 e0       	ldi	r27, 0x00	; 0
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	ac 37       	cpi	r26, 0x7C	; 124
     238:	b1 07       	cpc	r27, r17
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 ac 01 	call	0x358	; 0x358 <main>
     240:	0c 94 26 1f 	jmp	0x3e4c	; 0x3e4c <_exit>

00000244 <__bad_interrupt>:
     244:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000248 <__vector_4>:
/*---------------------------------------------------------*/
/* 10Hz timer interrupt generated by OC2                  */
/*---------------------------------------------------------*/

ISR(TIMER2_COMP_vect)
{
     248:	1f 92       	push	r1
     24a:	0f 92       	push	r0
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	11 24       	eor	r1, r1
     252:	8f 93       	push	r24
     254:	9f 93       	push	r25
     256:	af 93       	push	r26
     258:	bf 93       	push	r27
rtc++;
     25a:	80 91 60 00 	lds	r24, 0x0060
     25e:	90 91 61 00 	lds	r25, 0x0061
     262:	a0 91 62 00 	lds	r26, 0x0062
     266:	b0 91 63 00 	lds	r27, 0x0063
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	a1 1d       	adc	r26, r1
     26e:	b1 1d       	adc	r27, r1
     270:	80 93 60 00 	sts	0x0060, r24
     274:	90 93 61 00 	sts	0x0061, r25
     278:	a0 93 62 00 	sts	0x0062, r26
     27c:	b0 93 63 00 	sts	0x0063, r27
}
     280:	bf 91       	pop	r27
     282:	af 91       	pop	r26
     284:	9f 91       	pop	r25
     286:	8f 91       	pop	r24
     288:	0f 90       	pop	r0
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	0f 90       	pop	r0
     28e:	1f 90       	pop	r1
     290:	18 95       	reti

00000292 <put_rc>:
}


static
void put_rc (FRESULT rc)
{
     292:	bc 01       	movw	r22, r24
     294:	44 e7       	ldi	r20, 0x74	; 116
     296:	51 e0       	ldi	r21, 0x01	; 1
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <put_rc+0x1c>
		"OK\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0" "INVALID_NAME\0" "INVALID_DRIVE\0"
		"DENIED\0" "EXIST\0" "RW_ERROR\0" "WRITE_PROTECTED\0" "NOT_ENABLED\0"
		"NO_FILESYSTEM\0" "INVALID_OBJECT\0" "MKFS_ABORTED\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
     29e:	fa 01       	movw	r30, r20
		while(pgm_read_byte_near(p++));
     2a0:	4f 5f       	subi	r20, 0xFF	; 255
     2a2:	5f 4f       	sbci	r21, 0xFF	; 255
     2a4:	e4 91       	lpm	r30, Z+
     2a6:	ee 23       	and	r30, r30
     2a8:	d1 f7       	brne	.-12     	; 0x29e <put_rc+0xc>
		"OK\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0" "INVALID_NAME\0" "INVALID_DRIVE\0"
		"DENIED\0" "EXIST\0" "RW_ERROR\0" "WRITE_PROTECTED\0" "NOT_ENABLED\0"
		"NO_FILESYSTEM\0" "INVALID_OBJECT\0" "MKFS_ABORTED\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
     2aa:	2f 5f       	subi	r18, 0xFF	; 255
     2ac:	3f 4f       	sbci	r19, 0xFF	; 255
     2ae:	26 17       	cp	r18, r22
     2b0:	37 07       	cpc	r19, r23
     2b2:	21 f0       	breq	.+8      	; 0x2bc <put_rc+0x2a>
     2b4:	fa 01       	movw	r30, r20
     2b6:	84 91       	lpm	r24, Z+
     2b8:	88 23       	and	r24, r24
     2ba:	89 f7       	brne	.-30     	; 0x29e <put_rc+0xc>
		while(pgm_read_byte_near(p++));
	}
	xprintf(PSTR("rc=%u FR_%S\n"), (WORD)rc, p);
     2bc:	00 d0       	rcall	.+0      	; 0x2be <put_rc+0x2c>
     2be:	00 d0       	rcall	.+0      	; 0x2c0 <put_rc+0x2e>
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <put_rc+0x30>
     2c2:	ed b7       	in	r30, 0x3d	; 61
     2c4:	fe b7       	in	r31, 0x3e	; 62
     2c6:	31 96       	adiw	r30, 0x01	; 1
     2c8:	87 e6       	ldi	r24, 0x67	; 103
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	ad b7       	in	r26, 0x3d	; 61
     2ce:	be b7       	in	r27, 0x3e	; 62
     2d0:	12 96       	adiw	r26, 0x02	; 2
     2d2:	9c 93       	st	X, r25
     2d4:	8e 93       	st	-X, r24
     2d6:	11 97       	sbiw	r26, 0x01	; 1
     2d8:	73 83       	std	Z+3, r23	; 0x03
     2da:	62 83       	std	Z+2, r22	; 0x02
     2dc:	55 83       	std	Z+5, r21	; 0x05
     2de:	44 83       	std	Z+4, r20	; 0x04
     2e0:	0e 94 84 06 	call	0xd08	; 0xd08 <xprintf>
     2e4:	ed b7       	in	r30, 0x3d	; 61
     2e6:	fe b7       	in	r31, 0x3e	; 62
     2e8:	36 96       	adiw	r30, 0x06	; 6
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	fe bf       	out	0x3e, r31	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	ed bf       	out	0x3d, r30	; 61
}
     2f4:	08 95       	ret

000002f6 <get_line>:



static
void get_line (char *buff, int len)
{
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	7c 01       	movw	r14, r24
     304:	8b 01       	movw	r16, r22
     306:	c0 e0       	ldi	r28, 0x00	; 0
     308:	d0 e0       	ldi	r29, 0x00	; 0
		c = uart_get();
		if (c == '\r') break;
		if ((c == '\b') && idx) {
			idx--; uart_put(c);
		}
		if (((BYTE)c >= ' ') && (idx < len - 1)) {
     30a:	01 50       	subi	r16, 0x01	; 1
     30c:	10 40       	sbci	r17, 0x00	; 0
	char c;
	int idx = 0;


	for (;;) {
		c = uart_get();
     30e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <uart_get>
		if (c == '\r') break;
     312:	8d 30       	cpi	r24, 0x0D	; 13
     314:	99 f0       	breq	.+38     	; 0x33c <get_line+0x46>
		if ((c == '\b') && idx) {
     316:	88 30       	cpi	r24, 0x08	; 8
     318:	21 f4       	brne	.+8      	; 0x322 <get_line+0x2c>
     31a:	20 97       	sbiw	r28, 0x00	; 0
     31c:	c1 f3       	breq	.-16     	; 0x30e <get_line+0x18>
			idx--; uart_put(c);
     31e:	21 97       	sbiw	r28, 0x01	; 1
     320:	0a c0       	rjmp	.+20     	; 0x336 <get_line+0x40>
		}
		if (((BYTE)c >= ' ') && (idx < len - 1)) {
     322:	80 32       	cpi	r24, 0x20	; 32
     324:	a0 f3       	brcs	.-24     	; 0x30e <get_line+0x18>
     326:	c0 17       	cp	r28, r16
     328:	d1 07       	cpc	r29, r17
     32a:	8c f7       	brge	.-30     	; 0x30e <get_line+0x18>
				buff[idx++] = c; uart_put(c);
     32c:	f7 01       	movw	r30, r14
     32e:	ec 0f       	add	r30, r28
     330:	fd 1f       	adc	r31, r29
     332:	80 83       	st	Z, r24
     334:	21 96       	adiw	r28, 0x01	; 1
     336:	0e 94 c1 05 	call	0xb82	; 0xb82 <uart_put>
     33a:	e9 cf       	rjmp	.-46     	; 0x30e <get_line+0x18>
		}
	}
	buff[idx] = 0;
     33c:	ce 0d       	add	r28, r14
     33e:	df 1d       	adc	r29, r15
     340:	18 82       	st	Y, r1
	uart_put(c);
     342:	8d e0       	ldi	r24, 0x0D	; 13
     344:	0e 94 c1 05 	call	0xb82	; 0xb82 <uart_put>
	xputc('\n');
     348:	8a e0       	ldi	r24, 0x0A	; 10
     34a:	0e 94 33 06 	call	0xc66	; 0xc66 <xputc>
}
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	e6 e0       	ldi	r30, 0x06	; 6
     354:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__epilogue_restores__+0x18>

00000358 <main>:
/* Main                                                                  */



int main ()
{
     358:	ae e3       	ldi	r26, 0x3E	; 62
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	e2 eb       	ldi	r30, 0xB2	; 178
     35e:	f1 e0       	ldi	r31, 0x01	; 1
     360:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__prologue_saves__>


static
void IoInit ()
{
	PORTA = 0b11111111;	// Port A
     364:	9f ef       	ldi	r25, 0xFF	; 255
     366:	9b bb       	out	0x1b, r25	; 27
    PORTB = 0b10110111;			/* Enable drivers */
     368:	87 eb       	ldi	r24, 0xB7	; 183
     36a:	88 bb       	out	0x18, r24	; 24
    DDRB = 0b10110000;
     36c:	80 eb       	ldi	r24, 0xB0	; 176
     36e:	87 bb       	out	0x17, r24	; 23
	
	
	SPCR = 0b01011110 ;  //clock must not exceed 400 kHz for initialization         
     370:	8e e5       	ldi	r24, 0x5E	; 94
     372:	8d b9       	out	0x0d, r24	; 13
    SPSR = 1;            //turn on SPI2x clock
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	8e b9       	out	0x0e, r24	; 14

	PORTC = 0b11111111;	// Port C
     378:	95 bb       	out	0x15, r25	; 21

	PORTD = 0b11111110; // Port D
     37a:	8e ef       	ldi	r24, 0xFE	; 254
     37c:	82 bb       	out	0x12, r24	; 18
    DDRD  = 0b00000010;
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	81 bb       	out	0x11, r24	; 17
	
	uart_init();		// Initialize UART driver
     382:	0e 94 92 05 	call	0xb24	; 0xb24 <uart_init>


	
	ASSR = 0b00001000;	// Timer2: 1Hz async operation (OC2)
     386:	88 e0       	ldi	r24, 0x08	; 8
     388:	82 bd       	out	0x22, r24	; 34

    OCR2 =  128-1;	
     38a:	8f e7       	ldi	r24, 0x7F	; 127
     38c:	83 bd       	out	0x23, r24	; 35

	TCCR2 = 0b00001110;
     38e:	8e e0       	ldi	r24, 0x0E	; 14
     390:	85 bd       	out	0x25, r24	; 37

	
    OCR0 =  90-1;             //Timer0: 100Hz interval (OC0)  
     392:	89 e5       	ldi	r24, 0x59	; 89
     394:	8c bf       	out	0x3c, r24	; 60
	TCCR0 = 0b0001101; 
     396:	8d e0       	ldi	r24, 0x0D	; 13
     398:	83 bf       	out	0x33, r24	; 51

    TIMSK = 0b10000010;	
     39a:	82 e8       	ldi	r24, 0x82	; 130
     39c:	89 bf       	out	0x39, r24	; 57
	sei();
     39e:	78 94       	sei
	DIR dir;				
	FIL file1, file2;		
    IoInit();

	/* Join xitoa module to uart module */
	xfunc_out = (void (*)(char))uart_put;
     3a0:	81 ec       	ldi	r24, 0xC1	; 193
     3a2:	95 e0       	ldi	r25, 0x05	; 5
     3a4:	90 93 19 01 	sts	0x0119, r25
     3a8:	80 93 18 01 	sts	0x0118, r24

	xputs(PSTR("tinyfat filesysten for debugging"));
     3ac:	86 e4       	ldi	r24, 0x46	; 70
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	0e 94 42 06 	call	0xc84	; 0xc84 <xputs>
				break;

				
#if _USE_MKFS
			case 'm' :	/* fm <logi drv#> <part type> <bytes/clust> - Create file system */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
     3b4:	87 e0       	ldi	r24, 0x07	; 7
     3b6:	68 2e       	mov	r6, r24
     3b8:	71 2c       	mov	r7, r1
     3ba:	6c 0e       	add	r6, r28
     3bc:	7d 1e       	adc	r7, r29
     3be:	4e 01       	movw	r8, r28
     3c0:	08 94       	sec
     3c2:	81 1c       	adc	r8, r1
     3c4:	91 1c       	adc	r9, r1
				p2 = 0;
				Timer = 0;
				while (p1) {
			if (p1 >= sizeof(Buff))	{ cnt = sizeof(Buff); p1 -= sizeof(Buff); }
					else 			{ cnt = (WORD)p1; p1 = 0; }
					res = f_write(&file1, Buff, cnt, &s2);
     3c6:	01 e2       	ldi	r16, 0x21	; 33
     3c8:	40 2e       	mov	r4, r16
     3ca:	51 2c       	mov	r5, r1
     3cc:	4c 0e       	add	r4, r28
     3ce:	5d 1e       	adc	r5, r29
     3d0:	13 e0       	ldi	r17, 0x03	; 3
     3d2:	21 2e       	mov	r2, r17
     3d4:	31 2c       	mov	r3, r1
     3d6:	2c 0e       	add	r2, r28
     3d8:	3d 1e       	adc	r3, r29
	xfunc_out = (void (*)(char))uart_put;

	xputs(PSTR("tinyfat filesysten for debugging"));

	for (;;) {
		xputs(PSTR(">"));
     3da:	84 e4       	ldi	r24, 0x44	; 68
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 42 06 	call	0xc84	; 0xc84 <xputs>
		ptr = linebuf;
     3e2:	24 e3       	ldi	r18, 0x34	; 52
     3e4:	31 e0       	ldi	r19, 0x01	; 1
     3e6:	3a 83       	std	Y+2, r19	; 0x02
     3e8:	29 83       	std	Y+1, r18	; 0x01
		get_line(ptr, sizeof(linebuf));
     3ea:	c9 01       	movw	r24, r18
     3ec:	60 e1       	ldi	r22, 0x10	; 16
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <get_line>

		switch (*ptr++) {
     3f4:	a9 81       	ldd	r26, Y+1	; 0x01
     3f6:	ba 81       	ldd	r27, Y+2	; 0x02
     3f8:	fd 01       	movw	r30, r26
     3fa:	81 91       	ld	r24, Z+
     3fc:	fa 83       	std	Y+2, r31	; 0x02
     3fe:	e9 83       	std	Y+1, r30	; 0x01
     400:	84 36       	cpi	r24, 0x64	; 100
     402:	19 f0       	breq	.+6      	; 0x40a <main+0xb2>
     404:	86 36       	cpi	r24, 0x66	; 102
     406:	49 f7       	brne	.-46     	; 0x3da <main+0x82>
     408:	20 c0       	rjmp	.+64     	; 0x44a <main+0xf2>

		case 'd' :
			switch (*ptr++) {
     40a:	11 96       	adiw	r26, 0x01	; 1
     40c:	8c 91       	ld	r24, X
     40e:	31 96       	adiw	r30, 0x01	; 1
     410:	fa 83       	std	Y+2, r31	; 0x02
     412:	e9 83       	std	Y+1, r30	; 0x01
     414:	89 36       	cpi	r24, 0x69	; 105
     416:	09 f7       	brne	.-62     	; 0x3da <main+0x82>
			
			case 'i' :	/* di - Initialize disk */
				xprintf(PSTR("rc=%d\n"), (WORD)disk_initialize(0));
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <disk_initialize>
     41e:	00 d0       	rcall	.+0      	; 0x420 <main+0xc8>
     420:	00 d0       	rcall	.+0      	; 0x422 <main+0xca>
     422:	ed b7       	in	r30, 0x3d	; 61
     424:	fe b7       	in	r31, 0x3e	; 62
     426:	31 96       	adiw	r30, 0x01	; 1
     428:	2d e3       	ldi	r18, 0x3D	; 61
     42a:	31 e0       	ldi	r19, 0x01	; 1
     42c:	ad b7       	in	r26, 0x3d	; 61
     42e:	be b7       	in	r27, 0x3e	; 62
     430:	12 96       	adiw	r26, 0x02	; 2
     432:	3c 93       	st	X, r19
     434:	2e 93       	st	-X, r18
     436:	11 97       	sbiw	r26, 0x01	; 1
     438:	82 83       	std	Z+2, r24	; 0x02
     43a:	13 82       	std	Z+3, r1	; 0x03
     43c:	0e 94 84 06 	call	0xd08	; 0xd08 <xprintf>
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	c8 cf       	rjmp	.-112    	; 0x3da <main+0x82>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                
			}
			break;

		case 'f' :
			switch (*ptr++) {
     44a:	11 96       	adiw	r26, 0x01	; 1
     44c:	8c 91       	ld	r24, X
     44e:	bf 01       	movw	r22, r30
     450:	6f 5f       	subi	r22, 0xFF	; 255
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	7a 83       	std	Y+2, r23	; 0x02
     456:	69 83       	std	Y+1, r22	; 0x01
     458:	99 27       	eor	r25, r25
     45a:	87 fd       	sbrc	r24, 7
     45c:	90 95       	com	r25
     45e:	a9 2f       	mov	r26, r25
     460:	b9 2f       	mov	r27, r25
     462:	fc 01       	movw	r30, r24
     464:	e3 56       	subi	r30, 0x63	; 99
     466:	f0 40       	sbci	r31, 0x00	; 0
     468:	e5 31       	cpi	r30, 0x15	; 21
     46a:	f1 05       	cpc	r31, r1
     46c:	08 f0       	brcs	.+2      	; 0x470 <main+0x118>
     46e:	b5 cf       	rjmp	.-150    	; 0x3da <main+0x82>
     470:	e6 5d       	subi	r30, 0xD6	; 214
     472:	ff 4f       	sbci	r31, 0xFF	; 255
     474:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__tablejump2__>

			case 'i' :	/* fi - Initialize logical drive */
				put_rc(f_mount(0, &fatfs));
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	6c ed       	ldi	r22, 0xDC	; 220
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <f_mount>
     482:	b0 c2       	rjmp	.+1376   	; 0x9e4 <__stack+0x185>
				break;

			
			case 'l' :	/* fl [<path>] - Directory listing */
				res = f_opendir(&dir, ptr);
     484:	ce 01       	movw	r24, r28
     486:	43 96       	adiw	r24, 0x13	; 19
     488:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <f_opendir>
				if (res) { put_rc(res); break; }
     48c:	88 23       	and	r24, r24
     48e:	11 f0       	breq	.+4      	; 0x494 <main+0x13c>
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	a8 c2       	rjmp	.+1360   	; 0x9e4 <__stack+0x185>
				p1 = s1 = s2 = 0;
     494:	1c 82       	std	Y+4, r1	; 0x04
     496:	1b 82       	std	Y+3, r1	; 0x03
     498:	1f 82       	std	Y+7, r1	; 0x07
     49a:	18 86       	std	Y+8, r1	; 0x08
     49c:	19 86       	std	Y+9, r1	; 0x09
     49e:	1a 86       	std	Y+10, r1	; 0x0a
     4a0:	aa 24       	eor	r10, r10
     4a2:	bb 24       	eor	r11, r11
				for(;;) {
					res = f_readdir(&dir, &finfo);
     4a4:	ce 01       	movw	r24, r28
     4a6:	43 96       	adiw	r24, 0x13	; 19
     4a8:	64 e4       	ldi	r22, 0x44	; 68
     4aa:	71 e0       	ldi	r23, 0x01	; 1
     4ac:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <f_readdir>
					if ((res != FR_OK) || !finfo.fname[0]) break;
     4b0:	88 23       	and	r24, r24
     4b2:	09 f0       	breq	.+2      	; 0x4b6 <main+0x15e>
     4b4:	b5 c0       	rjmp	.+362    	; 0x620 <main+0x2c8>
     4b6:	80 91 4d 01 	lds	r24, 0x014D
     4ba:	88 23       	and	r24, r24
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <main+0x168>
     4be:	b0 c0       	rjmp	.+352    	; 0x620 <main+0x2c8>
					if (finfo.fattrib & AM_DIR) {
     4c0:	80 91 4c 01 	lds	r24, 0x014C
     4c4:	68 2f       	mov	r22, r24
     4c6:	84 ff       	sbrs	r24, 4
     4c8:	09 c0       	rjmp	.+18     	; 0x4dc <main+0x184>
						s2++;
     4ca:	8b 81       	ldd	r24, Y+3	; 0x03
     4cc:	9c 81       	ldd	r25, Y+4	; 0x04
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	9c 83       	std	Y+4, r25	; 0x04
     4d2:	8b 83       	std	Y+3, r24	; 0x03
     4d4:	b4 e4       	ldi	r27, 0x44	; 68
     4d6:	cb 2e       	mov	r12, r27
     4d8:	d1 2c       	mov	r13, r1
     4da:	1a c0       	rjmp	.+52     	; 0x510 <main+0x1b8>
					} else {
						s1++; p1 += finfo.fsize;
     4dc:	08 94       	sec
     4de:	a1 1c       	adc	r10, r1
     4e0:	b1 1c       	adc	r11, r1
     4e2:	8f 81       	ldd	r24, Y+7	; 0x07
     4e4:	98 85       	ldd	r25, Y+8	; 0x08
     4e6:	a9 85       	ldd	r26, Y+9	; 0x09
     4e8:	ba 85       	ldd	r27, Y+10	; 0x0a
     4ea:	20 91 44 01 	lds	r18, 0x0144
     4ee:	30 91 45 01 	lds	r19, 0x0145
     4f2:	40 91 46 01 	lds	r20, 0x0146
     4f6:	50 91 47 01 	lds	r21, 0x0147
     4fa:	82 0f       	add	r24, r18
     4fc:	93 1f       	adc	r25, r19
     4fe:	a4 1f       	adc	r26, r20
     500:	b5 1f       	adc	r27, r21
     502:	8f 83       	std	Y+7, r24	; 0x07
     504:	98 87       	std	Y+8, r25	; 0x08
     506:	a9 87       	std	Y+9, r26	; 0x09
     508:	ba 87       	std	Y+10, r27	; 0x0a
     50a:	ad e2       	ldi	r26, 0x2D	; 45
     50c:	ca 2e       	mov	r12, r26
     50e:	d1 2c       	mov	r13, r1
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n"), 
     510:	60 fd       	sbrc	r22, 0
     512:	04 c0       	rjmp	.+8      	; 0x51c <main+0x1c4>
     514:	fd e2       	ldi	r31, 0x2D	; 45
     516:	ef 2e       	mov	r14, r31
     518:	f1 2c       	mov	r15, r1
     51a:	03 c0       	rjmp	.+6      	; 0x522 <main+0x1ca>
     51c:	e2 e5       	ldi	r30, 0x52	; 82
     51e:	ee 2e       	mov	r14, r30
     520:	f1 2c       	mov	r15, r1
     522:	61 fd       	sbrc	r22, 1
     524:	03 c0       	rjmp	.+6      	; 0x52c <main+0x1d4>
     526:	0d e2       	ldi	r16, 0x2D	; 45
     528:	10 e0       	ldi	r17, 0x00	; 0
     52a:	02 c0       	rjmp	.+4      	; 0x530 <main+0x1d8>
     52c:	08 e4       	ldi	r16, 0x48	; 72
     52e:	10 e0       	ldi	r17, 0x00	; 0
     530:	62 fd       	sbrc	r22, 2
     532:	05 c0       	rjmp	.+10     	; 0x53e <main+0x1e6>
     534:	8d e2       	ldi	r24, 0x2D	; 45
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	9e af       	std	Y+62, r25	; 0x3e
     53a:	8d af       	std	Y+61, r24	; 0x3d
     53c:	04 c0       	rjmp	.+8      	; 0x546 <main+0x1ee>
     53e:	a3 e5       	ldi	r26, 0x53	; 83
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	be af       	std	Y+62, r27	; 0x3e
     544:	ad af       	std	Y+61, r26	; 0x3d
     546:	65 fd       	sbrc	r22, 5
     548:	03 c0       	rjmp	.+6      	; 0x550 <main+0x1f8>
     54a:	8d e2       	ldi	r24, 0x2D	; 45
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	02 c0       	rjmp	.+4      	; 0x554 <main+0x1fc>
     550:	81 e4       	ldi	r24, 0x41	; 65
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	20 91 48 01 	lds	r18, 0x0148
     558:	30 91 49 01 	lds	r19, 0x0149
     55c:	40 91 4a 01 	lds	r20, 0x014A
     560:	50 91 4b 01 	lds	r21, 0x014B
     564:	ed b7       	in	r30, 0x3d	; 61
     566:	fe b7       	in	r31, 0x3e	; 62
     568:	7c 97       	sbiw	r30, 0x1c	; 28
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	f8 94       	cli
     56e:	fe bf       	out	0x3e, r31	; 62
     570:	0f be       	out	0x3f, r0	; 63
     572:	ed bf       	out	0x3d, r30	; 61
     574:	31 96       	adiw	r30, 0x01	; 1
     576:	61 e1       	ldi	r22, 0x11	; 17
     578:	71 e0       	ldi	r23, 0x01	; 1
     57a:	ad b7       	in	r26, 0x3d	; 61
     57c:	be b7       	in	r27, 0x3e	; 62
     57e:	12 96       	adiw	r26, 0x02	; 2
     580:	7c 93       	st	X, r23
     582:	6e 93       	st	-X, r22
     584:	11 97       	sbiw	r26, 0x01	; 1
     586:	d3 82       	std	Z+3, r13	; 0x03
     588:	c2 82       	std	Z+2, r12	; 0x02
     58a:	f5 82       	std	Z+5, r15	; 0x05
     58c:	e4 82       	std	Z+4, r14	; 0x04
     58e:	17 83       	std	Z+7, r17	; 0x07
     590:	06 83       	std	Z+6, r16	; 0x06
     592:	ad ad       	ldd	r26, Y+61	; 0x3d
     594:	be ad       	ldd	r27, Y+62	; 0x3e
     596:	b1 87       	std	Z+9, r27	; 0x09
     598:	a0 87       	std	Z+8, r26	; 0x08
     59a:	93 87       	std	Z+11, r25	; 0x0b
     59c:	82 87       	std	Z+10, r24	; 0x0a
     59e:	c9 01       	movw	r24, r18
     5a0:	89 2f       	mov	r24, r25
     5a2:	99 27       	eor	r25, r25
     5a4:	86 95       	lsr	r24
     5a6:	84 54       	subi	r24, 0x44	; 68
     5a8:	98 4f       	sbci	r25, 0xF8	; 248
     5aa:	95 87       	std	Z+13, r25	; 0x0d
     5ac:	84 87       	std	Z+12, r24	; 0x0c
     5ae:	c9 01       	movw	r24, r18
     5b0:	65 e0       	ldi	r22, 0x05	; 5
     5b2:	96 95       	lsr	r25
     5b4:	87 95       	ror	r24
     5b6:	6a 95       	dec	r22
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <main+0x25a>
     5ba:	8f 70       	andi	r24, 0x0F	; 15
     5bc:	90 70       	andi	r25, 0x00	; 0
     5be:	97 87       	std	Z+15, r25	; 0x0f
     5c0:	86 87       	std	Z+14, r24	; 0x0e
     5c2:	2f 71       	andi	r18, 0x1F	; 31
     5c4:	30 70       	andi	r19, 0x00	; 0
     5c6:	31 8b       	std	Z+17, r19	; 0x11
     5c8:	20 8b       	std	Z+16, r18	; 0x10
     5ca:	85 2f       	mov	r24, r21
     5cc:	86 95       	lsr	r24
     5ce:	86 95       	lsr	r24
     5d0:	86 95       	lsr	r24
     5d2:	82 8b       	std	Z+18, r24	; 0x12
     5d4:	13 8a       	std	Z+19, r1	; 0x13
     5d6:	35 e0       	ldi	r19, 0x05	; 5
     5d8:	56 95       	lsr	r21
     5da:	47 95       	ror	r20
     5dc:	3a 95       	dec	r19
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <main+0x280>
     5e0:	4f 73       	andi	r20, 0x3F	; 63
     5e2:	50 70       	andi	r21, 0x00	; 0
     5e4:	55 8b       	std	Z+21, r21	; 0x15
     5e6:	44 8b       	std	Z+20, r20	; 0x14
     5e8:	80 91 44 01 	lds	r24, 0x0144
     5ec:	90 91 45 01 	lds	r25, 0x0145
     5f0:	a0 91 46 01 	lds	r26, 0x0146
     5f4:	b0 91 47 01 	lds	r27, 0x0147
     5f8:	86 8b       	std	Z+22, r24	; 0x16
     5fa:	97 8b       	std	Z+23, r25	; 0x17
     5fc:	a0 8f       	std	Z+24, r26	; 0x18
     5fe:	b1 8f       	std	Z+25, r27	; 0x19
     600:	2d e4       	ldi	r18, 0x4D	; 77
     602:	31 e0       	ldi	r19, 0x01	; 1
     604:	33 8f       	std	Z+27, r19	; 0x1b
     606:	22 8f       	std	Z+26, r18	; 0x1a
     608:	0e 94 84 06 	call	0xd08	; 0xd08 <xprintf>
     60c:	6d b7       	in	r22, 0x3d	; 61
     60e:	7e b7       	in	r23, 0x3e	; 62
     610:	64 5e       	subi	r22, 0xE4	; 228
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	7e bf       	out	0x3e, r23	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	6d bf       	out	0x3d, r22	; 61
     61e:	42 cf       	rjmp	.-380    	; 0x4a4 <main+0x14c>
								(finfo.fattrib & AM_ARC) ? 'A' : '-',
								(finfo.fdate >> 9) + 1980, (finfo.fdate >> 5) & 15, finfo.fdate & 31,
								(finfo.ftime >> 11), (finfo.ftime >> 5) & 63,
								finfo.fsize, &(finfo.fname[0]));
				}
				xprintf(PSTR("%4u File(s),%10lu bytes total\n%4u Dir(s)"), s1, p1, s2);
     620:	8d b7       	in	r24, 0x3d	; 61
     622:	9e b7       	in	r25, 0x3e	; 62
     624:	0a 97       	sbiw	r24, 0x0a	; 10
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	9e bf       	out	0x3e, r25	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	8d bf       	out	0x3d, r24	; 61
     630:	ed b7       	in	r30, 0x3d	; 61
     632:	fe b7       	in	r31, 0x3e	; 62
     634:	31 96       	adiw	r30, 0x01	; 1
     636:	28 ee       	ldi	r18, 0xE8	; 232
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	ad b7       	in	r26, 0x3d	; 61
     63c:	be b7       	in	r27, 0x3e	; 62
     63e:	12 96       	adiw	r26, 0x02	; 2
     640:	3c 93       	st	X, r19
     642:	2e 93       	st	-X, r18
     644:	11 97       	sbiw	r26, 0x01	; 1
     646:	b3 82       	std	Z+3, r11	; 0x03
     648:	a2 82       	std	Z+2, r10	; 0x02
     64a:	8f 81       	ldd	r24, Y+7	; 0x07
     64c:	98 85       	ldd	r25, Y+8	; 0x08
     64e:	a9 85       	ldd	r26, Y+9	; 0x09
     650:	ba 85       	ldd	r27, Y+10	; 0x0a
     652:	84 83       	std	Z+4, r24	; 0x04
     654:	95 83       	std	Z+5, r25	; 0x05
     656:	a6 83       	std	Z+6, r26	; 0x06
     658:	b7 83       	std	Z+7, r27	; 0x07
     65a:	8b 81       	ldd	r24, Y+3	; 0x03
     65c:	9c 81       	ldd	r25, Y+4	; 0x04
     65e:	91 87       	std	Z+9, r25	; 0x09
     660:	80 87       	std	Z+8, r24	; 0x08
     662:	0e 94 84 06 	call	0xd08	; 0xd08 <xprintf>
				if (f_getfree(ptr, &p1, &fs) == FR_OK)
     666:	6d b7       	in	r22, 0x3d	; 61
     668:	7e b7       	in	r23, 0x3e	; 62
     66a:	66 5f       	subi	r22, 0xF6	; 246
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	7e bf       	out	0x3e, r23	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	6d bf       	out	0x3d, r22	; 61
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	9a 81       	ldd	r25, Y+2	; 0x02
     67c:	b3 01       	movw	r22, r6
     67e:	ae 01       	movw	r20, r28
     680:	4b 5f       	subi	r20, 0xFB	; 251
     682:	5f 4f       	sbci	r21, 0xFF	; 255
     684:	0e 94 d7 14 	call	0x29ae	; 0x29ae <f_getfree>
     688:	89 2b       	or	r24, r25
     68a:	09 f0       	breq	.+2      	; 0x68e <main+0x336>
     68c:	a6 ce       	rjmp	.-692    	; 0x3da <main+0x82>
					xprintf(PSTR(", %10luK bytes free\n"), p1 * fs->csize / 2);
     68e:	00 d0       	rcall	.+0      	; 0x690 <main+0x338>
     690:	00 d0       	rcall	.+0      	; 0x692 <main+0x33a>
     692:	00 d0       	rcall	.+0      	; 0x694 <main+0x33c>
     694:	e3 ed       	ldi	r30, 0xD3	; 211
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	ad b7       	in	r26, 0x3d	; 61
     69a:	be b7       	in	r27, 0x3e	; 62
     69c:	12 96       	adiw	r26, 0x02	; 2
     69e:	fc 93       	st	X, r31
     6a0:	ee 93       	st	-X, r30
     6a2:	11 97       	sbiw	r26, 0x01	; 1
     6a4:	ed 81       	ldd	r30, Y+5	; 0x05
     6a6:	fe 81       	ldd	r31, Y+6	; 0x06
     6a8:	65 8d       	ldd	r22, Z+29	; 0x1d
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	2f 81       	ldd	r18, Y+7	; 0x07
     6b2:	38 85       	ldd	r19, Y+8	; 0x08
     6b4:	49 85       	ldd	r20, Y+9	; 0x09
     6b6:	5a 85       	ldd	r21, Y+10	; 0x0a
     6b8:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__mulsi3>
     6bc:	96 95       	lsr	r25
     6be:	87 95       	ror	r24
     6c0:	77 95       	ror	r23
     6c2:	67 95       	ror	r22
     6c4:	ad b7       	in	r26, 0x3d	; 61
     6c6:	be b7       	in	r27, 0x3e	; 62
     6c8:	13 96       	adiw	r26, 0x03	; 3
     6ca:	6d 93       	st	X+, r22
     6cc:	7d 93       	st	X+, r23
     6ce:	8d 93       	st	X+, r24
     6d0:	9c 93       	st	X, r25
     6d2:	16 97       	sbiw	r26, 0x06	; 6
     6d4:	cb c0       	rjmp	.+406    	; 0x86c <__stack+0xd>
				break;

			case 'o' :	/* fo <mode> <name> - Open a file */
				if (!xatoi(&ptr, &p1)) break;
     6d6:	c4 01       	movw	r24, r8
     6d8:	b3 01       	movw	r22, r6
     6da:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <xatoi>
     6de:	88 23       	and	r24, r24
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <main+0x38c>
     6e2:	7b ce       	rjmp	.-778    	; 0x3da <main+0x82>
				put_rc(f_open(&file1, ptr, (BYTE)p1));
     6e4:	69 81       	ldd	r22, Y+1	; 0x01
     6e6:	7a 81       	ldd	r23, Y+2	; 0x02
     6e8:	c2 01       	movw	r24, r4
     6ea:	4f 81       	ldd	r20, Y+7	; 0x07
     6ec:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <f_open>
     6f0:	79 c1       	rjmp	.+754    	; 0x9e4 <__stack+0x185>
				break;

			case 'c' :	/* fc - Close a file */
				put_rc(f_close(&file1));
     6f2:	c2 01       	movw	r24, r4
     6f4:	0e 94 b8 10 	call	0x2170	; 0x2170 <f_close>
     6f8:	75 c1       	rjmp	.+746    	; 0x9e4 <__stack+0x185>
				break;

			case 'e' :	/* fe - Seek file pointer */
				if (!xatoi(&ptr, &p1)) break;
     6fa:	c4 01       	movw	r24, r8
     6fc:	b3 01       	movw	r22, r6
     6fe:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <xatoi>
     702:	88 23       	and	r24, r24
     704:	09 f4       	brne	.+2      	; 0x708 <main+0x3b0>
     706:	69 ce       	rjmp	.-814    	; 0x3da <main+0x82>
				res = f_lseek(&file1, p1);
     708:	4f 81       	ldd	r20, Y+7	; 0x07
     70a:	58 85       	ldd	r21, Y+8	; 0x08
     70c:	69 85       	ldd	r22, Y+9	; 0x09
     70e:	7a 85       	ldd	r23, Y+10	; 0x0a
     710:	c2 01       	movw	r24, r4
     712:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <f_lseek>
     716:	18 2f       	mov	r17, r24
				put_rc(res);
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 49 01 	call	0x292	; 0x292 <put_rc>
				if (res == FR_OK)
     71e:	11 23       	and	r17, r17
     720:	09 f0       	breq	.+2      	; 0x724 <main+0x3cc>
     722:	5b ce       	rjmp	.-842    	; 0x3da <main+0x82>
					xprintf(PSTR("ptr = %lu"), file1.fptr, file1.fptr);
     724:	8f a1       	ldd	r24, Y+39	; 0x27
     726:	98 a5       	ldd	r25, Y+40	; 0x28
     728:	a9 a5       	ldd	r26, Y+41	; 0x29
     72a:	ba a5       	ldd	r27, Y+42	; 0x2a
     72c:	2d b7       	in	r18, 0x3d	; 61
     72e:	3e b7       	in	r19, 0x3e	; 62
     730:	2a 50       	subi	r18, 0x0A	; 10
     732:	30 40       	sbci	r19, 0x00	; 0
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	3e bf       	out	0x3e, r19	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	2d bf       	out	0x3d, r18	; 61
     73e:	4d b7       	in	r20, 0x3d	; 61
     740:	5e b7       	in	r21, 0x3e	; 62
     742:	4f 5f       	subi	r20, 0xFF	; 255
     744:	5f 4f       	sbci	r21, 0xFF	; 255
     746:	29 ec       	ldi	r18, 0xC9	; 201
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	ed b7       	in	r30, 0x3d	; 61
     74c:	fe b7       	in	r31, 0x3e	; 62
     74e:	32 83       	std	Z+2, r19	; 0x02
     750:	21 83       	std	Z+1, r18	; 0x01
     752:	fa 01       	movw	r30, r20
     754:	82 83       	std	Z+2, r24	; 0x02
     756:	93 83       	std	Z+3, r25	; 0x03
     758:	a4 83       	std	Z+4, r26	; 0x04
     75a:	b5 83       	std	Z+5, r27	; 0x05
     75c:	86 83       	std	Z+6, r24	; 0x06
     75e:	97 83       	std	Z+7, r25	; 0x07
     760:	a0 87       	std	Z+8, r26	; 0x08
     762:	b1 87       	std	Z+9, r27	; 0x09
     764:	0e 94 84 06 	call	0xd08	; 0xd08 <xprintf>
     768:	2d b7       	in	r18, 0x3d	; 61
     76a:	3e b7       	in	r19, 0x3e	; 62
     76c:	26 5f       	subi	r18, 0xF6	; 246
     76e:	3f 4f       	sbci	r19, 0xFF	; 255
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	3e bf       	out	0x3e, r19	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	2d bf       	out	0x3d, r18	; 61
     77a:	2f ce       	rjmp	.-930    	; 0x3da <main+0x82>
				break;

			case 'r' :	/* fr <len> - read file */
				if (!xatoi(&ptr, &p1)) break;
     77c:	c4 01       	movw	r24, r8
     77e:	b3 01       	movw	r22, r6
     780:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <xatoi>
     784:	88 23       	and	r24, r24
     786:	09 f4       	brne	.+2      	; 0x78a <main+0x432>
     788:	28 ce       	rjmp	.-944    	; 0x3da <main+0x82>
				p2 = 0;
     78a:	1b 86       	std	Y+11, r1	; 0x0b
     78c:	1c 86       	std	Y+12, r1	; 0x0c
     78e:	1d 86       	std	Y+13, r1	; 0x0d
     790:	1e 86       	std	Y+14, r1	; 0x0e
				Timer = 0;
     792:	10 92 5b 01 	sts	0x015B, r1
     796:	10 92 5a 01 	sts	0x015A, r1
     79a:	36 c0       	rjmp	.+108    	; 0x808 <main+0x4b0>
				while (p1) {
					if (p1 >= sizeof(Buff))	{ cnt = sizeof(Buff); p1 -= sizeof(Buff); }
     79c:	40 38       	cpi	r20, 0x80	; 128
     79e:	51 05       	cpc	r21, r1
     7a0:	61 05       	cpc	r22, r1
     7a2:	71 05       	cpc	r23, r1
     7a4:	58 f0       	brcs	.+22     	; 0x7bc <main+0x464>
     7a6:	40 58       	subi	r20, 0x80	; 128
     7a8:	50 40       	sbci	r21, 0x00	; 0
     7aa:	60 40       	sbci	r22, 0x00	; 0
     7ac:	70 40       	sbci	r23, 0x00	; 0
     7ae:	4f 83       	std	Y+7, r20	; 0x07
     7b0:	58 87       	std	Y+8, r21	; 0x08
     7b2:	69 87       	std	Y+9, r22	; 0x09
     7b4:	7a 87       	std	Y+10, r23	; 0x0a
     7b6:	00 e8       	ldi	r16, 0x80	; 128
     7b8:	10 e0       	ldi	r17, 0x00	; 0
     7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <main+0x46e>
					else 			{ cnt = (WORD)p1; p1 = 0; }
     7bc:	8a 01       	movw	r16, r20
     7be:	1f 82       	std	Y+7, r1	; 0x07
     7c0:	18 86       	std	Y+8, r1	; 0x08
     7c2:	19 86       	std	Y+9, r1	; 0x09
     7c4:	1a 86       	std	Y+10, r1	; 0x0a
					res = f_read(&file1, Buff, cnt, &s2);
     7c6:	c2 01       	movw	r24, r4
     7c8:	6c e5       	ldi	r22, 0x5C	; 92
     7ca:	71 e0       	ldi	r23, 0x01	; 1
     7cc:	a8 01       	movw	r20, r16
     7ce:	91 01       	movw	r18, r2
     7d0:	0e 94 48 12 	call	0x2490	; 0x2490 <f_read>
					if (res != FR_OK) { put_rc(res); break; }
     7d4:	88 23       	and	r24, r24
     7d6:	21 f0       	breq	.+8      	; 0x7e0 <main+0x488>
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 49 01 	call	0x292	; 0x292 <put_rc>
     7de:	1d c0       	rjmp	.+58     	; 0x81a <main+0x4c2>
					p2 += s2;
     7e0:	6b 81       	ldd	r22, Y+3	; 0x03
     7e2:	7c 81       	ldd	r23, Y+4	; 0x04
     7e4:	9b 01       	movw	r18, r22
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	8b 85       	ldd	r24, Y+11	; 0x0b
     7ec:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ee:	ad 85       	ldd	r26, Y+13	; 0x0d
     7f0:	be 85       	ldd	r27, Y+14	; 0x0e
     7f2:	82 0f       	add	r24, r18
     7f4:	93 1f       	adc	r25, r19
     7f6:	a4 1f       	adc	r26, r20
     7f8:	b5 1f       	adc	r27, r21
     7fa:	8b 87       	std	Y+11, r24	; 0x0b
     7fc:	9c 87       	std	Y+12, r25	; 0x0c
     7fe:	ad 87       	std	Y+13, r26	; 0x0d
     800:	be 87       	std	Y+14, r27	; 0x0e
					if (cnt != s2) break;
     802:	06 17       	cp	r16, r22
     804:	17 07       	cpc	r17, r23
     806:	49 f4       	brne	.+18     	; 0x81a <main+0x4c2>

			case 'r' :	/* fr <len> - read file */
				if (!xatoi(&ptr, &p1)) break;
				p2 = 0;
				Timer = 0;
				while (p1) {
     808:	4f 81       	ldd	r20, Y+7	; 0x07
     80a:	58 85       	ldd	r21, Y+8	; 0x08
     80c:	69 85       	ldd	r22, Y+9	; 0x09
     80e:	7a 85       	ldd	r23, Y+10	; 0x0a
     810:	41 15       	cp	r20, r1
     812:	51 05       	cpc	r21, r1
     814:	61 05       	cpc	r22, r1
     816:	71 05       	cpc	r23, r1
     818:	09 f6       	brne	.-126    	; 0x79c <main+0x444>
					res = f_read(&file1, Buff, cnt, &s2);
					if (res != FR_OK) { put_rc(res); break; }
					p2 += s2;
					if (cnt != s2) break;
				}
				s2 = Timer;
     81a:	e0 90 5a 01 	lds	r14, 0x015A
     81e:	f0 90 5b 01 	lds	r15, 0x015B
     822:	fc 82       	std	Y+4, r15	; 0x04
     824:	eb 82       	std	Y+3, r14	; 0x03
				xprintf(PSTR("%lu"), p2 * 100 / s2);//reading speed
     826:	00 d0       	rcall	.+0      	; 0x828 <main+0x4d0>
     828:	00 d0       	rcall	.+0      	; 0x82a <main+0x4d2>
     82a:	00 d0       	rcall	.+0      	; 0x82c <main+0x4d4>
     82c:	e5 ec       	ldi	r30, 0xC5	; 197
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	ad b7       	in	r26, 0x3d	; 61
     832:	be b7       	in	r27, 0x3e	; 62
     834:	12 96       	adiw	r26, 0x02	; 2
     836:	fc 93       	st	X, r31
     838:	ee 93       	st	-X, r30
     83a:	11 97       	sbiw	r26, 0x01	; 1
     83c:	6b 85       	ldd	r22, Y+11	; 0x0b
     83e:	7c 85       	ldd	r23, Y+12	; 0x0c
     840:	8d 85       	ldd	r24, Y+13	; 0x0d
     842:	9e 85       	ldd	r25, Y+14	; 0x0e
     844:	24 e6       	ldi	r18, 0x64	; 100
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__mulsi3>
     850:	00 e0       	ldi	r16, 0x00	; 0
     852:	10 e0       	ldi	r17, 0x00	; 0
     854:	a8 01       	movw	r20, r16
     856:	97 01       	movw	r18, r14
     858:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <__udivmodsi4>
     85c:	ad b7       	in	r26, 0x3d	; 61
     85e:	be b7       	in	r27, 0x3e	; 62
     860:	13 96       	adiw	r26, 0x03	; 3
     862:	2d 93       	st	X+, r18
     864:	3d 93       	st	X+, r19
     866:	4d 93       	st	X+, r20
     868:	5c 93       	st	X, r21
     86a:	16 97       	sbiw	r26, 0x06	; 6
     86c:	0e 94 84 06 	call	0xd08	; 0xd08 <xprintf>
     870:	ed b7       	in	r30, 0x3d	; 61
     872:	fe b7       	in	r31, 0x3e	; 62
     874:	36 96       	adiw	r30, 0x06	; 6
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	fe bf       	out	0x3e, r31	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	ed bf       	out	0x3d, r30	; 61
     880:	ac cd       	rjmp	.-1192   	; 0x3da <main+0x82>
				break;

			
			case 'w' :	/* fw <len> <val> - write file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
     882:	c4 01       	movw	r24, r8
     884:	b3 01       	movw	r22, r6
     886:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <xatoi>
     88a:	88 23       	and	r24, r24
     88c:	09 f4       	brne	.+2      	; 0x890 <__stack+0x31>
     88e:	a5 cd       	rjmp	.-1206   	; 0x3da <main+0x82>
     890:	c4 01       	movw	r24, r8
     892:	be 01       	movw	r22, r28
     894:	65 5f       	subi	r22, 0xF5	; 245
     896:	7f 4f       	sbci	r23, 0xFF	; 255
     898:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <xatoi>
     89c:	88 23       	and	r24, r24
     89e:	09 f4       	brne	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	9c cd       	rjmp	.-1224   	; 0x3da <main+0x82>
				memset(Buff, (BYTE)p2, sizeof(Buff));
     8a2:	6b 85       	ldd	r22, Y+11	; 0x0b
     8a4:	8c e5       	ldi	r24, 0x5C	; 92
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	40 e8       	ldi	r20, 0x80	; 128
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <memset>
				p2 = 0;
     8b2:	1b 86       	std	Y+11, r1	; 0x0b
     8b4:	1c 86       	std	Y+12, r1	; 0x0c
     8b6:	1d 86       	std	Y+13, r1	; 0x0d
     8b8:	1e 86       	std	Y+14, r1	; 0x0e
				Timer = 0;
     8ba:	10 92 5b 01 	sts	0x015B, r1
     8be:	10 92 5a 01 	sts	0x015A, r1
     8c2:	36 c0       	rjmp	.+108    	; 0x930 <__stack+0xd1>
				while (p1) {
			if (p1 >= sizeof(Buff))	{ cnt = sizeof(Buff); p1 -= sizeof(Buff); }
     8c4:	40 38       	cpi	r20, 0x80	; 128
     8c6:	51 05       	cpc	r21, r1
     8c8:	61 05       	cpc	r22, r1
     8ca:	71 05       	cpc	r23, r1
     8cc:	58 f0       	brcs	.+22     	; 0x8e4 <__stack+0x85>
     8ce:	40 58       	subi	r20, 0x80	; 128
     8d0:	50 40       	sbci	r21, 0x00	; 0
     8d2:	60 40       	sbci	r22, 0x00	; 0
     8d4:	70 40       	sbci	r23, 0x00	; 0
     8d6:	4f 83       	std	Y+7, r20	; 0x07
     8d8:	58 87       	std	Y+8, r21	; 0x08
     8da:	69 87       	std	Y+9, r22	; 0x09
     8dc:	7a 87       	std	Y+10, r23	; 0x0a
     8de:	00 e8       	ldi	r16, 0x80	; 128
     8e0:	10 e0       	ldi	r17, 0x00	; 0
     8e2:	05 c0       	rjmp	.+10     	; 0x8ee <__stack+0x8f>
					else 			{ cnt = (WORD)p1; p1 = 0; }
     8e4:	8a 01       	movw	r16, r20
     8e6:	1f 82       	std	Y+7, r1	; 0x07
     8e8:	18 86       	std	Y+8, r1	; 0x08
     8ea:	19 86       	std	Y+9, r1	; 0x09
     8ec:	1a 86       	std	Y+10, r1	; 0x0a
					res = f_write(&file1, Buff, cnt, &s2);
     8ee:	c2 01       	movw	r24, r4
     8f0:	6c e5       	ldi	r22, 0x5C	; 92
     8f2:	71 e0       	ldi	r23, 0x01	; 1
     8f4:	a8 01       	movw	r20, r16
     8f6:	91 01       	movw	r18, r2
     8f8:	0e 94 c6 10 	call	0x218c	; 0x218c <f_write>
					if (res != FR_OK) { put_rc(res); break; }
     8fc:	88 23       	and	r24, r24
     8fe:	21 f0       	breq	.+8      	; 0x908 <__stack+0xa9>
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 49 01 	call	0x292	; 0x292 <put_rc>
     906:	1d c0       	rjmp	.+58     	; 0x942 <__stack+0xe3>
					p2 += s2;
     908:	6b 81       	ldd	r22, Y+3	; 0x03
     90a:	7c 81       	ldd	r23, Y+4	; 0x04
     90c:	9b 01       	movw	r18, r22
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	8b 85       	ldd	r24, Y+11	; 0x0b
     914:	9c 85       	ldd	r25, Y+12	; 0x0c
     916:	ad 85       	ldd	r26, Y+13	; 0x0d
     918:	be 85       	ldd	r27, Y+14	; 0x0e
     91a:	82 0f       	add	r24, r18
     91c:	93 1f       	adc	r25, r19
     91e:	a4 1f       	adc	r26, r20
     920:	b5 1f       	adc	r27, r21
     922:	8b 87       	std	Y+11, r24	; 0x0b
     924:	9c 87       	std	Y+12, r25	; 0x0c
     926:	ad 87       	std	Y+13, r26	; 0x0d
     928:	be 87       	std	Y+14, r27	; 0x0e
					if (cnt != s2) break;
     92a:	06 17       	cp	r16, r22
     92c:	17 07       	cpc	r17, r23
     92e:	49 f4       	brne	.+18     	; 0x942 <__stack+0xe3>
			case 'w' :	/* fw <len> <val> - write file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				memset(Buff, (BYTE)p2, sizeof(Buff));
				p2 = 0;
				Timer = 0;
				while (p1) {
     930:	4f 81       	ldd	r20, Y+7	; 0x07
     932:	58 85       	ldd	r21, Y+8	; 0x08
     934:	69 85       	ldd	r22, Y+9	; 0x09
     936:	7a 85       	ldd	r23, Y+10	; 0x0a
     938:	41 15       	cp	r20, r1
     93a:	51 05       	cpc	r21, r1
     93c:	61 05       	cpc	r22, r1
     93e:	71 05       	cpc	r23, r1
     940:	09 f6       	brne	.-126    	; 0x8c4 <__stack+0x65>
					res = f_write(&file1, Buff, cnt, &s2);
					if (res != FR_OK) { put_rc(res); break; }
					p2 += s2;
					if (cnt != s2) break;
				}
				s2 = Timer;
     942:	e0 90 5a 01 	lds	r14, 0x015A
     946:	f0 90 5b 01 	lds	r15, 0x015B
     94a:	fc 82       	std	Y+4, r15	; 0x04
     94c:	eb 82       	std	Y+3, r14	; 0x03
				xprintf(PSTR("%lu"), p2 * 100 / s2);//writing speed
     94e:	00 d0       	rcall	.+0      	; 0x950 <__stack+0xf1>
     950:	00 d0       	rcall	.+0      	; 0x952 <__stack+0xf3>
     952:	00 d0       	rcall	.+0      	; 0x954 <__stack+0xf5>
     954:	e1 ec       	ldi	r30, 0xC1	; 193
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	6b cf       	rjmp	.-298    	; 0x830 <main+0x4d8>
				break;
				

			case 'u' :	/* fu <name> - Unlink a file or dir */
				put_rc(f_unlink(ptr));
     95a:	cb 01       	movw	r24, r22
     95c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <f_unlink>
     960:	41 c0       	rjmp	.+130    	; 0x9e4 <__stack+0x185>
				break;

				
#if _USE_MKFS
			case 'm' :	/* fm <logi drv#> <part type> <bytes/clust> - Create file system */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
     962:	c4 01       	movw	r24, r8
     964:	b3 01       	movw	r22, r6
     966:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <xatoi>
     96a:	88 23       	and	r24, r24
     96c:	09 f4       	brne	.+2      	; 0x970 <__stack+0x111>
     96e:	35 cd       	rjmp	.-1430   	; 0x3da <main+0x82>
     970:	c4 01       	movw	r24, r8
     972:	be 01       	movw	r22, r28
     974:	65 5f       	subi	r22, 0xF5	; 245
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <xatoi>
     97c:	88 23       	and	r24, r24
     97e:	09 f4       	brne	.+2      	; 0x982 <__stack+0x123>
     980:	2c cd       	rjmp	.-1448   	; 0x3da <main+0x82>
     982:	c4 01       	movw	r24, r8
     984:	be 01       	movw	r22, r28
     986:	61 5f       	subi	r22, 0xF1	; 241
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <xatoi>
     98e:	88 23       	and	r24, r24
     990:	09 f4       	brne	.+2      	; 0x994 <__stack+0x135>
     992:	23 cd       	rjmp	.-1466   	; 0x3da <main+0x82>
				xprintf(PSTR("drive will be formatted.sure? (Y/n)="), (WORD)p1);
     994:	00 d0       	rcall	.+0      	; 0x996 <__stack+0x137>
     996:	00 d0       	rcall	.+0      	; 0x998 <__stack+0x139>
     998:	ec e9       	ldi	r30, 0x9C	; 156
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	ad b7       	in	r26, 0x3d	; 61
     99e:	be b7       	in	r27, 0x3e	; 62
     9a0:	12 96       	adiw	r26, 0x02	; 2
     9a2:	fc 93       	st	X, r31
     9a4:	ee 93       	st	-X, r30
     9a6:	11 97       	sbiw	r26, 0x01	; 1
     9a8:	8f 81       	ldd	r24, Y+7	; 0x07
     9aa:	98 85       	ldd	r25, Y+8	; 0x08
     9ac:	14 96       	adiw	r26, 0x04	; 4
     9ae:	9c 93       	st	X, r25
     9b0:	8e 93       	st	-X, r24
     9b2:	13 97       	sbiw	r26, 0x03	; 3
     9b4:	0e 94 84 06 	call	0xd08	; 0xd08 <xprintf>
				get_line(ptr, sizeof(linebuf));
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	9a 81       	ldd	r25, Y+2	; 0x02
     9c4:	60 e1       	ldi	r22, 0x10	; 16
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <get_line>
				if (*ptr == 'Y') put_rc(f_mkfs((BYTE)p1, (BYTE)p2, (WORD)p3));
     9cc:	e9 81       	ldd	r30, Y+1	; 0x01
     9ce:	fa 81       	ldd	r31, Y+2	; 0x02
     9d0:	80 81       	ld	r24, Z
     9d2:	89 35       	cpi	r24, 0x59	; 89
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <__stack+0x179>
     9d6:	01 cd       	rjmp	.-1534   	; 0x3da <main+0x82>
     9d8:	4f 85       	ldd	r20, Y+15	; 0x0f
     9da:	58 89       	ldd	r21, Y+16	; 0x10
     9dc:	8f 81       	ldd	r24, Y+7	; 0x07
     9de:	6b 85       	ldd	r22, Y+11	; 0x0b
     9e0:	0e 94 56 07 	call	0xeac	; 0xeac <f_mkfs>
     9e4:	0e 94 49 01 	call	0x292	; 0x292 <put_rc>
     9e8:	f8 cc       	rjmp	.-1552   	; 0x3da <main+0x82>

000009ea <get_fattime>:
/* the system does not support a real time clock.          */
/* This is not required in read-only configuration.        */


DWORD get_fattime ()
{
     9ea:	a4 e0       	ldi	r26, 0x04	; 4
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	eb ef       	ldi	r30, 0xFB	; 251
     9f0:	f4 e0       	ldi	r31, 0x04	; 4
     9f2:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__prologue_saves__+0x20>
	//rtc_gettime(&rtc);
	struct tm *tmr;
	time_t t;


	cli();
     9f6:	f8 94       	cli
	t = rtc;
     9f8:	80 91 60 00 	lds	r24, 0x0060
     9fc:	90 91 61 00 	lds	r25, 0x0061
     a00:	a0 91 62 00 	lds	r26, 0x0062
     a04:	b0 91 63 00 	lds	r27, 0x0063
     a08:	89 83       	std	Y+1, r24	; 0x01
     a0a:	9a 83       	std	Y+2, r25	; 0x02
     a0c:	ab 83       	std	Y+3, r26	; 0x03
     a0e:	bc 83       	std	Y+4, r27	; 0x04
	sei();
     a10:	78 94       	sei
	tmr = gmtime(&t);
     a12:	ce 01       	movw	r24, r28
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <gmtime>
     a1a:	fc 01       	movw	r30, r24
     a1c:	22 85       	ldd	r18, Z+10	; 0x0a
     a1e:	33 85       	ldd	r19, Z+11	; 0x0b
     a20:	20 55       	subi	r18, 0x50	; 80
     a22:	30 40       	sbci	r19, 0x00	; 0
     a24:	44 27       	eor	r20, r20
     a26:	37 fd       	sbrc	r19, 7
     a28:	40 95       	com	r20
     a2a:	54 2f       	mov	r21, r20
     a2c:	a9 e1       	ldi	r26, 0x19	; 25
     a2e:	22 0f       	add	r18, r18
     a30:	33 1f       	adc	r19, r19
     a32:	44 1f       	adc	r20, r20
     a34:	55 1f       	adc	r21, r21
     a36:	aa 95       	dec	r26
     a38:	d1 f7       	brne	.-12     	; 0xa2e <get_fattime+0x44>
     a3a:	80 85       	ldd	r24, Z+8	; 0x08
     a3c:	91 85       	ldd	r25, Z+9	; 0x09
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	aa 27       	eor	r26, r26
     a42:	97 fd       	sbrc	r25, 7
     a44:	a0 95       	com	r26
     a46:	ba 2f       	mov	r27, r26
     a48:	75 e1       	ldi	r23, 0x15	; 21
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	aa 1f       	adc	r26, r26
     a50:	bb 1f       	adc	r27, r27
     a52:	7a 95       	dec	r23
     a54:	d1 f7       	brne	.-12     	; 0xa4a <get_fattime+0x60>
     a56:	28 2b       	or	r18, r24
     a58:	39 2b       	or	r19, r25
     a5a:	4a 2b       	or	r20, r26
     a5c:	5b 2b       	or	r21, r27
     a5e:	86 81       	ldd	r24, Z+6	; 0x06
     a60:	97 81       	ldd	r25, Z+7	; 0x07
     a62:	aa 27       	eor	r26, r26
     a64:	97 fd       	sbrc	r25, 7
     a66:	a0 95       	com	r26
     a68:	ba 2f       	mov	r27, r26
     a6a:	dc 01       	movw	r26, r24
     a6c:	99 27       	eor	r25, r25
     a6e:	88 27       	eor	r24, r24
     a70:	28 2b       	or	r18, r24
     a72:	39 2b       	or	r19, r25
     a74:	4a 2b       	or	r20, r26
     a76:	5b 2b       	or	r21, r27
     a78:	64 81       	ldd	r22, Z+4	; 0x04
     a7a:	96 2f       	mov	r25, r22
     a7c:	99 0f       	add	r25, r25
     a7e:	99 0f       	add	r25, r25
     a80:	99 0f       	add	r25, r25
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	a0 e0       	ldi	r26, 0x00	; 0
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	28 2b       	or	r18, r24
     a8a:	39 2b       	or	r19, r25
     a8c:	4a 2b       	or	r20, r26
     a8e:	5b 2b       	or	r21, r27
     a90:	82 81       	ldd	r24, Z+2	; 0x02
     a92:	93 81       	ldd	r25, Z+3	; 0x03
     a94:	75 e0       	ldi	r23, 0x05	; 5
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	7a 95       	dec	r23
     a9c:	e1 f7       	brne	.-8      	; 0xa96 <get_fattime+0xac>
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	28 2b       	or	r18, r24
     aa4:	39 2b       	or	r19, r25
     aa6:	4a 2b       	or	r20, r26
     aa8:	5b 2b       	or	r21, r27
     aaa:	80 81       	ld	r24, Z
     aac:	91 81       	ldd	r25, Z+1	; 0x01
     aae:	95 95       	asr	r25
     ab0:	87 95       	ror	r24
     ab2:	a0 e0       	ldi	r26, 0x00	; 0
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	28 2b       	or	r18, r24
     ab8:	39 2b       	or	r19, r25
     aba:	4a 2b       	or	r20, r26
     abc:	5b 2b       	or	r21, r27
			//| ((DWORD)rtc.month << 21)
			//| ((DWORD)rtc.mday << 16)
			//| ((DWORD)rtc.hour << 11)
			//| ((DWORD)rtc.min << 5)
			//| ((DWORD)rtc.sec >> 1);
}
     abe:	b9 01       	movw	r22, r18
     ac0:	ca 01       	movw	r24, r20
     ac2:	24 96       	adiw	r28, 0x04	; 4
     ac4:	e2 e0       	ldi	r30, 0x02	; 2
     ac6:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__epilogue_restores__+0x20>

00000aca <__vector_10>:
/* 100Hz timer interrupt generated by OC2                  */
/*---------------------------------------------------------*/


ISR(TIMER0_COMP_vect)
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	2f 93       	push	r18
     ad6:	3f 93       	push	r19
     ad8:	4f 93       	push	r20
     ada:	5f 93       	push	r21
     adc:	6f 93       	push	r22
     ade:	7f 93       	push	r23
     ae0:	8f 93       	push	r24
     ae2:	9f 93       	push	r25
     ae4:	af 93       	push	r26
     ae6:	bf 93       	push	r27
     ae8:	ef 93       	push	r30
     aea:	ff 93       	push	r31
	Timer++;			/* Performance counter for this module */
     aec:	80 91 5a 01 	lds	r24, 0x015A
     af0:	90 91 5b 01 	lds	r25, 0x015B
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	90 93 5b 01 	sts	0x015B, r25
     afa:	80 93 5a 01 	sts	0x015A, r24
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
     afe:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <disk_timerproc>
}
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	bf 91       	pop	r27
     b08:	af 91       	pop	r26
     b0a:	9f 91       	pop	r25
     b0c:	8f 91       	pop	r24
     b0e:	7f 91       	pop	r23
     b10:	6f 91       	pop	r22
     b12:	5f 91       	pop	r21
     b14:	4f 91       	pop	r20
     b16:	3f 91       	pop	r19
     b18:	2f 91       	pop	r18
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <uart_init>:

/* Initialize UART */

void uart_init()
{
	rxfifo.idx_r = 0;
     b24:	10 92 d6 00 	sts	0x00D6, r1
	rxfifo.idx_w = 0;
     b28:	10 92 d5 00 	sts	0x00D5, r1
	rxfifo.count = 0;
     b2c:	10 92 d7 00 	sts	0x00D7, r1
	txfifo.idx_r = 0;
     b30:	10 92 93 00 	sts	0x0093, r1
	txfifo.idx_w = 0;
     b34:	10 92 92 00 	sts	0x0092, r1
	txfifo.count = 0;
     b38:	10 92 94 00 	sts	0x0094, r1

	UBRRL = SYSCLK/BAUD/16-1;
     b3c:	8c e0       	ldi	r24, 0x0C	; 12
     b3e:	89 b9       	out	0x09, r24	; 9
	UCSRB = _BV(RXEN)|_BV(RXCIE)|_BV(TXEN);
     b40:	88 e9       	ldi	r24, 0x98	; 152
     b42:	8a b9       	out	0x0a, r24	; 10
}
     b44:	08 95       	ret

00000b46 <uart_test>:

/* Get a received character */

uint8_t uart_test ()
{
	return rxfifo.count;
     b46:	80 91 d7 00 	lds	r24, 0x00D7
}
     b4a:	08 95       	ret

00000b4c <uart_get>:
uint8_t uart_get ()
{
	uint8_t d, i;


	i = rxfifo.idx_r;
     b4c:	90 91 d6 00 	lds	r25, 0x00D6
	while(rxfifo.count == 0);
     b50:	80 91 d7 00 	lds	r24, 0x00D7
     b54:	88 23       	and	r24, r24
     b56:	e1 f3       	breq	.-8      	; 0xb50 <uart_get+0x4>
	d = rxfifo.buff[i++];
     b58:	e9 2f       	mov	r30, r25
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	eb 52       	subi	r30, 0x2B	; 43
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	23 81       	ldd	r18, Z+3	; 0x03
     b62:	e9 2f       	mov	r30, r25
     b64:	ef 5f       	subi	r30, 0xFF	; 255
	cli();
     b66:	f8 94       	cli
	rxfifo.count--;
     b68:	80 91 d7 00 	lds	r24, 0x00D7
     b6c:	81 50       	subi	r24, 0x01	; 1
     b6e:	80 93 d7 00 	sts	0x00D7, r24
	sei();
     b72:	78 94       	sei
	if(i >= sizeof(rxfifo.buff))
     b74:	e0 34       	cpi	r30, 0x40	; 64
     b76:	08 f0       	brcs	.+2      	; 0xb7a <uart_get+0x2e>
     b78:	e0 e0       	ldi	r30, 0x00	; 0
		i = 0;
	rxfifo.idx_r = i;
     b7a:	e0 93 d6 00 	sts	0x00D6, r30

	return d;
}
     b7e:	82 2f       	mov	r24, r18
     b80:	08 95       	ret

00000b82 <uart_put>:


/* Put a character to transmit */

void uart_put (uint8_t d)
{
     b82:	28 2f       	mov	r18, r24
	uint8_t i;


	i = txfifo.idx_w;
     b84:	90 91 92 00 	lds	r25, 0x0092
	while(txfifo.count >= sizeof(txfifo.buff));
     b88:	80 91 94 00 	lds	r24, 0x0094
     b8c:	80 34       	cpi	r24, 0x40	; 64
     b8e:	e0 f7       	brcc	.-8      	; 0xb88 <uart_put+0x6>
	txfifo.buff[i++] = d;
     b90:	e9 2f       	mov	r30, r25
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	ee 56       	subi	r30, 0x6E	; 110
     b96:	ff 4f       	sbci	r31, 0xFF	; 255
     b98:	23 83       	std	Z+3, r18	; 0x03
     b9a:	e9 2f       	mov	r30, r25
     b9c:	ef 5f       	subi	r30, 0xFF	; 255
	cli();
     b9e:	f8 94       	cli
	txfifo.count++;
     ba0:	80 91 94 00 	lds	r24, 0x0094
     ba4:	8f 5f       	subi	r24, 0xFF	; 255
     ba6:	80 93 94 00 	sts	0x0094, r24
	UCSRB = _BV(RXEN)|_BV(RXCIE)|_BV(TXEN)|_BV(UDRIE);
     baa:	88 eb       	ldi	r24, 0xB8	; 184
     bac:	8a b9       	out	0x0a, r24	; 10
	sei();
     bae:	78 94       	sei
	if(i >= sizeof(txfifo.buff))
     bb0:	e0 34       	cpi	r30, 0x40	; 64
     bb2:	08 f0       	brcs	.+2      	; 0xbb6 <uart_put+0x34>
     bb4:	e0 e0       	ldi	r30, 0x00	; 0
		i = 0;
	txfifo.idx_w = i;
     bb6:	e0 93 92 00 	sts	0x0092, r30
}
     bba:	08 95       	ret

00000bbc <__vector_13>:


/* UART RXC interrupt */

SIGNAL(SIG_UART_RECV)
{
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
	uint8_t d, n, i;


	d = UDR;
     bce:	9c b1       	in	r25, 0x0c	; 12
	n = rxfifo.count;
     bd0:	80 91 d7 00 	lds	r24, 0x00D7
	if(n < sizeof(rxfifo.buff)) {
     bd4:	80 34       	cpi	r24, 0x40	; 64
     bd6:	80 f4       	brcc	.+32     	; 0xbf8 <__vector_13+0x3c>
		rxfifo.count = ++n;
     bd8:	8f 5f       	subi	r24, 0xFF	; 255
     bda:	80 93 d7 00 	sts	0x00D7, r24
		i = rxfifo.idx_w;
     bde:	80 91 d5 00 	lds	r24, 0x00D5
		rxfifo.buff[i++] = d;
     be2:	e8 2f       	mov	r30, r24
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	eb 52       	subi	r30, 0x2B	; 43
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	93 83       	std	Z+3, r25	; 0x03
     bec:	8f 5f       	subi	r24, 0xFF	; 255
		if(i >= sizeof(rxfifo.buff))
     bee:	80 34       	cpi	r24, 0x40	; 64
     bf0:	08 f0       	brcs	.+2      	; 0xbf4 <__vector_13+0x38>
     bf2:	80 e0       	ldi	r24, 0x00	; 0
			i = 0;
		rxfifo.idx_w = i;
     bf4:	80 93 d5 00 	sts	0x00D5, r24
	}
}
     bf8:	ff 91       	pop	r31
     bfa:	ef 91       	pop	r30
     bfc:	9f 91       	pop	r25
     bfe:	8f 91       	pop	r24
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	0f 90       	pop	r0
     c06:	1f 90       	pop	r1
     c08:	18 95       	reti

00000c0a <__vector_14>:


/* UART UDRE interrupt */

SIGNAL(SIG_UART_DATA)
{
     c0a:	1f 92       	push	r1
     c0c:	0f 92       	push	r0
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	0f 92       	push	r0
     c12:	11 24       	eor	r1, r1
     c14:	2f 93       	push	r18
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
	uint8_t n, i;


	n = txfifo.count;
     c1e:	80 91 94 00 	lds	r24, 0x0094
	if(n) {
     c22:	88 23       	and	r24, r24
     c24:	a1 f0       	breq	.+40     	; 0xc4e <__vector_14+0x44>
		txfifo.count = --n;
     c26:	28 2f       	mov	r18, r24
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	20 93 94 00 	sts	0x0094, r18
		i = txfifo.idx_r;
     c2e:	80 91 93 00 	lds	r24, 0x0093
		UDR = txfifo.buff[i++];
     c32:	e8 2f       	mov	r30, r24
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	ee 56       	subi	r30, 0x6E	; 110
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	9c b9       	out	0x0c, r25	; 12
     c3e:	8f 5f       	subi	r24, 0xFF	; 255
		if(i >= sizeof(txfifo.buff))
     c40:	80 34       	cpi	r24, 0x40	; 64
     c42:	08 f0       	brcs	.+2      	; 0xc46 <__vector_14+0x3c>
     c44:	80 e0       	ldi	r24, 0x00	; 0
			i = 0;
		txfifo.idx_r = i;
     c46:	80 93 93 00 	sts	0x0093, r24
	}
	if(n == 0)
     c4a:	22 23       	and	r18, r18
     c4c:	11 f4       	brne	.+4      	; 0xc52 <__vector_14+0x48>
		UCSRB = _BV(RXEN)|_BV(RXCIE)|_BV(TXEN);
     c4e:	88 e9       	ldi	r24, 0x98	; 152
     c50:	8a b9       	out	0x0a, r24	; 10
}
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	9f 91       	pop	r25
     c58:	8f 91       	pop	r24
     c5a:	2f 91       	pop	r18
     c5c:	0f 90       	pop	r0
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	0f 90       	pop	r0
     c62:	1f 90       	pop	r1
     c64:	18 95       	reti

00000c66 <xputc>:


.global xputc
.func xputc
xputc:
	cpi	r24, 10		;LF --> CRLF
     c66:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
     c68:	19 f4       	brne	.+6      	; 0xc70 <xputc+0xa>
	ldi	r24, 13		;
     c6a:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
     c6c:	01 d0       	rcall	.+2      	; 0xc70 <xputc+0xa>
	ldi	r24, 10		;/
     c6e:	8a e0       	ldi	r24, 0x0A	; 10
1:	push	ZH
     c70:	ff 93       	push	r31
	push	ZL
     c72:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     c74:	e0 91 18 01 	lds	r30, 0x0118
	lds	ZH, xfunc_out+1	;/
     c78:	f0 91 19 01 	lds	r31, 0x0119
	icall
     c7c:	09 95       	icall
	pop	ZL
     c7e:	ef 91       	pop	r30
	pop	ZH
     c80:	ff 91       	pop	r31
	ret
     c82:	08 95       	ret

00000c84 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     c84:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     c86:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     c88:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     c8a:	11 f0       	breq	.+4      	; 0xc90 <xputs+0xc>
	rcall	xputc
     c8c:	ec df       	rcall	.-40     	; 0xc66 <xputc>
	rjmp	1b
     c8e:	fb cf       	rjmp	.-10     	; 0xc86 <xputs+0x2>
2:	ret
     c90:	08 95       	ret

00000c92 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     c92:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     c94:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     c96:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     c98:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     c9a:	0c c0       	rjmp	.+24     	; 0xcb4 <xitoa+0x22>
	neg	r20		;
     c9c:	41 95       	neg	r20
	sbrs	r25, 7		;
     c9e:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     ca0:	09 c0       	rjmp	.+18     	; 0xcb4 <xitoa+0x22>
	ldi	r30, '-'	;
     ca2:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     ca4:	60 95       	com	r22
	com	r23		;
     ca6:	70 95       	com	r23
	com	r24		;
     ca8:	80 95       	com	r24
	com	r25		;
     caa:	90 95       	com	r25
	adc	r22, r1		;
     cac:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     cae:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     cb0:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     cb2:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     cb4:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <xitoa+0x2a>
	neg	r18		;
     cb8:	21 95       	neg	r18
	ldi	r19, '0'	;/
     cba:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     cbc:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     cbe:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     cc0:	66 0f       	add	r22, r22
	rol	r23		;
     cc2:	77 1f       	adc	r23, r23
	rol	r24		;
     cc4:	88 1f       	adc	r24, r24
	rol	r25		;
     cc6:	99 1f       	adc	r25, r25
	rol	r26		;
     cc8:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     cca:	a4 17       	cp	r26, r20
	brcs	3f		;
     ccc:	10 f0       	brcs	.+4      	; 0xcd2 <xitoa+0x40>
	sub	r26, r20	;
     cce:	a4 1b       	sub	r26, r20
	inc	r22		;
     cd0:	63 95       	inc	r22
3:	dec	r21		;
     cd2:	5a 95       	dec	r21
	brne	2b		;/
     cd4:	a9 f7       	brne	.-22     	; 0xcc0 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     cd6:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <xitoa+0x4a>
	subi	r26, -7		;
     cda:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     cdc:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     cde:	af 93       	push	r26
	inc	r31		;/
     ce0:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     ce2:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     ce4:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     ce6:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     ce8:	91 05       	cpc	r25, r1
	brne	1b		;/
     cea:	41 f7       	brne	.-48     	; 0xcbc <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     cec:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     cee:	11 f4       	brne	.+4      	; 0xcf4 <xitoa+0x62>
	push	r30		;
     cf0:	ef 93       	push	r30
	inc	r31		;/
     cf2:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     cf4:	f2 17       	cp	r31, r18
	brcc	6f		;
     cf6:	18 f4       	brcc	.+6      	; 0xcfe <xitoa+0x6c>
	push	r19		;
     cf8:	3f 93       	push	r19
	inc	r31		;
     cfa:	f3 95       	inc	r31
	rjmp	5b		;/
     cfc:	fb cf       	rjmp	.-10     	; 0xcf4 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     cfe:	8f 91       	pop	r24
	rcall	xputc		;
     d00:	b2 df       	rcall	.-156    	; 0xc66 <xputc>
	dec	r31		;
     d02:	fa 95       	dec	r31
	brne	6b		;/
     d04:	e1 f7       	brne	.-8      	; 0xcfe <xitoa+0x6c>

	ret
     d06:	08 95       	ret

00000d08 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
     d08:	df 93       	push	r29
	push	YL
     d0a:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     d0c:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     d0e:	de b7       	in	r29, 0x3e	; 62
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
#else
	adiw	YL, 5		;Y = pointer to arguments
     d10:	25 96       	adiw	r28, 0x05	; 5
#endif
	ld	ZL, Y+		;Z = pointer to format string
     d12:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     d14:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     d16:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     d18:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     d1a:	21 f0       	breq	.+8      	; 0xd24 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
     d1c:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     d1e:	29 f0       	breq	.+10     	; 0xd2a <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
     d20:	a2 df       	rcall	.-188    	; 0xc66 <xputc>
	rjmp	0b		;/
     d22:	f9 cf       	rjmp	.-14     	; 0xd16 <xprintf+0xe>
90:	pop	YL
     d24:	cf 91       	pop	r28
	pop	YH
     d26:	df 91       	pop	r29
	ret
     d28:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     d2a:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     d2c:	e8 94       	clt
	_LPMI	r21		;Get flags
     d2e:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     d30:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     d32:	b1 f3       	breq	.-20     	; 0xd20 <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
     d34:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     d36:	11 f4       	brne	.+4      	; 0xd3c <xprintf+0x34>
	set			;/
     d38:	68 94       	set
22:	_LPMI	r21		;Get width
     d3a:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     d3c:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     d3e:	48 f4       	brcc	.+18     	; 0xd52 <xprintf+0x4a>
	subi	r21, '0'	;
     d40:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     d42:	80 f3       	brcs	.-32     	; 0xd24 <xprintf+0x1c>
	lsl	r18		;
     d44:	22 0f       	add	r18, r18
	mov	r0, r18		;
     d46:	02 2e       	mov	r0, r18
	lsl	r18		;
     d48:	22 0f       	add	r18, r18
	lsl	r18		;
     d4a:	22 0f       	add	r18, r18
	add	r18, r0		;
     d4c:	20 0d       	add	r18, r0
	add	r18, r21	;
     d4e:	25 0f       	add	r18, r21
	rjmp	22b		;/
     d50:	f4 cf       	rjmp	.-24     	; 0xd3a <xprintf+0x32>

24:	brtc	25f		;get value (low word)
     d52:	0e f4       	brtc	.+2      	; 0xd56 <xprintf+0x4e>
	neg	r18		;
     d54:	21 95       	neg	r18
25:	ld	r24, Y+		;
     d56:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     d58:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     d5a:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     d5c:	09 f3       	breq	.-62     	; 0xd20 <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
     d5e:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     d60:	29 f1       	breq	.+74     	; 0xdac <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
     d62:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     d64:	59 f1       	breq	.+86     	; 0xdbc <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     d66:	bc 01       	movw	r22, r24
	clr	r24		;
     d68:	88 27       	eor	r24, r24
	clr	r25		;
     d6a:	99 27       	eor	r25, r25
	clt			;/
     d6c:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     d6e:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     d70:	21 f4       	brne	.+8      	; 0xd7a <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
     d72:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     d74:	99 91       	ld	r25, Y+
	set			;
     d76:	68 94       	set
	_LPMI	r21		;/
     d78:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     d7a:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     d7c:	39 f4       	brne	.+14     	; 0xd8c <xprintf+0x84>
	ldi	r20, -10	;
     d7e:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     d80:	7e f0       	brts	.+30     	; 0xda0 <xprintf+0x98>
	sbrs	r23, 7		;
     d82:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     d84:	0d c0       	rjmp	.+26     	; 0xda0 <xprintf+0x98>
	ldi	r24, -1		;
     d86:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     d88:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     d8a:	0a c0       	rjmp	.+20     	; 0xda0 <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     d8c:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     d8e:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     d90:	39 f0       	breq	.+14     	; 0xda0 <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
     d92:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     d94:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     d96:	21 f0       	breq	.+8      	; 0xda0 <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
     d98:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     d9a:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     d9c:	09 f0       	breq	.+2      	; 0xda0 <xprintf+0x98>
	rjmp	90b		;abort
     d9e:	c2 cf       	rjmp	.-124    	; 0xd24 <xprintf+0x1c>
40:	push	ZH		;Output the value
     da0:	ff 93       	push	r31
	push	ZL		;
     da2:	ef 93       	push	r30
	rcall	xitoa		;
     da4:	76 df       	rcall	.-276    	; 0xc92 <xitoa>
42:	pop	ZL		;
     da6:	ef 91       	pop	r30
	pop	ZH		;
     da8:	ff 91       	pop	r31
	rjmp	0b		;/
     daa:	b5 cf       	rjmp	.-150    	; 0xd16 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
     dac:	ff 93       	push	r31
	push	ZL
     dae:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     db0:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     db2:	81 91       	ld	r24, Z+
	cpi	r24, 0
     db4:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     db6:	b9 f3       	breq	.-18     	; 0xda6 <xprintf+0x9e>
	rcall	xputc
     db8:	56 df       	rcall	.-340    	; 0xc66 <xputc>
	rjmp	51b
     dba:	fb cf       	rjmp	.-10     	; 0xdb2 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
     dbc:	ff 93       	push	r31
	push	ZL
     dbe:	ef 93       	push	r30
	rcall	xputs
     dc0:	61 df       	rcall	.-318    	; 0xc84 <xputs>
	rjmp	42b
     dc2:	f1 cf       	rjmp	.-30     	; 0xda6 <xprintf+0x9e>

00000dc4 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
     dc4:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
     dc6:	dc 01       	movw	r26, r24
	ld	ZL, X+
     dc8:	ed 91       	ld	r30, X+
	ld	ZH, X+
     dca:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
     dcc:	22 27       	eor	r18, r18
	clr	r19		;
     dce:	33 27       	eor	r19, r19
	clr	r20		;
     dd0:	44 27       	eor	r20, r20
	clr	r21		;/
     dd2:	55 27       	eor	r21, r21
	clt			;T = 0;
     dd4:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
     dd6:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
     dda:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
     ddc:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
     dde:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
     de0:	e1 f3       	breq	.-8      	; 0xdda <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
     de2:	a8 f1       	brcs	.+106    	; 0xe4e <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
     de4:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
     de6:	11 f4       	brne	.+4      	; 0xdec <xatoi+0x28>
	set			; continue;
     de8:	68 94       	set
	rjmp	40b		;}
     dea:	f7 cf       	rjmp	.-18     	; 0xdda <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
     dec:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
     dee:	78 f5       	brcc	.+94     	; 0xe4e <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
     df0:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
     df2:	68 f1       	brcs	.+90     	; 0xe4e <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
     df4:	71 f4       	brne	.+28     	; 0xe12 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
     df6:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
     df8:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
     dfa:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
     dfc:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
     dfe:	48 f1       	brcs	.+82     	; 0xe52 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
     e00:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
     e02:	11 f4       	brne	.+4      	; 0xe08 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
     e04:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
     e08:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
     e0a:	19 f4       	brne	.+6      	; 0xe12 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
     e0c:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
     e0e:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
     e10:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
     e12:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
     e14:	f0 f0       	brcs	.+60     	; 0xe52 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
     e16:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
     e18:	08 f0       	brcs	.+2      	; 0xe1c <xatoi+0x58>
	subi	r22, 0x20	;/
     e1a:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
     e1c:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
     e1e:	b8 f0       	brcs	.+46     	; 0xe4e <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
     e20:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
     e22:	18 f0       	brcs	.+6      	; 0xe2a <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
     e24:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
     e26:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
     e28:	90 f0       	brcs	.+36     	; 0xe4e <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
     e2a:	69 17       	cp	r22, r25
	brcc	70f		;/
     e2c:	80 f4       	brcc	.+32     	; 0xe4e <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
     e2e:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
     e30:	77 1b       	sub	r23, r23
61:	brcc	62f		;
     e32:	08 f4       	brcc	.+2      	; 0xe36 <xatoi+0x72>
	add	r23, r25	;
     e34:	79 0f       	add	r23, r25
62:	lsr	r23		;
     e36:	76 95       	lsr	r23
	ror	r21		;
     e38:	57 95       	ror	r21
	ror	r20		;
     e3a:	47 95       	ror	r20
	ror	r19		;
     e3c:	37 95       	ror	r19
	ror	r18		;
     e3e:	27 95       	ror	r18
	dec	r24		;
     e40:	8a 95       	dec	r24
	brne	61b		;/
     e42:	b9 f7       	brne	.-18     	; 0xe32 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
     e44:	26 0f       	add	r18, r22
	adc	r19, r24	;
     e46:	38 1f       	adc	r19, r24
	adc	r20, r24	;
     e48:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
     e4a:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
     e4c:	e0 cf       	rjmp	.-64     	; 0xe0e <xatoi+0x4a>

70:	ldi	r24, 0
     e4e:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
     e50:	01 c0       	rjmp	.+2      	; 0xe54 <xatoi+0x90>
80:	ldi	r24, 1
     e52:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
     e54:	4e f4       	brtc	.+18     	; 0xe68 <xatoi+0xa4>
	clr	r22
     e56:	66 27       	eor	r22, r22
	com	r18
     e58:	20 95       	com	r18
	com	r19
     e5a:	30 95       	com	r19
	com	r20
     e5c:	40 95       	com	r20
	com	r21
     e5e:	50 95       	com	r21
	adc	r18, r22
     e60:	26 1f       	adc	r18, r22
	adc	r19, r22
     e62:	36 1f       	adc	r19, r22
	adc	r20, r22
     e64:	46 1f       	adc	r20, r22
	adc	r21, r22
     e66:	56 1f       	adc	r21, r22
82:	st	-X, ZH
     e68:	fe 93       	st	-X, r31
	st	-X, ZL
     e6a:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
     e6c:	d0 01       	movw	r26, r0
	st	X+, r18
     e6e:	2d 93       	st	X+, r18
	st	X+, r19
     e70:	3d 93       	st	X+, r19
	st	X+, r20
     e72:	4d 93       	st	X+, r20
	st	X+, r21
     e74:	5d 93       	st	X+, r21
	clr	r1
     e76:	11 24       	eor	r1, r1
	ret
     e78:	08 95       	ret

00000e7a <f_mount>:

FRESULT f_mount (
	BYTE drv,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
     e7a:	db 01       	movw	r26, r22
	if (drv) return FR_INVALID_DRIVE;
     e7c:	88 23       	and	r24, r24
     e7e:	19 f0       	breq	.+6      	; 0xe86 <f_mount+0xc>
     e80:	25 e0       	ldi	r18, 0x05	; 5
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	11 c0       	rjmp	.+34     	; 0xea8 <f_mount+0x2e>

	if (FatFs) FatFs->fs_type = 0;	/* Clear old object */
     e86:	e0 91 1a 01 	lds	r30, 0x011A
     e8a:	f0 91 1b 01 	lds	r31, 0x011B
     e8e:	30 97       	sbiw	r30, 0x00	; 0
     e90:	09 f0       	breq	.+2      	; 0xe94 <f_mount+0x1a>
     e92:	14 8e       	std	Z+28, r1	; 0x1c

	FatFs = fs;					/* Register and clear new object */
     e94:	b0 93 1b 01 	sts	0x011B, r27
     e98:	a0 93 1a 01 	sts	0x011A, r26
	if (fs) fs->fs_type = 0;
     e9c:	10 97       	sbiw	r26, 0x00	; 0
     e9e:	11 f0       	breq	.+4      	; 0xea4 <f_mount+0x2a>
     ea0:	5c 96       	adiw	r26, 0x1c	; 28
     ea2:	1c 92       	st	X, r1
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
     ea8:	c9 01       	movw	r24, r18
     eaa:	08 95       	ret

00000eac <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
     eac:	a3 e2       	ldi	r26, 0x23	; 35
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ec e5       	ldi	r30, 0x5C	; 92
     eb2:	f7 e0       	ldi	r31, 0x07	; 7
     eb4:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__prologue_saves__>
     eb8:	8a a3       	std	Y+34, r24	; 0x22
     eba:	6b a3       	std	Y+35, r22	; 0x23
     ebc:	8a 01       	movw	r16, r20
	DWORD n_clust, n;
	FATFS *fs;
	DSTATUS stat;


	if (partition >= 2) return FR_MKFS_ABORTED;
     ebe:	62 30       	cpi	r22, 0x02	; 2
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <f_mkfs+0x18>
     ec2:	09 c4       	rjmp	.+2066   	; 0x16d6 <f_mkfs+0x82a>
	for (n = 512; n <= 32768U && n != allocsize; n <<= 1);
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	32 e0       	ldi	r19, 0x02	; 2
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	c8 01       	movw	r24, r16
     ece:	a0 e0       	ldi	r26, 0x00	; 0
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	04 c0       	rjmp	.+8      	; 0xedc <f_mkfs+0x30>
     ed4:	22 0f       	add	r18, r18
     ed6:	33 1f       	adc	r19, r19
     ed8:	44 1f       	adc	r20, r20
     eda:	55 1f       	adc	r21, r21
     edc:	21 30       	cpi	r18, 0x01	; 1
     ede:	60 e8       	ldi	r22, 0x80	; 128
     ee0:	36 07       	cpc	r19, r22
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	46 07       	cpc	r20, r22
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	56 07       	cpc	r21, r22
     eea:	28 f4       	brcc	.+10     	; 0xef6 <f_mkfs+0x4a>
     eec:	28 17       	cp	r18, r24
     eee:	39 07       	cpc	r19, r25
     ef0:	4a 07       	cpc	r20, r26
     ef2:	5b 07       	cpc	r21, r27
     ef4:	79 f7       	brne	.-34     	; 0xed4 <f_mkfs+0x28>
     ef6:	2d 83       	std	Y+5, r18	; 0x05
     ef8:	3e 83       	std	Y+6, r19	; 0x06
     efa:	4f 83       	std	Y+7, r20	; 0x07
     efc:	58 87       	std	Y+8, r21	; 0x08
	if (n != allocsize) return FR_MKFS_ABORTED;
     efe:	c8 01       	movw	r24, r16
     f00:	a0 e0       	ldi	r26, 0x00	; 0
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	28 17       	cp	r18, r24
     f06:	39 07       	cpc	r19, r25
     f08:	4a 07       	cpc	r20, r26
     f0a:	5b 07       	cpc	r21, r27
     f0c:	09 f0       	breq	.+2      	; 0xf10 <f_mkfs+0x64>
     f0e:	e3 c3       	rjmp	.+1990   	; 0x16d6 <f_mkfs+0x82a>

	/* Check mounted drive and clear work area */
	fs = FatFs;
     f10:	40 90 1a 01 	lds	r4, 0x011A
     f14:	50 90 1b 01 	lds	r5, 0x011B
	if (!fs) return FR_NOT_ENABLED;
     f18:	41 14       	cp	r4, r1
     f1a:	51 04       	cpc	r5, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <f_mkfs+0x78>
     f1e:	2a e0       	ldi	r18, 0x0A	; 10
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	de c3       	rjmp	.+1980   	; 0x16e0 <f_mkfs+0x834>
	fs->fs_type = 0;
     f24:	d2 01       	movw	r26, r4
     f26:	5c 96       	adiw	r26, 0x1c	; 28
     f28:	1c 92       	st	X, r1
	
	/* Get disk statics */
	stat = disk_initialize(drv);
     f2a:	8a a1       	ldd	r24, Y+34	; 0x22
     f2c:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
     f30:	80 ff       	sbrs	r24, 0
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <f_mkfs+0x8e>
     f34:	21 e0       	ldi	r18, 0x01	; 1
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	d3 c3       	rjmp	.+1958   	; 0x16e0 <f_mkfs+0x834>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
     f3a:	82 ff       	sbrs	r24, 2
     f3c:	03 c0       	rjmp	.+6      	; 0xf44 <f_mkfs+0x98>
     f3e:	29 e0       	ldi	r18, 0x09	; 9
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	ce c3       	rjmp	.+1948   	; 0x16e0 <f_mkfs+0x834>
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
     f44:	8a a1       	ldd	r24, Y+34	; 0x22
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	ae 01       	movw	r20, r28
     f4a:	4f 5f       	subi	r20, 0xFF	; 255
     f4c:	5f 4f       	sbci	r21, 0xFF	; 255
     f4e:	0e 94 0a 1c 	call	0x3814	; 0x3814 <disk_ioctl>
     f52:	89 2b       	or	r24, r25
     f54:	09 f0       	breq	.+2      	; 0xf58 <f_mkfs+0xac>
     f56:	bf c3       	rjmp	.+1918   	; 0x16d6 <f_mkfs+0x82a>
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	ab 81       	ldd	r26, Y+3	; 0x03
     f5e:	bc 81       	ldd	r27, Y+4	; 0x04
     f60:	80 3d       	cpi	r24, 0xD0	; 208
     f62:	e7 e0       	ldi	r30, 0x07	; 7
     f64:	9e 07       	cpc	r25, r30
     f66:	e0 e0       	ldi	r30, 0x00	; 0
     f68:	ae 07       	cpc	r26, r30
     f6a:	e0 e0       	ldi	r30, 0x00	; 0
     f6c:	be 07       	cpc	r27, r30
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <f_mkfs+0xc6>
     f70:	b2 c3       	rjmp	.+1892   	; 0x16d6 <f_mkfs+0x82a>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
     f72:	81 50       	subi	r24, 0x01	; 1
     f74:	90 49       	sbci	r25, 0x90	; 144
     f76:	a0 4d       	sbci	r26, 0xD0	; 208
     f78:	b3 40       	sbci	r27, 0x03	; 3
     f7a:	40 f0       	brcs	.+16     	; 0xf8c <f_mkfs+0xe0>
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e9       	ldi	r25, 0x90	; 144
     f80:	a0 ed       	ldi	r26, 0xD0	; 208
     f82:	b3 e0       	ldi	r27, 0x03	; 3
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	ab 83       	std	Y+3, r26	; 0x03
     f8a:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
     f8c:	2b a1       	ldd	r18, Y+35	; 0x23
     f8e:	22 23       	and	r18, r18
     f90:	29 f0       	breq	.+10     	; 0xf9c <f_mkfs+0xf0>
     f92:	1d 8e       	std	Y+29, r1	; 0x1d
     f94:	1e 8e       	std	Y+30, r1	; 0x1e
     f96:	1f 8e       	std	Y+31, r1	; 0x1f
     f98:	18 a2       	std	Y+32, r1	; 0x20
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <f_mkfs+0x100>
     f9c:	8f e3       	ldi	r24, 0x3F	; 63
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	a0 e0       	ldi	r26, 0x00	; 0
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	8d 8f       	std	Y+29, r24	; 0x1d
     fa6:	9e 8f       	std	Y+30, r25	; 0x1e
     fa8:	af 8f       	std	Y+31, r26	; 0x1f
     faa:	b8 a3       	std	Y+32, r27	; 0x20
	n_part -= b_part;
     fac:	a9 80       	ldd	r10, Y+1	; 0x01
     fae:	ba 80       	ldd	r11, Y+2	; 0x02
     fb0:	cb 80       	ldd	r12, Y+3	; 0x03
     fb2:	dc 80       	ldd	r13, Y+4	; 0x04
     fb4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     fb6:	3e 8d       	ldd	r19, Y+30	; 0x1e
     fb8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     fba:	58 a1       	ldd	r21, Y+32	; 0x20
     fbc:	a2 1a       	sub	r10, r18
     fbe:	b3 0a       	sbc	r11, r19
     fc0:	c4 0a       	sbc	r12, r20
     fc2:	d5 0a       	sbc	r13, r21
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > S_MAX_SIZ
		|| SS(fs) > allocsize)
		return FR_MKFS_ABORTED;
#endif
	allocsize /= SS(fs);		/* Number of sectors per cluster */
     fc4:	18 01       	movw	r2, r16
     fc6:	23 2c       	mov	r2, r3
     fc8:	33 24       	eor	r3, r3
     fca:	26 94       	lsr	r2

	/* Pre-compute number of clusters and FAT type */
	n_clust = n_part / allocsize;
     fcc:	31 01       	movw	r6, r2
     fce:	88 24       	eor	r8, r8
     fd0:	99 24       	eor	r9, r9
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	a4 01       	movw	r20, r8
     fd8:	93 01       	movw	r18, r6
     fda:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <__udivmodsi4>
     fde:	c9 01       	movw	r24, r18
     fe0:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clust >= 0xFF5) fmt = FS_FAT16;
     fe2:	85 3f       	cpi	r24, 0xF5	; 245
     fe4:	3f e0       	ldi	r19, 0x0F	; 15
     fe6:	93 07       	cpc	r25, r19
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	a3 07       	cpc	r26, r19
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	b3 07       	cpc	r27, r19
     ff0:	08 f4       	brcc	.+2      	; 0xff4 <f_mkfs+0x148>
     ff2:	7b c3       	rjmp	.+1782   	; 0x16ea <f_mkfs+0x83e>
     ff4:	4b a1       	ldd	r20, Y+35	; 0x23
     ff6:	24 2f       	mov	r18, r20
     ff8:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clust >= 0xFFF5) fmt = FS_FAT32;
     ffa:	85 3f       	cpi	r24, 0xF5	; 245
     ffc:	5f ef       	ldi	r21, 0xFF	; 255
     ffe:	95 07       	cpc	r25, r21
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	a5 07       	cpc	r26, r21
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	b5 07       	cpc	r27, r21
    1008:	50 f5       	brcc	.+84     	; 0x105e <f_mkfs+0x1b2>
		n_fat = ((n_clust * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clust * 2) + 4 + SS(fs) - 1) / SS(fs);
    100a:	7c 01       	movw	r14, r24
    100c:	8d 01       	movw	r16, r26
    100e:	ee 0c       	add	r14, r14
    1010:	ff 1c       	adc	r15, r15
    1012:	00 1f       	adc	r16, r16
    1014:	11 1f       	adc	r17, r17
    1016:	83 e0       	ldi	r24, 0x03	; 3
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	a0 e0       	ldi	r26, 0x00	; 0
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e8 0e       	add	r14, r24
    1020:	f9 1e       	adc	r15, r25
    1022:	0a 1f       	adc	r16, r26
    1024:	1b 1f       	adc	r17, r27
    1026:	a9 e0       	ldi	r26, 0x09	; 9
    1028:	16 95       	lsr	r17
    102a:	07 95       	ror	r16
    102c:	f7 94       	ror	r15
    102e:	e7 94       	ror	r14
    1030:	aa 95       	dec	r26
    1032:	d1 f7       	brne	.-12     	; 0x1028 <f_mkfs+0x17c>
		n_rsv = 1 + partition;
    1034:	2f 5f       	subi	r18, 0xFF	; 255
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	c9 01       	movw	r24, r18
    103a:	aa 27       	eor	r26, r26
    103c:	97 fd       	sbrc	r25, 7
    103e:	a0 95       	com	r26
    1040:	ba 2f       	mov	r27, r26
    1042:	89 8f       	std	Y+25, r24	; 0x19
    1044:	9a 8f       	std	Y+26, r25	; 0x1a
    1046:	ab 8f       	std	Y+27, r26	; 0x1b
    1048:	bc 8f       	std	Y+28, r27	; 0x1c
    104a:	20 e2       	ldi	r18, 0x20	; 32
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e0       	ldi	r20, 0x00	; 0
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	2d 8b       	std	Y+21, r18	; 0x15
    1054:	3e 8b       	std	Y+22, r19	; 0x16
    1056:	4f 8b       	std	Y+23, r20	; 0x17
    1058:	58 8f       	std	Y+24, r21	; 0x18
    105a:	32 e0       	ldi	r19, 0x02	; 2
    105c:	2a c0       	rjmp	.+84     	; 0x10b2 <f_mkfs+0x206>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clust * 4) + 8 + SS(fs) - 1) / SS(fs);
    105e:	7c 01       	movw	r14, r24
    1060:	8d 01       	movw	r16, r26
    1062:	f2 e0       	ldi	r31, 0x02	; 2
    1064:	ee 0c       	add	r14, r14
    1066:	ff 1c       	adc	r15, r15
    1068:	00 1f       	adc	r16, r16
    106a:	11 1f       	adc	r17, r17
    106c:	fa 95       	dec	r31
    106e:	d1 f7       	brne	.-12     	; 0x1064 <f_mkfs+0x1b8>
    1070:	87 e0       	ldi	r24, 0x07	; 7
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	a0 e0       	ldi	r26, 0x00	; 0
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e8 0e       	add	r14, r24
    107a:	f9 1e       	adc	r15, r25
    107c:	0a 1f       	adc	r16, r26
    107e:	1b 1f       	adc	r17, r27
    1080:	e9 e0       	ldi	r30, 0x09	; 9
    1082:	16 95       	lsr	r17
    1084:	07 95       	ror	r16
    1086:	f7 94       	ror	r15
    1088:	e7 94       	ror	r14
    108a:	ea 95       	dec	r30
    108c:	d1 f7       	brne	.-12     	; 0x1082 <f_mkfs+0x1d6>
		n_rsv = 33 - partition;
    108e:	81 e2       	ldi	r24, 0x21	; 33
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	82 1b       	sub	r24, r18
    1094:	93 0b       	sbc	r25, r19
    1096:	9c 01       	movw	r18, r24
    1098:	44 27       	eor	r20, r20
    109a:	37 fd       	sbrc	r19, 7
    109c:	40 95       	com	r20
    109e:	54 2f       	mov	r21, r20
    10a0:	29 8f       	std	Y+25, r18	; 0x19
    10a2:	3a 8f       	std	Y+26, r19	; 0x1a
    10a4:	4b 8f       	std	Y+27, r20	; 0x1b
    10a6:	5c 8f       	std	Y+28, r21	; 0x1c
    10a8:	1d 8a       	std	Y+21, r1	; 0x15
    10aa:	1e 8a       	std	Y+22, r1	; 0x16
    10ac:	1f 8a       	std	Y+23, r1	; 0x17
    10ae:	18 8e       	std	Y+24, r1	; 0x18
    10b0:	33 e0       	ldi	r19, 0x03	; 3
    10b2:	39 a3       	std	Y+33, r19	; 0x21
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
	n_part -= b_part;
    10b4:	a9 82       	std	Y+1, r10	; 0x01
    10b6:	ba 82       	std	Y+2, r11	; 0x02
    10b8:	cb 82       	std	Y+3, r12	; 0x03
    10ba:	dc 82       	std	Y+4, r13	; 0x04
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    10bc:	8a a1       	ldd	r24, Y+34	; 0x22
    10be:	63 e0       	ldi	r22, 0x03	; 3
    10c0:	ae 01       	movw	r20, r28
    10c2:	4b 5f       	subi	r20, 0xFB	; 251
    10c4:	5f 4f       	sbci	r21, 0xFF	; 255
    10c6:	0e 94 0a 1c 	call	0x3814	; 0x3814 <disk_ioctl>
    10ca:	89 2b       	or	r24, r25
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <f_mkfs+0x224>
    10ce:	03 c3       	rjmp	.+1542   	; 0x16d6 <f_mkfs+0x82a>
	default:
		n_fat = ((n_clust * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    10d0:	89 8d       	ldd	r24, Y+25	; 0x19
    10d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10d4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    10d6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    10d8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    10da:	3e 8d       	ldd	r19, Y+30	; 0x1e
    10dc:	4f 8d       	ldd	r20, Y+31	; 0x1f
    10de:	58 a1       	ldd	r21, Y+32	; 0x20
    10e0:	82 0f       	add	r24, r18
    10e2:	93 1f       	adc	r25, r19
    10e4:	a4 1f       	adc	r26, r20
    10e6:	b5 1f       	adc	r27, r21
    10e8:	89 8b       	std	Y+17, r24	; 0x11
    10ea:	9a 8b       	std	Y+18, r25	; 0x12
    10ec:	ab 8b       	std	Y+19, r26	; 0x13
    10ee:	bc 8b       	std	Y+20, r27	; 0x14
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    10f0:	2d 89       	ldd	r18, Y+21	; 0x15
    10f2:	3e 89       	ldd	r19, Y+22	; 0x16
    10f4:	4f 89       	ldd	r20, Y+23	; 0x17
    10f6:	58 8d       	ldd	r21, Y+24	; 0x18
    10f8:	2e 0d       	add	r18, r14
    10fa:	3f 1d       	adc	r19, r15
    10fc:	40 1f       	adc	r20, r16
    10fe:	51 1f       	adc	r21, r17
    1100:	28 0f       	add	r18, r24
    1102:	39 1f       	adc	r19, r25
    1104:	4a 1f       	adc	r20, r26
    1106:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    1108:	8d 81       	ldd	r24, Y+5	; 0x05
    110a:	9e 81       	ldd	r25, Y+6	; 0x06
    110c:	af 81       	ldd	r26, Y+7	; 0x07
    110e:	b8 85       	ldd	r27, Y+8	; 0x08
    1110:	5c 01       	movw	r10, r24
    1112:	6d 01       	movw	r12, r26
    1114:	08 94       	sec
    1116:	a1 08       	sbc	r10, r1
    1118:	b1 08       	sbc	r11, r1
    111a:	c1 08       	sbc	r12, r1
    111c:	d1 08       	sbc	r13, r1
    111e:	a2 0e       	add	r10, r18
    1120:	b3 1e       	adc	r11, r19
    1122:	c4 1e       	adc	r12, r20
    1124:	d5 1e       	adc	r13, r21
    1126:	b0 95       	com	r27
    1128:	a0 95       	com	r26
    112a:	90 95       	com	r25
    112c:	81 95       	neg	r24
    112e:	9f 4f       	sbci	r25, 0xFF	; 255
    1130:	af 4f       	sbci	r26, 0xFF	; 255
    1132:	bf 4f       	sbci	r27, 0xFF	; 255
    1134:	a8 22       	and	r10, r24
    1136:	b9 22       	and	r11, r25
    1138:	ca 22       	and	r12, r26
    113a:	db 22       	and	r13, r27
	n_fat += (n - b_data) / N_FATS;
    113c:	d8 01       	movw	r26, r16
    113e:	c7 01       	movw	r24, r14
    1140:	82 1b       	sub	r24, r18
    1142:	93 0b       	sbc	r25, r19
    1144:	a4 0b       	sbc	r26, r20
    1146:	b5 0b       	sbc	r27, r21
    1148:	8a 0d       	add	r24, r10
    114a:	9b 1d       	adc	r25, r11
    114c:	ac 1d       	adc	r26, r12
    114e:	bd 1d       	adc	r27, r13
    1150:	8d 87       	std	Y+13, r24	; 0x0d
    1152:	9e 87       	std	Y+14, r25	; 0x0e
    1154:	af 87       	std	Y+15, r26	; 0x0f
    1156:	b8 8b       	std	Y+16, r27	; 0x10
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clust = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    1158:	e9 80       	ldd	r14, Y+1	; 0x01
    115a:	fa 80       	ldd	r15, Y+2	; 0x02
    115c:	0b 81       	ldd	r16, Y+3	; 0x03
    115e:	1c 81       	ldd	r17, Y+4	; 0x04
    1160:	c8 01       	movw	r24, r16
    1162:	b7 01       	movw	r22, r14
    1164:	29 8d       	ldd	r18, Y+25	; 0x19
    1166:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1168:	4b 8d       	ldd	r20, Y+27	; 0x1b
    116a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    116c:	62 1b       	sub	r22, r18
    116e:	73 0b       	sbc	r23, r19
    1170:	84 0b       	sbc	r24, r20
    1172:	95 0b       	sbc	r25, r21
    1174:	2d 85       	ldd	r18, Y+13	; 0x0d
    1176:	3e 85       	ldd	r19, Y+14	; 0x0e
    1178:	4f 85       	ldd	r20, Y+15	; 0x0f
    117a:	58 89       	ldd	r21, Y+16	; 0x10
    117c:	62 1b       	sub	r22, r18
    117e:	73 0b       	sbc	r23, r19
    1180:	84 0b       	sbc	r24, r20
    1182:	95 0b       	sbc	r25, r21
    1184:	2d 89       	ldd	r18, Y+21	; 0x15
    1186:	3e 89       	ldd	r19, Y+22	; 0x16
    1188:	4f 89       	ldd	r20, Y+23	; 0x17
    118a:	58 8d       	ldd	r21, Y+24	; 0x18
    118c:	62 1b       	sub	r22, r18
    118e:	73 0b       	sbc	r23, r19
    1190:	84 0b       	sbc	r24, r20
    1192:	95 0b       	sbc	r25, r21
    1194:	a4 01       	movw	r20, r8
    1196:	93 01       	movw	r18, r6
    1198:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <__udivmodsi4>
    119c:	39 01       	movw	r6, r18
    119e:	4a 01       	movw	r8, r20
	if (   (fmt == FS_FAT16 && n_clust < 0xFF5)
    11a0:	39 a1       	ldd	r19, Y+33	; 0x21
    11a2:	32 30       	cpi	r19, 0x02	; 2
    11a4:	51 f4       	brne	.+20     	; 0x11ba <f_mkfs+0x30e>
    11a6:	45 ef       	ldi	r20, 0xF5	; 245
    11a8:	64 16       	cp	r6, r20
    11aa:	4f e0       	ldi	r20, 0x0F	; 15
    11ac:	74 06       	cpc	r7, r20
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	84 06       	cpc	r8, r20
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	94 06       	cpc	r9, r20
    11b6:	70 f4       	brcc	.+28     	; 0x11d4 <f_mkfs+0x328>
    11b8:	8e c2       	rjmp	.+1308   	; 0x16d6 <f_mkfs+0x82a>
    11ba:	59 a1       	ldd	r21, Y+33	; 0x21
    11bc:	53 30       	cpi	r21, 0x03	; 3
    11be:	51 f4       	brne	.+20     	; 0x11d4 <f_mkfs+0x328>
    11c0:	65 ef       	ldi	r22, 0xF5	; 245
    11c2:	66 16       	cp	r6, r22
    11c4:	6f ef       	ldi	r22, 0xFF	; 255
    11c6:	76 06       	cpc	r7, r22
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	86 06       	cpc	r8, r22
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	96 06       	cpc	r9, r22
    11d0:	08 f4       	brcc	.+2      	; 0x11d4 <f_mkfs+0x328>
    11d2:	81 c2       	rjmp	.+1282   	; 0x16d6 <f_mkfs+0x82a>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    11d4:	ad 82       	std	Y+5, r10	; 0x05
    11d6:	be 82       	std	Y+6, r11	; 0x06
    11d8:	cf 82       	std	Y+7, r12	; 0x07
    11da:	d8 86       	std	Y+8, r13	; 0x08
	if (   (fmt == FS_FAT16 && n_clust < 0xFF5)
		|| (fmt == FS_FAT32 && n_clust < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    11dc:	8b a1       	ldd	r24, Y+35	; 0x23
    11de:	88 23       	and	r24, r24
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <f_mkfs+0x338>
    11e2:	7b c0       	rjmp	.+246    	; 0x12da <f_mkfs+0x42e>
		DWORD n_disk = b_part + n_part;
    11e4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    11e6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    11e8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    11ea:	58 a1       	ldd	r21, Y+32	; 0x20
    11ec:	2e 0d       	add	r18, r14
    11ee:	3f 1d       	adc	r19, r15
    11f0:	40 1f       	adc	r20, r16
    11f2:	51 1f       	adc	r21, r17

		tbl = &fs->win[MBR_Table];
    11f4:	70 e2       	ldi	r23, 0x20	; 32
    11f6:	e7 2e       	mov	r14, r23
    11f8:	f1 2c       	mov	r15, r1
    11fa:	e4 0c       	add	r14, r4
    11fc:	f5 1c       	adc	r15, r5
    11fe:	82 01       	movw	r16, r4
    1200:	02 52       	subi	r16, 0x22	; 34
    1202:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(&tbl[0], 0x00010180);	/* Partition start in CHS */
    1204:	80 e8       	ldi	r24, 0x80	; 128
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	a1 e0       	ldi	r26, 0x01	; 1
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	f8 01       	movw	r30, r16
    120e:	80 83       	st	Z, r24
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	a2 83       	std	Z+2, r26	; 0x02
    1214:	b3 83       	std	Z+3, r27	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    1216:	20 30       	cpi	r18, 0x00	; 0
    1218:	f4 e0       	ldi	r31, 0x04	; 4
    121a:	3f 07       	cpc	r19, r31
    121c:	fb ef       	ldi	r31, 0xFB	; 251
    121e:	4f 07       	cpc	r20, r31
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	5f 07       	cpc	r21, r31
    1224:	b0 f4       	brcc	.+44     	; 0x1252 <f_mkfs+0x3a6>
			n_disk = n_disk / 63 / 255;
    1226:	ca 01       	movw	r24, r20
    1228:	b9 01       	movw	r22, r18
    122a:	21 ec       	ldi	r18, 0xC1	; 193
    122c:	3e e3       	ldi	r19, 0x3E	; 62
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <__udivmodsi4>
    1236:	c9 01       	movw	r24, r18
    1238:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    123a:	f8 01       	movw	r30, r16
    123c:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    123e:	62 e0       	ldi	r22, 0x02	; 2
    1240:	b6 95       	lsr	r27
    1242:	a7 95       	ror	r26
    1244:	97 95       	ror	r25
    1246:	87 95       	ror	r24
    1248:	6a 95       	dec	r22
    124a:	d1 f7       	brne	.-12     	; 0x1240 <f_mkfs+0x394>
    124c:	8f 63       	ori	r24, 0x3F	; 63
    124e:	86 83       	std	Z+6, r24	; 0x06
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <f_mkfs+0x3b4>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	9f ef       	ldi	r25, 0xFF	; 255
    1256:	d8 01       	movw	r26, r16
    1258:	17 96       	adiw	r26, 0x07	; 7
    125a:	9c 93       	st	X, r25
    125c:	8e 93       	st	-X, r24
    125e:	16 97       	sbiw	r26, 0x06	; 6
		}
		tbl[5] = 254;
    1260:	8e ef       	ldi	r24, 0xFE	; 254
    1262:	f8 01       	movw	r30, r16
    1264:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    1266:	f9 a1       	ldd	r31, Y+33	; 0x21
    1268:	f3 30       	cpi	r31, 0x03	; 3
    126a:	81 f0       	breq	.+32     	; 0x128c <f_mkfs+0x3e0>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	9a 81       	ldd	r25, Y+2	; 0x02
    1270:	ab 81       	ldd	r26, Y+3	; 0x03
    1272:	bc 81       	ldd	r27, Y+4	; 0x04
    1274:	80 50       	subi	r24, 0x00	; 0
    1276:	90 40       	sbci	r25, 0x00	; 0
    1278:	a1 40       	sbci	r26, 0x01	; 1
    127a:	b0 40       	sbci	r27, 0x00	; 0
    127c:	10 f0       	brcs	.+4      	; 0x1282 <f_mkfs+0x3d6>
    127e:	86 e0       	ldi	r24, 0x06	; 6
    1280:	01 c0       	rjmp	.+2      	; 0x1284 <f_mkfs+0x3d8>
    1282:	84 e0       	ldi	r24, 0x04	; 4
    1284:	d8 01       	movw	r26, r16
    1286:	14 96       	adiw	r26, 0x04	; 4
    1288:	8c 93       	st	X, r24
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <f_mkfs+0x3e6>
		else
			tbl[4] = 0x0c;
    128c:	8c e0       	ldi	r24, 0x0C	; 12
    128e:	f8 01       	movw	r30, r16
    1290:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(&tbl[8], 63);			/* Partition start in LBA */
    1292:	8f e3       	ldi	r24, 0x3F	; 63
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a0 e0       	ldi	r26, 0x00	; 0
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	f8 01       	movw	r30, r16
    129c:	80 87       	std	Z+8, r24	; 0x08
    129e:	91 87       	std	Z+9, r25	; 0x09
    12a0:	a2 87       	std	Z+10, r26	; 0x0a
    12a2:	b3 87       	std	Z+11, r27	; 0x0b
		ST_DWORD(&tbl[12], n_part);		/* Partition size in LBA */
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	ab 81       	ldd	r26, Y+3	; 0x03
    12aa:	bc 81       	ldd	r27, Y+4	; 0x04
    12ac:	84 87       	std	Z+12, r24	; 0x0c
    12ae:	95 87       	std	Z+13, r25	; 0x0d
    12b0:	a6 87       	std	Z+14, r26	; 0x0e
    12b2:	b7 87       	std	Z+15, r27	; 0x0f
		ST_WORD(&tbl[64], 0xAA55);		/* Signature */
    12b4:	00 5c       	subi	r16, 0xC0	; 192
    12b6:	1f 4f       	sbci	r17, 0xFF	; 255
    12b8:	85 e5       	ldi	r24, 0x55	; 85
    12ba:	9a ea       	ldi	r25, 0xAA	; 170
    12bc:	d8 01       	movw	r26, r16
    12be:	8d 93       	st	X+, r24
    12c0:	9c 93       	st	X, r25
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    12c2:	8a a1       	ldd	r24, Y+34	; 0x22
    12c4:	b7 01       	movw	r22, r14
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	01 e0       	ldi	r16, 0x01	; 1
    12d0:	0e 94 94 1b 	call	0x3728	; 0x3728 <disk_write>
    12d4:	89 2b       	or	r24, r25
    12d6:	09 f0       	breq	.+2      	; 0x12da <f_mkfs+0x42e>
    12d8:	01 c2       	rjmp	.+1026   	; 0x16dc <f_mkfs+0x830>
			return FR_RW_ERROR;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    12da:	50 e2       	ldi	r21, 0x20	; 32
    12dc:	e5 2e       	mov	r14, r21
    12de:	f1 2c       	mov	r15, r1
    12e0:	e4 0c       	add	r14, r4
    12e2:	f5 1c       	adc	r15, r5
	memset(tbl, 0, SS(fs));
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	32 e0       	ldi	r19, 0x02	; 2
    12e8:	f7 01       	movw	r30, r14
    12ea:	a9 01       	movw	r20, r18
    12ec:	11 92       	st	Z+, r1
    12ee:	41 50       	subi	r20, 0x01	; 1
    12f0:	50 40       	sbci	r21, 0x00	; 0
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <f_mkfs+0x440>
	ST_DWORD(&tbl[BS_jmpBoot], 0x90FEEB);		/* Boot code (jmp $, nop) */
    12f4:	8b ee       	ldi	r24, 0xEB	; 235
    12f6:	9e ef       	ldi	r25, 0xFE	; 254
    12f8:	a0 e9       	ldi	r26, 0x90	; 144
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	f2 01       	movw	r30, r4
    12fe:	80 a3       	std	Z+32, r24	; 0x20
    1300:	91 a3       	std	Z+33, r25	; 0x21
    1302:	a2 a3       	std	Z+34, r26	; 0x22
    1304:	b3 a3       	std	Z+35, r27	; 0x23
	ST_WORD(&tbl[BPB_BytsPerSec], SS(fs));		/* Sector size */
    1306:	d7 01       	movw	r26, r14
    1308:	1c 96       	adiw	r26, 0x0c	; 12
    130a:	3c 93       	st	X, r19
    130c:	2e 93       	st	-X, r18
    130e:	1b 97       	sbiw	r26, 0x0b	; 11
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    1310:	12 2d       	mov	r17, r2
    1312:	25 a6       	std	Z+45, r2	; 0x2d
	ST_WORD(&tbl[BPB_RsvdSecCnt], n_rsv);		/* Reserved sectors */
    1314:	e9 8d       	ldd	r30, Y+25	; 0x19
    1316:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1318:	1f 96       	adiw	r26, 0x0f	; 15
    131a:	fc 93       	st	X, r31
    131c:	ee 93       	st	-X, r30
    131e:	1e 97       	sbiw	r26, 0x0e	; 14
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	d2 01       	movw	r26, r4
    1324:	d0 96       	adiw	r26, 0x30	; 48
    1326:	8c 93       	st	X, r24
	ST_WORD(&tbl[BPB_RootEntCnt], SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    1328:	8d 89       	ldd	r24, Y+21	; 0x15
    132a:	9e 89       	ldd	r25, Y+22	; 0x16
    132c:	af 89       	ldd	r26, Y+23	; 0x17
    132e:	b8 8d       	ldd	r27, Y+24	; 0x18
    1330:	44 e0       	ldi	r20, 0x04	; 4
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	aa 1f       	adc	r26, r26
    1338:	bb 1f       	adc	r27, r27
    133a:	4a 95       	dec	r20
    133c:	d1 f7       	brne	.-12     	; 0x1332 <f_mkfs+0x486>
    133e:	f7 01       	movw	r30, r14
    1340:	92 8b       	std	Z+18, r25	; 0x12
    1342:	81 8b       	std	Z+17, r24	; 0x11
	if (n_part < 0x10000) {						/* Number of total sectors */
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	ab 81       	ldd	r26, Y+3	; 0x03
    134a:	bc 81       	ldd	r27, Y+4	; 0x04
    134c:	80 30       	cpi	r24, 0x00	; 0
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	9f 07       	cpc	r25, r31
    1352:	f1 e0       	ldi	r31, 0x01	; 1
    1354:	af 07       	cpc	r26, r31
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	bf 07       	cpc	r27, r31
    135a:	20 f4       	brcc	.+8      	; 0x1364 <f_mkfs+0x4b8>
		ST_WORD(&tbl[BPB_TotSec16], n_part);
    135c:	f7 01       	movw	r30, r14
    135e:	94 8b       	std	Z+20, r25	; 0x14
    1360:	83 8b       	std	Z+19, r24	; 0x13
    1362:	05 c0       	rjmp	.+10     	; 0x136e <f_mkfs+0x4c2>
	} else {
		ST_DWORD(&tbl[BPB_TotSec32], n_part);
    1364:	f7 01       	movw	r30, r14
    1366:	80 a3       	std	Z+32, r24	; 0x20
    1368:	91 a3       	std	Z+33, r25	; 0x21
    136a:	a2 a3       	std	Z+34, r26	; 0x22
    136c:	b3 a3       	std	Z+35, r27	; 0x23
	}
	tbl[BPB_Media] = 0xF8;						/* Media descripter */
    136e:	88 ef       	ldi	r24, 0xF8	; 248
    1370:	d2 01       	movw	r26, r4
    1372:	d5 96       	adiw	r26, 0x35	; 53
    1374:	8c 93       	st	X, r24
	ST_WORD(&tbl[BPB_SecPerTrk], 63);			/* Number of sectors per track */
    1376:	8f e3       	ldi	r24, 0x3F	; 63
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	f7 01       	movw	r30, r14
    137c:	91 8f       	std	Z+25, r25	; 0x19
    137e:	80 8f       	std	Z+24, r24	; 0x18
	ST_WORD(&tbl[BPB_NumHeads], 255);			/* Number of heads */
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	93 8f       	std	Z+27, r25	; 0x1b
    1386:	82 8f       	std	Z+26, r24	; 0x1a
	ST_DWORD(&tbl[BPB_HiddSec], b_part);		/* Hidden sectors */
    1388:	2d 8d       	ldd	r18, Y+29	; 0x1d
    138a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    138c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    138e:	58 a1       	ldd	r21, Y+32	; 0x20
    1390:	d7 01       	movw	r26, r14
    1392:	5c 96       	adiw	r26, 0x1c	; 28
    1394:	2d 93       	st	X+, r18
    1396:	3d 93       	st	X+, r19
    1398:	4d 93       	st	X+, r20
    139a:	5c 93       	st	X, r21
    139c:	5f 97       	sbiw	r26, 0x1f	; 31
	n = get_fattime();							/* Use current time as a VSN */
    139e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <get_fattime>
    13a2:	6d 83       	std	Y+5, r22	; 0x05
    13a4:	7e 83       	std	Y+6, r23	; 0x06
    13a6:	8f 83       	std	Y+7, r24	; 0x07
    13a8:	98 87       	std	Y+8, r25	; 0x08
	if (fmt != FS_FAT32) {
    13aa:	b9 a1       	ldd	r27, Y+33	; 0x21
    13ac:	b3 30       	cpi	r27, 0x03	; 3
    13ae:	29 f1       	breq	.+74     	; 0x13fa <f_mkfs+0x54e>
		ST_DWORD(&tbl[BS_VolID], n);			/* Volume serial number */
    13b0:	f7 01       	movw	r30, r14
    13b2:	67 a3       	std	Z+39, r22	; 0x27
    13b4:	70 a7       	std	Z+40, r23	; 0x28
    13b6:	81 a7       	std	Z+41, r24	; 0x29
    13b8:	92 a7       	std	Z+42, r25	; 0x2a
		ST_WORD(&tbl[BPB_FATSz16], n_fat);		/* Number of secters per FAT */
    13ba:	2d 85       	ldd	r18, Y+13	; 0x0d
    13bc:	3e 85       	ldd	r19, Y+14	; 0x0e
    13be:	37 8b       	std	Z+23, r19	; 0x17
    13c0:	26 8b       	std	Z+22, r18	; 0x16
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    13c2:	44 e4       	ldi	r20, 0x44	; 68
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	44 0e       	add	r4, r20
    13c8:	55 1e       	adc	r5, r21
    13ca:	80 e8       	ldi	r24, 0x80	; 128
    13cc:	d2 01       	movw	r26, r4
    13ce:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    13d0:	e2 e0       	ldi	r30, 0x02	; 2
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	4e 0e       	add	r4, r30
    13d6:	5f 1e       	adc	r5, r31
    13d8:	89 e2       	ldi	r24, 0x29	; 41
    13da:	d2 01       	movw	r26, r4
    13dc:	8c 93       	st	X, r24
    13de:	ea eb       	ldi	r30, 0xBA	; 186
    13e0:	ff ef       	ldi	r31, 0xFF	; 255
    13e2:	4e 0e       	add	r4, r30
    13e4:	5f 1e       	adc	r5, r31
		memcpy(&tbl[BS_VolLab], "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
    13e6:	d7 01       	movw	r26, r14
    13e8:	9b 96       	adiw	r26, 0x2b	; 43
    13ea:	e4 e6       	ldi	r30, 0x64	; 100
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	83 e1       	ldi	r24, 0x13	; 19
    13f0:	01 90       	ld	r0, Z+
    13f2:	0d 92       	st	X+, r0
    13f4:	81 50       	subi	r24, 0x01	; 1
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <f_mkfs+0x544>
    13f8:	46 c0       	rjmp	.+140    	; 0x1486 <f_mkfs+0x5da>
	} else {
		ST_DWORD(&tbl[BS_VolID32], n);			/* Volume serial number */
    13fa:	23 e4       	ldi	r18, 0x43	; 67
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	e2 0e       	add	r14, r18
    1400:	f3 1e       	adc	r15, r19
    1402:	d7 01       	movw	r26, r14
    1404:	6d 93       	st	X+, r22
    1406:	7d 93       	st	X+, r23
    1408:	8d 93       	st	X+, r24
    140a:	9c 93       	st	X, r25
    140c:	13 97       	sbiw	r26, 0x03	; 3
    140e:	ed eb       	ldi	r30, 0xBD	; 189
    1410:	ff ef       	ldi	r31, 0xFF	; 255
    1412:	ee 0e       	add	r14, r30
    1414:	ff 1e       	adc	r15, r31
		ST_DWORD(&tbl[BPB_FATSz32], n_fat);		/* Number of secters per FAT */
    1416:	2d 85       	ldd	r18, Y+13	; 0x0d
    1418:	3e 85       	ldd	r19, Y+14	; 0x0e
    141a:	4f 85       	ldd	r20, Y+15	; 0x0f
    141c:	58 89       	ldd	r21, Y+16	; 0x10
    141e:	d7 01       	movw	r26, r14
    1420:	94 96       	adiw	r26, 0x24	; 36
    1422:	2d 93       	st	X+, r18
    1424:	3d 93       	st	X+, r19
    1426:	4d 93       	st	X+, r20
    1428:	5c 93       	st	X, r21
    142a:	97 97       	sbiw	r26, 0x27	; 39
		ST_DWORD(&tbl[BPB_RootClus], 2);		/* Root directory cluster (2) */
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	a0 e0       	ldi	r26, 0x00	; 0
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	f7 01       	movw	r30, r14
    1436:	84 a7       	std	Z+44, r24	; 0x2c
    1438:	95 a7       	std	Z+45, r25	; 0x2d
    143a:	a6 a7       	std	Z+46, r26	; 0x2e
    143c:	b7 a7       	std	Z+47, r27	; 0x2f
		ST_WORD(&tbl[BPB_FSInfo], 1);			/* FSInfo record (bs+1) */
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	91 ab       	std	Z+49, r25	; 0x31
    1444:	80 ab       	std	Z+48, r24	; 0x30
		ST_WORD(&tbl[BPB_BkBootSec], 6);		/* Backup boot record (bs+6) */
    1446:	86 e0       	ldi	r24, 0x06	; 6
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	93 ab       	std	Z+51, r25	; 0x33
    144c:	82 ab       	std	Z+50, r24	; 0x32
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    144e:	20 e6       	ldi	r18, 0x60	; 96
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	42 0e       	add	r4, r18
    1454:	53 1e       	adc	r5, r19
    1456:	80 e8       	ldi	r24, 0x80	; 128
    1458:	d2 01       	movw	r26, r4
    145a:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    145c:	e2 e0       	ldi	r30, 0x02	; 2
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	4e 0e       	add	r4, r30
    1462:	5f 1e       	adc	r5, r31
    1464:	89 e2       	ldi	r24, 0x29	; 41
    1466:	d2 01       	movw	r26, r4
    1468:	8c 93       	st	X, r24
    146a:	ee e9       	ldi	r30, 0x9E	; 158
    146c:	ff ef       	ldi	r31, 0xFF	; 255
    146e:	4e 0e       	add	r4, r30
    1470:	5f 1e       	adc	r5, r31
		memcpy(&tbl[BS_VolLab32], "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
    1472:	d7 01       	movw	r26, r14
    1474:	a9 5b       	subi	r26, 0xB9	; 185
    1476:	bf 4f       	sbci	r27, 0xFF	; 255
    1478:	e8 e7       	ldi	r30, 0x78	; 120
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	83 e1       	ldi	r24, 0x13	; 19
    147e:	01 90       	ld	r0, Z+
    1480:	0d 92       	st	X+, r0
    1482:	81 50       	subi	r24, 0x01	; 1
    1484:	e1 f7       	brne	.-8      	; 0x147e <f_mkfs+0x5d2>
	}
	ST_WORD(&tbl[BS_55AA], 0xAA55);			/* Signature */
    1486:	3e ef       	ldi	r19, 0xFE	; 254
    1488:	23 2e       	mov	r2, r19
    148a:	31 e0       	ldi	r19, 0x01	; 1
    148c:	33 2e       	mov	r3, r19
    148e:	2e 0c       	add	r2, r14
    1490:	3f 1c       	adc	r3, r15
    1492:	85 e5       	ldi	r24, 0x55	; 85
    1494:	9a ea       	ldi	r25, 0xAA	; 170
    1496:	d1 01       	movw	r26, r2
    1498:	8d 93       	st	X+, r24
    149a:	9c 93       	st	X, r25
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    149c:	8a a1       	ldd	r24, Y+34	; 0x22
    149e:	b7 01       	movw	r22, r14
    14a0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    14a2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    14a4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    14a6:	58 a1       	ldd	r21, Y+32	; 0x20
    14a8:	01 e0       	ldi	r16, 0x01	; 1
    14aa:	0e 94 94 1b 	call	0x3728	; 0x3728 <disk_write>
    14ae:	89 2b       	or	r24, r25
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <f_mkfs+0x608>
    14b2:	14 c1       	rjmp	.+552    	; 0x16dc <f_mkfs+0x830>
		return FR_RW_ERROR;
	if (fmt == FS_FAT32)
    14b4:	b9 a1       	ldd	r27, Y+33	; 0x21
    14b6:	b3 30       	cpi	r27, 0x03	; 3
    14b8:	61 f4       	brne	.+24     	; 0x14d2 <f_mkfs+0x626>
		disk_write(drv, tbl, b_part+6, 1);
    14ba:	2d 8d       	ldd	r18, Y+29	; 0x1d
    14bc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    14be:	4f 8d       	ldd	r20, Y+31	; 0x1f
    14c0:	58 a1       	ldd	r21, Y+32	; 0x20
    14c2:	2a 5f       	subi	r18, 0xFA	; 250
    14c4:	3f 4f       	sbci	r19, 0xFF	; 255
    14c6:	4f 4f       	sbci	r20, 0xFF	; 255
    14c8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ca:	8a a1       	ldd	r24, Y+34	; 0x22
    14cc:	b7 01       	movw	r22, r14
    14ce:	0e 94 94 1b 	call	0x3728	; 0x3728 <disk_write>

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		memset(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	92 e0       	ldi	r25, 0x02	; 2
    14d6:	f7 01       	movw	r30, r14
    14d8:	9c 01       	movw	r18, r24
    14da:	11 92       	st	Z+, r1
    14dc:	21 50       	subi	r18, 0x01	; 1
    14de:	30 40       	sbci	r19, 0x00	; 0
    14e0:	e1 f7       	brne	.-8      	; 0x14da <f_mkfs+0x62e>
		if (fmt != FS_FAT32) {
    14e2:	39 a1       	ldd	r19, Y+33	; 0x21
    14e4:	33 30       	cpi	r19, 0x03	; 3
    14e6:	a9 f0       	breq	.+42     	; 0x1512 <f_mkfs+0x666>
			n = (fmt == FS_FAT12) ? 0x00FFFFF8 : 0xFFFFFFF8;
    14e8:	31 30       	cpi	r19, 0x01	; 1
    14ea:	29 f0       	breq	.+10     	; 0x14f6 <f_mkfs+0x64a>
    14ec:	88 ef       	ldi	r24, 0xF8	; 248
    14ee:	9f ef       	ldi	r25, 0xFF	; 255
    14f0:	af ef       	ldi	r26, 0xFF	; 255
    14f2:	bf ef       	ldi	r27, 0xFF	; 255
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <f_mkfs+0x652>
    14f6:	88 ef       	ldi	r24, 0xF8	; 248
    14f8:	9f ef       	ldi	r25, 0xFF	; 255
    14fa:	af ef       	ldi	r26, 0xFF	; 255
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	af 83       	std	Y+7, r26	; 0x07
    1504:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(&tbl[0], n);			/* Reserve cluster #0-1 (FAT12/16) */
    1506:	f2 01       	movw	r30, r4
    1508:	80 a3       	std	Z+32, r24	; 0x20
    150a:	91 a3       	std	Z+33, r25	; 0x21
    150c:	a2 a3       	std	Z+34, r26	; 0x22
    150e:	b3 a3       	std	Z+35, r27	; 0x23
    1510:	1a c0       	rjmp	.+52     	; 0x1546 <f_mkfs+0x69a>
		} else {
			ST_DWORD(&tbl[0], 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    1512:	88 ef       	ldi	r24, 0xF8	; 248
    1514:	9f ef       	ldi	r25, 0xFF	; 255
    1516:	af ef       	ldi	r26, 0xFF	; 255
    1518:	bf ef       	ldi	r27, 0xFF	; 255
    151a:	f2 01       	movw	r30, r4
    151c:	80 a3       	std	Z+32, r24	; 0x20
    151e:	91 a3       	std	Z+33, r25	; 0x21
    1520:	a2 a3       	std	Z+34, r26	; 0x22
    1522:	b3 a3       	std	Z+35, r27	; 0x23
			ST_DWORD(&tbl[4], 0xFFFFFFFF);
    1524:	8f ef       	ldi	r24, 0xFF	; 255
    1526:	9f ef       	ldi	r25, 0xFF	; 255
    1528:	af ef       	ldi	r26, 0xFF	; 255
    152a:	bf ef       	ldi	r27, 0xFF	; 255
    152c:	f7 01       	movw	r30, r14
    152e:	84 83       	std	Z+4, r24	; 0x04
    1530:	95 83       	std	Z+5, r25	; 0x05
    1532:	a6 83       	std	Z+6, r26	; 0x06
    1534:	b7 83       	std	Z+7, r27	; 0x07
			ST_DWORD(&tbl[8], 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	9f ef       	ldi	r25, 0xFF	; 255
    153a:	af ef       	ldi	r26, 0xFF	; 255
    153c:	bf e0       	ldi	r27, 0x0F	; 15
    153e:	80 87       	std	Z+8, r24	; 0x08
    1540:	91 87       	std	Z+9, r25	; 0x09
    1542:	a2 87       	std	Z+10, r26	; 0x0a
    1544:	b3 87       	std	Z+11, r27	; 0x0b
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    1546:	8a a1       	ldd	r24, Y+34	; 0x22
    1548:	b7 01       	movw	r22, r14
    154a:	29 89       	ldd	r18, Y+17	; 0x11
    154c:	3a 89       	ldd	r19, Y+18	; 0x12
    154e:	4b 89       	ldd	r20, Y+19	; 0x13
    1550:	5c 89       	ldd	r21, Y+20	; 0x14
    1552:	01 e0       	ldi	r16, 0x01	; 1
    1554:	0e 94 94 1b 	call	0x3728	; 0x3728 <disk_write>
    1558:	89 2b       	or	r24, r25
    155a:	09 f0       	breq	.+2      	; 0x155e <f_mkfs+0x6b2>
    155c:	bf c0       	rjmp	.+382    	; 0x16dc <f_mkfs+0x830>
    155e:	a9 88       	ldd	r10, Y+17	; 0x11
    1560:	ba 88       	ldd	r11, Y+18	; 0x12
    1562:	cb 88       	ldd	r12, Y+19	; 0x13
    1564:	dc 88       	ldd	r13, Y+20	; 0x14
    1566:	08 94       	sec
    1568:	a1 1c       	adc	r10, r1
    156a:	b1 1c       	adc	r11, r1
    156c:	c1 1c       	adc	r12, r1
    156e:	d1 1c       	adc	r13, r1
			return FR_RW_ERROR;
		memset(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	92 e0       	ldi	r25, 0x02	; 2
    1574:	d7 01       	movw	r26, r14
    1576:	fc 01       	movw	r30, r24
    1578:	1d 92       	st	X+, r1
    157a:	31 97       	sbiw	r30, 0x01	; 1
    157c:	e9 f7       	brne	.-6      	; 0x1578 <f_mkfs+0x6cc>
		for (n = 1; n < n_fat; n++) {
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a0 e0       	ldi	r26, 0x00	; 0
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	16 c0       	rjmp	.+44     	; 0x15b4 <f_mkfs+0x708>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    1588:	8a a1       	ldd	r24, Y+34	; 0x22
    158a:	b7 01       	movw	r22, r14
    158c:	a6 01       	movw	r20, r12
    158e:	95 01       	movw	r18, r10
    1590:	01 e0       	ldi	r16, 0x01	; 1
    1592:	0e 94 94 1b 	call	0x3728	; 0x3728 <disk_write>
    1596:	89 2b       	or	r24, r25
    1598:	09 f0       	breq	.+2      	; 0x159c <f_mkfs+0x6f0>
    159a:	a0 c0       	rjmp	.+320    	; 0x16dc <f_mkfs+0x830>
    159c:	08 94       	sec
    159e:	a1 1c       	adc	r10, r1
    15a0:	b1 1c       	adc	r11, r1
    15a2:	c1 1c       	adc	r12, r1
    15a4:	d1 1c       	adc	r13, r1
			ST_DWORD(&tbl[8], 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_RW_ERROR;
		memset(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	af 81       	ldd	r26, Y+7	; 0x07
    15ac:	b8 85       	ldd	r27, Y+8	; 0x08
    15ae:	01 96       	adiw	r24, 0x01	; 1
    15b0:	a1 1d       	adc	r26, r1
    15b2:	b1 1d       	adc	r27, r1
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	af 83       	std	Y+7, r26	; 0x07
    15ba:	b8 87       	std	Y+8, r27	; 0x08
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	af 81       	ldd	r26, Y+7	; 0x07
    15c2:	b8 85       	ldd	r27, Y+8	; 0x08
    15c4:	2d 85       	ldd	r18, Y+13	; 0x0d
    15c6:	3e 85       	ldd	r19, Y+14	; 0x0e
    15c8:	4f 85       	ldd	r20, Y+15	; 0x0f
    15ca:	58 89       	ldd	r21, Y+16	; 0x10
    15cc:	82 17       	cp	r24, r18
    15ce:	93 07       	cpc	r25, r19
    15d0:	a4 07       	cpc	r26, r20
    15d2:	b5 07       	cpc	r27, r21
    15d4:	c8 f2       	brcs	.-78     	; 0x1588 <f_mkfs+0x6dc>
				return FR_RW_ERROR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    15d6:	39 a1       	ldd	r19, Y+33	; 0x21
    15d8:	33 30       	cpi	r19, 0x03	; 3
    15da:	09 f0       	breq	.+2      	; 0x15de <f_mkfs+0x732>
    15dc:	1d 89       	ldd	r17, Y+21	; 0x15
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    15de:	d6 01       	movw	r26, r12
    15e0:	c5 01       	movw	r24, r10
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	a1 1d       	adc	r26, r1
    15e6:	b1 1d       	adc	r27, r1
    15e8:	89 87       	std	Y+9, r24	; 0x09
    15ea:	9a 87       	std	Y+10, r25	; 0x0a
    15ec:	ab 87       	std	Y+11, r26	; 0x0b
    15ee:	bc 87       	std	Y+12, r27	; 0x0c
    15f0:	8a a1       	ldd	r24, Y+34	; 0x22
    15f2:	b7 01       	movw	r22, r14
    15f4:	a6 01       	movw	r20, r12
    15f6:	95 01       	movw	r18, r10
    15f8:	01 e0       	ldi	r16, 0x01	; 1
    15fa:	0e 94 94 1b 	call	0x3728	; 0x3728 <disk_write>
    15fe:	89 2b       	or	r24, r25
    1600:	09 f0       	breq	.+2      	; 0x1604 <f_mkfs+0x758>
    1602:	6c c0       	rjmp	.+216    	; 0x16dc <f_mkfs+0x830>
			return FR_RW_ERROR;
	} while (--m);
    1604:	11 50       	subi	r17, 0x01	; 1
    1606:	29 f0       	breq	.+10     	; 0x1612 <f_mkfs+0x766>
    1608:	a9 84       	ldd	r10, Y+9	; 0x09
    160a:	ba 84       	ldd	r11, Y+10	; 0x0a
    160c:	cb 84       	ldd	r12, Y+11	; 0x0b
    160e:	dc 84       	ldd	r13, Y+12	; 0x0c
    1610:	e6 cf       	rjmp	.-52     	; 0x15de <f_mkfs+0x732>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    1612:	99 a1       	ldd	r25, Y+33	; 0x21
    1614:	93 30       	cpi	r25, 0x03	; 3
    1616:	09 f0       	breq	.+2      	; 0x161a <f_mkfs+0x76e>
    1618:	53 c0       	rjmp	.+166    	; 0x16c0 <f_mkfs+0x814>
		ST_WORD(&tbl[BS_55AA], 0xAA55);
    161a:	85 e5       	ldi	r24, 0x55	; 85
    161c:	9a ea       	ldi	r25, 0xAA	; 170
    161e:	d1 01       	movw	r26, r2
    1620:	8d 93       	st	X+, r24
    1622:	9c 93       	st	X, r25
		ST_DWORD(&tbl[FSI_LeadSig], 0x41615252);
    1624:	82 e5       	ldi	r24, 0x52	; 82
    1626:	92 e5       	ldi	r25, 0x52	; 82
    1628:	a1 e6       	ldi	r26, 0x61	; 97
    162a:	b1 e4       	ldi	r27, 0x41	; 65
    162c:	f2 01       	movw	r30, r4
    162e:	80 a3       	std	Z+32, r24	; 0x20
    1630:	91 a3       	std	Z+33, r25	; 0x21
    1632:	a2 a3       	std	Z+34, r26	; 0x22
    1634:	b3 a3       	std	Z+35, r27	; 0x23
		ST_DWORD(&tbl[FSI_StrucSig], 0x61417272);
    1636:	24 ee       	ldi	r18, 0xE4	; 228
    1638:	31 e0       	ldi	r19, 0x01	; 1
    163a:	e2 0e       	add	r14, r18
    163c:	f3 1e       	adc	r15, r19
    163e:	82 e7       	ldi	r24, 0x72	; 114
    1640:	92 e7       	ldi	r25, 0x72	; 114
    1642:	a1 e4       	ldi	r26, 0x41	; 65
    1644:	b1 e6       	ldi	r27, 0x61	; 97
    1646:	f7 01       	movw	r30, r14
    1648:	81 93       	st	Z+, r24
    164a:	91 93       	st	Z+, r25
    164c:	a1 93       	st	Z+, r26
    164e:	b1 93       	st	Z+, r27
		ST_DWORD(&tbl[FSI_Free_Count], n_clust - 1);
    1650:	08 94       	sec
    1652:	61 08       	sbc	r6, r1
    1654:	71 08       	sbc	r7, r1
    1656:	81 08       	sbc	r8, r1
    1658:	91 08       	sbc	r9, r1
    165a:	df 01       	movw	r26, r30
    165c:	6d 92       	st	X+, r6
    165e:	7d 92       	st	X+, r7
    1660:	8d 92       	st	X+, r8
    1662:	9d 92       	st	X+, r9
    1664:	7d 01       	movw	r14, r26
		ST_DWORD(&tbl[FSI_Nxt_Free], 0xFFFFFFFF);
    1666:	8f ef       	ldi	r24, 0xFF	; 255
    1668:	9f ef       	ldi	r25, 0xFF	; 255
    166a:	af ef       	ldi	r26, 0xFF	; 255
    166c:	bf ef       	ldi	r27, 0xFF	; 255
    166e:	f7 01       	movw	r30, r14
    1670:	80 83       	st	Z, r24
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	a2 83       	std	Z+2, r26	; 0x02
    1676:	b3 83       	std	Z+3, r27	; 0x03
    1678:	24 e1       	ldi	r18, 0x14	; 20
    167a:	3e ef       	ldi	r19, 0xFE	; 254
    167c:	e2 0e       	add	r14, r18
    167e:	f3 1e       	adc	r15, r19
		disk_write(drv, tbl, b_part+1, 1);
    1680:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1682:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1684:	af 8d       	ldd	r26, Y+31	; 0x1f
    1686:	b8 a1       	ldd	r27, Y+32	; 0x20
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	a1 1d       	adc	r26, r1
    168c:	b1 1d       	adc	r27, r1
    168e:	8d 8f       	std	Y+29, r24	; 0x1d
    1690:	9e 8f       	std	Y+30, r25	; 0x1e
    1692:	af 8f       	std	Y+31, r26	; 0x1f
    1694:	b8 a3       	std	Y+32, r27	; 0x20
    1696:	8a a1       	ldd	r24, Y+34	; 0x22
    1698:	b7 01       	movw	r22, r14
    169a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    169c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    169e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    16a0:	58 a1       	ldd	r21, Y+32	; 0x20
    16a2:	01 e0       	ldi	r16, 0x01	; 1
    16a4:	0e 94 94 1b 	call	0x3728	; 0x3728 <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    16a8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    16aa:	3e 8d       	ldd	r19, Y+30	; 0x1e
    16ac:	4f 8d       	ldd	r20, Y+31	; 0x1f
    16ae:	58 a1       	ldd	r21, Y+32	; 0x20
    16b0:	2a 5f       	subi	r18, 0xFA	; 250
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	4f 4f       	sbci	r20, 0xFF	; 255
    16b6:	5f 4f       	sbci	r21, 0xFF	; 255
    16b8:	8a a1       	ldd	r24, Y+34	; 0x22
    16ba:	b7 01       	movw	r22, r14
    16bc:	0e 94 94 1b 	call	0x3728	; 0x3728 <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, NULL) == RES_OK) ? FR_OK : FR_RW_ERROR;
    16c0:	8a a1       	ldd	r24, Y+34	; 0x22
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	40 e0       	ldi	r20, 0x00	; 0
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	0e 94 0a 1c 	call	0x3814	; 0x3814 <disk_ioctl>
    16cc:	89 2b       	or	r24, r25
    16ce:	31 f4       	brne	.+12     	; 0x16dc <f_mkfs+0x830>
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <f_mkfs+0x834>
    16d6:	2d e0       	ldi	r18, 0x0D	; 13
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <f_mkfs+0x834>
    16dc:	28 e0       	ldi	r18, 0x08	; 8
    16de:	30 e0       	ldi	r19, 0x00	; 0
}
    16e0:	c9 01       	movw	r24, r18
    16e2:	a3 96       	adiw	r28, 0x23	; 35
    16e4:	e2 e1       	ldi	r30, 0x12	; 18
    16e6:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__epilogue_restores__>
	if (n_clust >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clust * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    16ea:	7c 01       	movw	r14, r24
    16ec:	8d 01       	movw	r16, r26
    16ee:	ee 0c       	add	r14, r14
    16f0:	ff 1c       	adc	r15, r15
    16f2:	00 1f       	adc	r16, r16
    16f4:	11 1f       	adc	r17, r17
    16f6:	e8 0e       	add	r14, r24
    16f8:	f9 1e       	adc	r15, r25
    16fa:	0a 1f       	adc	r16, r26
    16fc:	1b 1f       	adc	r17, r27
    16fe:	08 94       	sec
    1700:	e1 1c       	adc	r14, r1
    1702:	f1 1c       	adc	r15, r1
    1704:	01 1d       	adc	r16, r1
    1706:	11 1d       	adc	r17, r1
    1708:	16 95       	lsr	r17
    170a:	07 95       	ror	r16
    170c:	f7 94       	ror	r15
    170e:	e7 94       	ror	r14
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	92 e0       	ldi	r25, 0x02	; 2
    1714:	a0 e0       	ldi	r26, 0x00	; 0
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e8 0e       	add	r14, r24
    171a:	f9 1e       	adc	r15, r25
    171c:	0a 1f       	adc	r16, r26
    171e:	1b 1f       	adc	r17, r27
    1720:	89 e0       	ldi	r24, 0x09	; 9
    1722:	16 95       	lsr	r17
    1724:	07 95       	ror	r16
    1726:	f7 94       	ror	r15
    1728:	e7 94       	ror	r14
    172a:	8a 95       	dec	r24
    172c:	d1 f7       	brne	.-12     	; 0x1722 <f_mkfs+0x876>
		n_rsv = 1 + partition;
    172e:	ab a1       	ldd	r26, Y+35	; 0x23
    1730:	8a 2f       	mov	r24, r26
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	9c 01       	movw	r18, r24
    1738:	44 27       	eor	r20, r20
    173a:	37 fd       	sbrc	r19, 7
    173c:	40 95       	com	r20
    173e:	54 2f       	mov	r21, r20
    1740:	29 8f       	std	Y+25, r18	; 0x19
    1742:	3a 8f       	std	Y+26, r19	; 0x1a
    1744:	4b 8f       	std	Y+27, r20	; 0x1b
    1746:	5c 8f       	std	Y+28, r21	; 0x1c
    1748:	80 e2       	ldi	r24, 0x20	; 32
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	a0 e0       	ldi	r26, 0x00	; 0
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	8d 8b       	std	Y+21, r24	; 0x15
    1752:	9e 8b       	std	Y+22, r25	; 0x16
    1754:	af 8b       	std	Y+23, r26	; 0x17
    1756:	b8 8f       	std	Y+24, r27	; 0x18
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	99 a3       	std	Y+33, r25	; 0x21
    175c:	ab cc       	rjmp	.-1706   	; 0x10b4 <f_mkfs+0x208>

0000175e <validate>:
static
FRESULT validate (		/* FR_OK(0): The object is valid, !=0: Invalid */
	const FATFS *fs,	/* Pointer to the file system object */
	WORD id				/* Member id of the target object to be checked */
)
{
    175e:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	81 f0       	breq	.+32     	; 0x1784 <validate+0x26>
    1764:	84 8d       	ldd	r24, Z+28	; 0x1c
    1766:	88 23       	and	r24, r24
    1768:	69 f0       	breq	.+26     	; 0x1784 <validate+0x26>
    176a:	80 81       	ld	r24, Z
    176c:	91 81       	ldd	r25, Z+1	; 0x01
    176e:	86 17       	cp	r24, r22
    1770:	97 07       	cpc	r25, r23
    1772:	41 f4       	brne	.+16     	; 0x1784 <validate+0x26>
		return FR_INVALID_OBJECT;
	if (disk_status(0) & STA_NOINIT)
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	0e 94 30 1b 	call	0x3660	; 0x3660 <disk_status>
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	21 70       	andi	r18, 0x01	; 1
    1780:	30 70       	andi	r19, 0x00	; 0
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <validate+0x2a>
    1784:	2c e0       	ldi	r18, 0x0C	; 12
    1786:	30 e0       	ldi	r19, 0x00	; 0
		return FR_NOT_READY;

	return FR_OK;
}
    1788:	c9 01       	movw	r24, r18
    178a:	08 95       	ret

0000178c <move_window>:

static
BOOL move_window (	/* TRUE: successful, FALSE: failed */
	DWORD sector	/* Sector number to make apperance in the FatFs->win */
)					/* Move to zero only writes back dirty window */
{
    178c:	a0 e0       	ldi	r26, 0x00	; 0
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ec ec       	ldi	r30, 0xCC	; 204
    1792:	fb e0       	ldi	r31, 0x0B	; 11
    1794:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__prologue_saves__+0x8>
    1798:	4b 01       	movw	r8, r22
    179a:	5c 01       	movw	r10, r24
	DWORD wsect;
	FATFS *fs = FatFs;
    179c:	c0 91 1a 01 	lds	r28, 0x011A
    17a0:	d0 91 1b 01 	lds	r29, 0x011B


	wsect = fs->winsect;
    17a4:	cc 80       	ldd	r12, Y+4	; 0x04
    17a6:	dd 80       	ldd	r13, Y+5	; 0x05
    17a8:	ee 80       	ldd	r14, Y+6	; 0x06
    17aa:	ff 80       	ldd	r15, Y+7	; 0x07
	if (wsect != sector) {	/* Changed current window */
    17ac:	c6 16       	cp	r12, r22
    17ae:	d7 06       	cpc	r13, r23
    17b0:	e8 06       	cpc	r14, r24
    17b2:	f9 06       	cpc	r15, r25
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <move_window+0x2c>
    17b6:	4f c0       	rjmp	.+158    	; 0x1856 <move_window+0xca>
#if !_FS_READONLY
		BYTE n;
		if (fs->winflag) {	/* Write back dirty window if needed */
    17b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17ba:	88 23       	and	r24, r24
    17bc:	a1 f1       	breq	.+104    	; 0x1826 <move_window+0x9a>
			if (disk_write(0, fs->win, wsect, 1) != RES_OK)
    17be:	70 e2       	ldi	r23, 0x20	; 32
    17c0:	67 2e       	mov	r6, r23
    17c2:	71 2c       	mov	r7, r1
    17c4:	6c 0e       	add	r6, r28
    17c6:	7d 1e       	adc	r7, r29
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	b3 01       	movw	r22, r6
    17cc:	a7 01       	movw	r20, r14
    17ce:	96 01       	movw	r18, r12
    17d0:	01 e0       	ldi	r16, 0x01	; 1
    17d2:	0e 94 94 1b 	call	0x3728	; 0x3728 <disk_write>
    17d6:	89 2b       	or	r24, r25
    17d8:	d9 f5       	brne	.+118    	; 0x1850 <move_window+0xc4>
				return FALSE;
			fs->winflag = 0;
    17da:	1f 8e       	std	Y+31, r1	; 0x1f
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    17dc:	8c 89       	ldd	r24, Y+20	; 0x14
    17de:	9d 89       	ldd	r25, Y+21	; 0x15
    17e0:	a0 e0       	ldi	r26, 0x00	; 0
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	28 85       	ldd	r18, Y+8	; 0x08
    17e6:	39 85       	ldd	r19, Y+9	; 0x09
    17e8:	4a 85       	ldd	r20, Y+10	; 0x0a
    17ea:	5b 85       	ldd	r21, Y+11	; 0x0b
    17ec:	82 0f       	add	r24, r18
    17ee:	93 1f       	adc	r25, r19
    17f0:	a4 1f       	adc	r26, r20
    17f2:	b5 1f       	adc	r27, r21
    17f4:	c8 16       	cp	r12, r24
    17f6:	d9 06       	cpc	r13, r25
    17f8:	ea 06       	cpc	r14, r26
    17fa:	fb 06       	cpc	r15, r27
    17fc:	a0 f4       	brcc	.+40     	; 0x1826 <move_window+0x9a>
				for (n = fs->n_fats; n >= 2; n--) {	/* Refrect the change to all FAT copies */
    17fe:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1800:	10 c0       	rjmp	.+32     	; 0x1822 <move_window+0x96>
					wsect += fs->sects_fat;
    1802:	8c 89       	ldd	r24, Y+20	; 0x14
    1804:	9d 89       	ldd	r25, Y+21	; 0x15
    1806:	a0 e0       	ldi	r26, 0x00	; 0
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	c8 0e       	add	r12, r24
    180c:	d9 1e       	adc	r13, r25
    180e:	ea 1e       	adc	r14, r26
    1810:	fb 1e       	adc	r15, r27
					disk_write(0, fs->win, wsect, 1);
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	b3 01       	movw	r22, r6
    1816:	a7 01       	movw	r20, r14
    1818:	96 01       	movw	r18, r12
    181a:	01 e0       	ldi	r16, 0x01	; 1
    181c:	0e 94 94 1b 	call	0x3728	; 0x3728 <disk_write>
		if (fs->winflag) {	/* Write back dirty window if needed */
			if (disk_write(0, fs->win, wsect, 1) != RES_OK)
				return FALSE;
			fs->winflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				for (n = fs->n_fats; n >= 2; n--) {	/* Refrect the change to all FAT copies */
    1820:	11 50       	subi	r17, 0x01	; 1
    1822:	12 30       	cpi	r17, 0x02	; 2
    1824:	70 f7       	brcc	.-36     	; 0x1802 <move_window+0x76>
					disk_write(0, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1826:	81 14       	cp	r8, r1
    1828:	91 04       	cpc	r9, r1
    182a:	a1 04       	cpc	r10, r1
    182c:	b1 04       	cpc	r11, r1
    182e:	99 f0       	breq	.+38     	; 0x1856 <move_window+0xca>
			if (disk_read(0, fs->win, sector, 1) != RES_OK)
    1830:	be 01       	movw	r22, r28
    1832:	60 5e       	subi	r22, 0xE0	; 224
    1834:	7f 4f       	sbci	r23, 0xFF	; 255
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	a5 01       	movw	r20, r10
    183a:	94 01       	movw	r18, r8
    183c:	01 e0       	ldi	r16, 0x01	; 1
    183e:	0e 94 37 1b 	call	0x366e	; 0x366e <disk_read>
    1842:	89 2b       	or	r24, r25
    1844:	29 f4       	brne	.+10     	; 0x1850 <move_window+0xc4>
				return FALSE;
			fs->winsect = sector;
    1846:	8c 82       	std	Y+4, r8	; 0x04
    1848:	9d 82       	std	Y+5, r9	; 0x05
    184a:	ae 82       	std	Y+6, r10	; 0x06
    184c:	bf 82       	std	Y+7, r11	; 0x07
    184e:	03 c0       	rjmp	.+6      	; 0x1856 <move_window+0xca>
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	02 c0       	rjmp	.+4      	; 0x185a <move_window+0xce>
    1856:	21 e0       	ldi	r18, 0x01	; 1
    1858:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	return TRUE;
}
    185a:	c9 01       	movw	r24, r18
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	ee e0       	ldi	r30, 0x0E	; 14
    1862:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <__epilogue_restores__+0x8>

00001866 <get_cluster>:

static
CLUST get_cluster (	/* 0,>=2: successful, 1: failed */
	CLUST clust		/* Cluster# to get the link information */
)
{
    1866:	a0 e0       	ldi	r26, 0x00	; 0
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e9 e3       	ldi	r30, 0x39	; 57
    186c:	fc e0       	ldi	r31, 0x0C	; 12
    186e:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__prologue_saves__+0xe>
    1872:	8c 01       	movw	r16, r24
	WORD wc, bc;
	DWORD fatsect;
	FATFS *fs = FatFs;
    1874:	e0 90 1a 01 	lds	r14, 0x011A
    1878:	f0 90 1b 01 	lds	r15, 0x011B


	if (clust >= 2 && clust < fs->max_clust) {		/* Valid cluster# */
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	91 05       	cpc	r25, r1
    1880:	08 f4       	brcc	.+2      	; 0x1884 <get_cluster+0x1e>
    1882:	6e c0       	rjmp	.+220    	; 0x1960 <get_cluster+0xfa>
    1884:	d7 01       	movw	r26, r14
    1886:	56 96       	adiw	r26, 0x16	; 22
    1888:	8d 91       	ld	r24, X+
    188a:	9c 91       	ld	r25, X
    188c:	57 97       	sbiw	r26, 0x17	; 23
    188e:	08 17       	cp	r16, r24
    1890:	19 07       	cpc	r17, r25
    1892:	08 f0       	brcs	.+2      	; 0x1896 <get_cluster+0x30>
    1894:	65 c0       	rjmp	.+202    	; 0x1960 <get_cluster+0xfa>
		fatsect = fs->fatbase;
    1896:	18 96       	adiw	r26, 0x08	; 8
    1898:	ad 90       	ld	r10, X+
    189a:	bd 90       	ld	r11, X+
    189c:	cd 90       	ld	r12, X+
    189e:	dc 90       	ld	r13, X
    18a0:	1b 97       	sbiw	r26, 0x0b	; 11
		switch (fs->fs_type) {
    18a2:	5c 96       	adiw	r26, 0x1c	; 28
    18a4:	8c 91       	ld	r24, X
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	21 f0       	breq	.+8      	; 0x18b2 <get_cluster+0x4c>
    18aa:	82 30       	cpi	r24, 0x02	; 2
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <get_cluster+0x4a>
    18ae:	58 c0       	rjmp	.+176    	; 0x1960 <get_cluster+0xfa>
    18b0:	40 c0       	rjmp	.+128    	; 0x1932 <get_cluster+0xcc>
		case FS_FAT12 :
			bc = (WORD)clust * 3 / 2;
    18b2:	e8 01       	movw	r28, r16
    18b4:	cc 0f       	add	r28, r28
    18b6:	dd 1f       	adc	r29, r29
    18b8:	c0 0f       	add	r28, r16
    18ba:	d1 1f       	adc	r29, r17
    18bc:	d6 95       	lsr	r29
    18be:	c7 95       	ror	r28
			if (!move_window(fatsect + bc / 512U)) break;
    18c0:	be 01       	movw	r22, r28
    18c2:	67 2f       	mov	r22, r23
    18c4:	77 27       	eor	r23, r23
    18c6:	66 95       	lsr	r22
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	6a 0d       	add	r22, r10
    18ce:	7b 1d       	adc	r23, r11
    18d0:	8c 1d       	adc	r24, r12
    18d2:	9d 1d       	adc	r25, r13
    18d4:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    18d8:	89 2b       	or	r24, r25
    18da:	09 f4       	brne	.+2      	; 0x18de <get_cluster+0x78>
    18dc:	41 c0       	rjmp	.+130    	; 0x1960 <get_cluster+0xfa>
			wc = fs->win[bc % 512U]; bc++;
    18de:	fe 01       	movw	r30, r28
    18e0:	f1 70       	andi	r31, 0x01	; 1
    18e2:	ee 0d       	add	r30, r14
    18e4:	ff 1d       	adc	r31, r15
    18e6:	90 a0       	ldd	r9, Z+32	; 0x20
    18e8:	21 96       	adiw	r28, 0x01	; 1
			if (!move_window(fatsect + bc / 512U)) break;
    18ea:	be 01       	movw	r22, r28
    18ec:	67 2f       	mov	r22, r23
    18ee:	77 27       	eor	r23, r23
    18f0:	66 95       	lsr	r22
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	6a 0d       	add	r22, r10
    18f8:	7b 1d       	adc	r23, r11
    18fa:	8c 1d       	adc	r24, r12
    18fc:	9d 1d       	adc	r25, r13
    18fe:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    1902:	89 2b       	or	r24, r25
    1904:	69 f1       	breq	.+90     	; 0x1960 <get_cluster+0xfa>
		fatsect = fs->fatbase;
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (WORD)clust * 3 / 2;
			if (!move_window(fatsect + bc / 512U)) break;
			wc = fs->win[bc % 512U]; bc++;
    1906:	29 2d       	mov	r18, r9
    1908:	30 e0       	ldi	r19, 0x00	; 0
			if (!move_window(fatsect + bc / 512U)) break;
			wc |= (WORD)fs->win[bc % 512U] << 8;
    190a:	d1 70       	andi	r29, 0x01	; 1
    190c:	ec 0e       	add	r14, r28
    190e:	fd 1e       	adc	r15, r29
    1910:	f7 01       	movw	r30, r14
    1912:	90 a1       	ldd	r25, Z+32	; 0x20
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	28 2b       	or	r18, r24
    1918:	39 2b       	or	r19, r25
			return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
    191a:	00 ff       	sbrs	r16, 0
    191c:	07 c0       	rjmp	.+14     	; 0x192c <get_cluster+0xc6>
    191e:	f9 01       	movw	r30, r18
    1920:	a4 e0       	ldi	r26, 0x04	; 4
    1922:	f6 95       	lsr	r31
    1924:	e7 95       	ror	r30
    1926:	aa 95       	dec	r26
    1928:	e1 f7       	brne	.-8      	; 0x1922 <get_cluster+0xbc>
    192a:	1c c0       	rjmp	.+56     	; 0x1964 <get_cluster+0xfe>
    192c:	f9 01       	movw	r30, r18
    192e:	ff 70       	andi	r31, 0x0F	; 15
    1930:	19 c0       	rjmp	.+50     	; 0x1964 <get_cluster+0xfe>

		case FS_FAT16 :
			if (!move_window(fatsect + clust / 256)) break;
    1932:	61 2f       	mov	r22, r17
    1934:	77 27       	eor	r23, r23
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	6a 0d       	add	r22, r10
    193c:	7b 1d       	adc	r23, r11
    193e:	8c 1d       	adc	r24, r12
    1940:	9d 1d       	adc	r25, r13
    1942:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    1946:	89 2b       	or	r24, r25
    1948:	59 f0       	breq	.+22     	; 0x1960 <get_cluster+0xfa>
			return LD_WORD(&fs->win[((WORD)clust * 2) % 512U]);
    194a:	00 0f       	add	r16, r16
    194c:	11 1f       	adc	r17, r17
    194e:	11 70       	andi	r17, 0x01	; 1
    1950:	e0 0e       	add	r14, r16
    1952:	f1 1e       	adc	r15, r17
    1954:	d7 01       	movw	r26, r14
    1956:	90 96       	adiw	r26, 0x20	; 32
    1958:	ed 91       	ld	r30, X+
    195a:	fc 91       	ld	r31, X
    195c:	91 97       	sbiw	r26, 0x21	; 33
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <get_cluster+0xfe>
    1960:	e1 e0       	ldi	r30, 0x01	; 1
    1962:	f0 e0       	ldi	r31, 0x00	; 0
#endif
		}
	}

	return 1;	/* Out of cluster range, or an error occured */
}
    1964:	cf 01       	movw	r24, r30
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	eb e0       	ldi	r30, 0x0B	; 11
    196c:	0c 94 0c 1f 	jmp	0x3e18	; 0x3e18 <__epilogue_restores__+0xe>

00001970 <next_dir_entry>:

static
BOOL next_dir_entry (	/* TRUE: successful, FALSE: could not move next */
	DIR *dj				/* Pointer to directory object */
)
{
    1970:	ef 92       	push	r14
    1972:	ff 92       	push	r15
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	ec 01       	movw	r28, r24
	CLUST clust;
	WORD idx;


	idx = dj->index + 1;
    197e:	ea 80       	ldd	r14, Y+2	; 0x02
    1980:	fb 80       	ldd	r15, Y+3	; 0x03
    1982:	08 94       	sec
    1984:	e1 1c       	adc	r14, r1
    1986:	f1 1c       	adc	r15, r1
	if ((idx & 15) == 0) {		/* Table sector changed? */
    1988:	c7 01       	movw	r24, r14
    198a:	8f 70       	andi	r24, 0x0F	; 15
    198c:	90 70       	andi	r25, 0x00	; 0
    198e:	89 2b       	or	r24, r25
    1990:	09 f0       	breq	.+2      	; 0x1994 <next_dir_entry+0x24>
    1992:	60 c0       	rjmp	.+192    	; 0x1a54 <next_dir_entry+0xe4>
		dj->sect++;				/* Next sector */
    1994:	8a 85       	ldd	r24, Y+10	; 0x0a
    1996:	9b 85       	ldd	r25, Y+11	; 0x0b
    1998:	ac 85       	ldd	r26, Y+12	; 0x0c
    199a:	bd 85       	ldd	r27, Y+13	; 0x0d
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	a1 1d       	adc	r26, r1
    19a0:	b1 1d       	adc	r27, r1
    19a2:	8a 87       	std	Y+10, r24	; 0x0a
    19a4:	9b 87       	std	Y+11, r25	; 0x0b
    19a6:	ac 87       	std	Y+12, r26	; 0x0c
    19a8:	bd 87       	std	Y+13, r27	; 0x0d
		if (dj->clust == 0) {	/* In static table */
    19aa:	48 85       	ldd	r20, Y+8	; 0x08
    19ac:	59 85       	ldd	r21, Y+9	; 0x09
    19ae:	ec 81       	ldd	r30, Y+4	; 0x04
    19b0:	fd 81       	ldd	r31, Y+5	; 0x05
    19b2:	41 15       	cp	r20, r1
    19b4:	51 05       	cpc	r21, r1
    19b6:	39 f4       	brne	.+14     	; 0x19c6 <next_dir_entry+0x56>
			if (idx >= dj->fs->n_rootdir) return FALSE;	/* Reached to end of table */
    19b8:	82 81       	ldd	r24, Z+2	; 0x02
    19ba:	93 81       	ldd	r25, Z+3	; 0x03
    19bc:	e8 16       	cp	r14, r24
    19be:	f9 06       	cpc	r15, r25
    19c0:	08 f4       	brcc	.+2      	; 0x19c4 <next_dir_entry+0x54>
    19c2:	48 c0       	rjmp	.+144    	; 0x1a54 <next_dir_entry+0xe4>
    19c4:	4c c0       	rjmp	.+152    	; 0x1a5e <next_dir_entry+0xee>
		} else {				/* In dynamic table */
			if (((idx / 16) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    19c6:	85 8d       	ldd	r24, Z+29	; 0x1d
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	97 01       	movw	r18, r14
    19ce:	64 e0       	ldi	r22, 0x04	; 4
    19d0:	36 95       	lsr	r19
    19d2:	27 95       	ror	r18
    19d4:	6a 95       	dec	r22
    19d6:	e1 f7       	brne	.-8      	; 0x19d0 <next_dir_entry+0x60>
    19d8:	82 23       	and	r24, r18
    19da:	93 23       	and	r25, r19
    19dc:	89 2b       	or	r24, r25
    19de:	d1 f5       	brne	.+116    	; 0x1a54 <next_dir_entry+0xe4>
				clust = get_cluster(dj->clust);		/* Get next cluster */
    19e0:	ca 01       	movw	r24, r20
    19e2:	0e 94 33 0c 	call	0x1866	; 0x1866 <get_cluster>
    19e6:	bc 01       	movw	r22, r24
				if (clust < 2 || clust >= dj->fs->max_clust)	/* Reached to end of table */
    19e8:	82 30       	cpi	r24, 0x02	; 2
    19ea:	91 05       	cpc	r25, r1
    19ec:	c0 f1       	brcs	.+112    	; 0x1a5e <next_dir_entry+0xee>
    19ee:	ec 81       	ldd	r30, Y+4	; 0x04
    19f0:	fd 81       	ldd	r31, Y+5	; 0x05
    19f2:	86 89       	ldd	r24, Z+22	; 0x16
    19f4:	97 89       	ldd	r25, Z+23	; 0x17
    19f6:	68 17       	cp	r22, r24
    19f8:	79 07       	cpc	r23, r25
    19fa:	88 f5       	brcc	.+98     	; 0x1a5e <next_dir_entry+0xee>
					return FALSE;
				dj->clust = clust;				/* Initialize for new cluster */
    19fc:	79 87       	std	Y+9, r23	; 0x09
    19fe:	68 87       	std	Y+8, r22	; 0x08
static
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	CLUST clust		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1a00:	00 91 1a 01 	lds	r16, 0x011A
    1a04:	10 91 1b 01 	lds	r17, 0x011B


	clust -= 2;
    1a08:	62 50       	subi	r22, 0x02	; 2
    1a0a:	70 40       	sbci	r23, 0x00	; 0
	if (clust >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	86 89       	ldd	r24, Z+22	; 0x16
    1a10:	97 89       	ldd	r25, Z+23	; 0x17
    1a12:	02 97       	sbiw	r24, 0x02	; 2
    1a14:	68 17       	cp	r22, r24
    1a16:	79 07       	cpc	r23, r25
    1a18:	28 f0       	brcs	.+10     	; 0x1a24 <next_dir_entry+0xb4>
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	14 c0       	rjmp	.+40     	; 0x1a4c <next_dir_entry+0xdc>
	return (DWORD)clust * fs->csize + fs->database;
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	f8 01       	movw	r30, r16
    1a2a:	25 8d       	ldd	r18, Z+29	; 0x1d
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__mulsi3>
    1a36:	9b 01       	movw	r18, r22
    1a38:	ac 01       	movw	r20, r24
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	80 89       	ldd	r24, Z+16	; 0x10
    1a3e:	91 89       	ldd	r25, Z+17	; 0x11
    1a40:	a2 89       	ldd	r26, Z+18	; 0x12
    1a42:	b3 89       	ldd	r27, Z+19	; 0x13
    1a44:	28 0f       	add	r18, r24
    1a46:	39 1f       	adc	r19, r25
    1a48:	4a 1f       	adc	r20, r26
    1a4a:	5b 1f       	adc	r21, r27
			if (((idx / 16) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clust = get_cluster(dj->clust);		/* Get next cluster */
				if (clust < 2 || clust >= dj->fs->max_clust)	/* Reached to end of table */
					return FALSE;
				dj->clust = clust;				/* Initialize for new cluster */
				dj->sect = clust2sect(clust);
    1a4c:	2a 87       	std	Y+10, r18	; 0x0a
    1a4e:	3b 87       	std	Y+11, r19	; 0x0b
    1a50:	4c 87       	std	Y+12, r20	; 0x0c
    1a52:	5d 87       	std	Y+13, r21	; 0x0d
			}
		}
	}
	dj->index = idx;	/* Lower 4 bit of dj->index indicates offset in dj->sect */
    1a54:	fb 82       	std	Y+3, r15	; 0x03
    1a56:	ea 82       	std	Y+2, r14	; 0x02
    1a58:	21 e0       	ldi	r18, 0x01	; 1
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <next_dir_entry+0xf2>
	return TRUE;
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
}
    1a62:	c9 01       	movw	r24, r18
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	e6 e0       	ldi	r30, 0x06	; 6
    1a6a:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__epilogue_restores__+0x18>

00001a6e <put_cluster>:
static
BOOL put_cluster (	/* TRUE: successful, FALSE: failed */
	CLUST clust,	/* Cluster# to change (must be 2 to fs->max_clust-1) */
	CLUST val		/* New value to mark the cluster */
)
{
    1a6e:	a0 e0       	ldi	r26, 0x00	; 0
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	ed e3       	ldi	r30, 0x3D	; 61
    1a74:	fd e0       	ldi	r31, 0x0D	; 13
    1a76:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__prologue_saves__+0x8>
    1a7a:	ec 01       	movw	r28, r24
    1a7c:	4b 01       	movw	r8, r22
	WORD bc;
	BYTE *p;
	DWORD fatsect;
	FATFS *fs = FatFs;
    1a7e:	e0 90 1a 01 	lds	r14, 0x011A
    1a82:	f0 90 1b 01 	lds	r15, 0x011B


	fatsect = fs->fatbase;
    1a86:	f7 01       	movw	r30, r14
    1a88:	a0 84       	ldd	r10, Z+8	; 0x08
    1a8a:	b1 84       	ldd	r11, Z+9	; 0x09
    1a8c:	c2 84       	ldd	r12, Z+10	; 0x0a
    1a8e:	d3 84       	ldd	r13, Z+11	; 0x0b
	switch (fs->fs_type) {
    1a90:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	21 f0       	breq	.+8      	; 0x1a9e <put_cluster+0x30>
    1a96:	82 30       	cpi	r24, 0x02	; 2
    1a98:	09 f0       	breq	.+2      	; 0x1a9c <put_cluster+0x2e>
    1a9a:	74 c0       	rjmp	.+232    	; 0x1b84 <put_cluster+0x116>
    1a9c:	5a c0       	rjmp	.+180    	; 0x1b52 <put_cluster+0xe4>
	case FS_FAT12 :
		bc = (WORD)clust * 3 / 2;
    1a9e:	8e 01       	movw	r16, r28
    1aa0:	00 0f       	add	r16, r16
    1aa2:	11 1f       	adc	r17, r17
    1aa4:	0c 0f       	add	r16, r28
    1aa6:	1d 1f       	adc	r17, r29
    1aa8:	16 95       	lsr	r17
    1aaa:	07 95       	ror	r16
		if (!move_window(fatsect + bc / 512U)) return FALSE;
    1aac:	b8 01       	movw	r22, r16
    1aae:	67 2f       	mov	r22, r23
    1ab0:	77 27       	eor	r23, r23
    1ab2:	66 95       	lsr	r22
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	6a 0d       	add	r22, r10
    1aba:	7b 1d       	adc	r23, r11
    1abc:	8c 1d       	adc	r24, r12
    1abe:	9d 1d       	adc	r25, r13
    1ac0:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    1ac4:	89 2b       	or	r24, r25
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <put_cluster+0x5c>
    1ac8:	5d c0       	rjmp	.+186    	; 0x1b84 <put_cluster+0x116>
		p = &fs->win[bc % 512U];
    1aca:	d8 01       	movw	r26, r16
    1acc:	b1 70       	andi	r27, 0x01	; 1
		*p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	68 2e       	mov	r6, r24
    1ad2:	71 2c       	mov	r7, r1
    1ad4:	6c 22       	and	r6, r28
    1ad6:	7d 22       	and	r7, r29
    1ad8:	c0 ff       	sbrs	r28, 0
    1ada:	0a c0       	rjmp	.+20     	; 0x1af0 <put_cluster+0x82>
    1adc:	f7 01       	movw	r30, r14
    1ade:	ea 0f       	add	r30, r26
    1ae0:	fb 1f       	adc	r31, r27
    1ae2:	80 a1       	ldd	r24, Z+32	; 0x20
    1ae4:	8f 70       	andi	r24, 0x0F	; 15
    1ae6:	98 2d       	mov	r25, r8
    1ae8:	92 95       	swap	r25
    1aea:	90 7f       	andi	r25, 0xF0	; 240
    1aec:	98 2b       	or	r25, r24
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <put_cluster+0x84>
    1af0:	98 2d       	mov	r25, r8
    1af2:	ae 0d       	add	r26, r14
    1af4:	bf 1d       	adc	r27, r15
    1af6:	90 96       	adiw	r26, 0x20	; 32
    1af8:	9c 93       	st	X, r25
		bc++;
    1afa:	e8 01       	movw	r28, r16
    1afc:	21 96       	adiw	r28, 0x01	; 1
		fs->winflag = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	f7 01       	movw	r30, r14
    1b02:	87 8f       	std	Z+31, r24	; 0x1f
		if (!move_window(fatsect + bc / 512U)) return FALSE;
    1b04:	be 01       	movw	r22, r28
    1b06:	67 2f       	mov	r22, r23
    1b08:	77 27       	eor	r23, r23
    1b0a:	66 95       	lsr	r22
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	6a 0d       	add	r22, r10
    1b12:	7b 1d       	adc	r23, r11
    1b14:	8c 1d       	adc	r24, r12
    1b16:	9d 1d       	adc	r25, r13
    1b18:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    1b1c:	89 2b       	or	r24, r25
    1b1e:	91 f1       	breq	.+100    	; 0x1b84 <put_cluster+0x116>
		p = &fs->win[bc % 512U];
    1b20:	de 01       	movw	r26, r28
    1b22:	b1 70       	andi	r27, 0x01	; 1
		*p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1b24:	61 14       	cp	r6, r1
    1b26:	71 04       	cpc	r7, r1
    1b28:	39 f0       	breq	.+14     	; 0x1b38 <put_cluster+0xca>
    1b2a:	f4 e0       	ldi	r31, 0x04	; 4
    1b2c:	96 94       	lsr	r9
    1b2e:	87 94       	ror	r8
    1b30:	fa 95       	dec	r31
    1b32:	e1 f7       	brne	.-8      	; 0x1b2c <put_cluster+0xbe>
    1b34:	98 2d       	mov	r25, r8
    1b36:	08 c0       	rjmp	.+16     	; 0x1b48 <put_cluster+0xda>
    1b38:	f7 01       	movw	r30, r14
    1b3a:	ea 0f       	add	r30, r26
    1b3c:	fb 1f       	adc	r31, r27
    1b3e:	90 a1       	ldd	r25, Z+32	; 0x20
    1b40:	90 7f       	andi	r25, 0xF0	; 240
    1b42:	89 2d       	mov	r24, r9
    1b44:	8f 70       	andi	r24, 0x0F	; 15
    1b46:	98 2b       	or	r25, r24
    1b48:	ae 0d       	add	r26, r14
    1b4a:	bf 1d       	adc	r27, r15
    1b4c:	90 96       	adiw	r26, 0x20	; 32
    1b4e:	9c 93       	st	X, r25
    1b50:	13 c0       	rjmp	.+38     	; 0x1b78 <put_cluster+0x10a>
		break;

	case FS_FAT16 :
		if (!move_window(fatsect + clust / 256)) return FALSE;
    1b52:	6d 2f       	mov	r22, r29
    1b54:	77 27       	eor	r23, r23
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	6a 0d       	add	r22, r10
    1b5c:	7b 1d       	adc	r23, r11
    1b5e:	8c 1d       	adc	r24, r12
    1b60:	9d 1d       	adc	r25, r13
    1b62:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    1b66:	89 2b       	or	r24, r25
    1b68:	69 f0       	breq	.+26     	; 0x1b84 <put_cluster+0x116>
		ST_WORD(&fs->win[((WORD)clust * 2) % 512U], (WORD)val);
    1b6a:	cc 0f       	add	r28, r28
    1b6c:	dd 1f       	adc	r29, r29
    1b6e:	d1 70       	andi	r29, 0x01	; 1
    1b70:	ce 0d       	add	r28, r14
    1b72:	df 1d       	adc	r29, r15
    1b74:	99 a2       	std	Y+33, r9	; 0x21
    1b76:	88 a2       	std	Y+32, r8	; 0x20
		break;
#endif
	default :
		return FALSE;
	}
	fs->winflag = 1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	f7 01       	movw	r30, r14
    1b7c:	87 8f       	std	Z+31, r24	; 0x1f
    1b7e:	21 e0       	ldi	r18, 0x01	; 1
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <put_cluster+0x11a>
	return TRUE;
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
}
    1b88:	c9 01       	movw	r24, r18
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	ee e0       	ldi	r30, 0x0E	; 14
    1b90:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <__epilogue_restores__+0x8>

00001b94 <remove_chain>:
#if !_FS_READONLY
static
BOOL remove_chain (	/* TRUE: successful, FALSE: failed */
	CLUST clust		/* Cluster# to remove chain from */
)
{
    1b94:	ef 92       	push	r14
    1b96:	ff 92       	push	r15
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	ec 01       	movw	r28, r24
	CLUST nxt;
	FATFS *fs = FatFs;
    1ba2:	00 91 1a 01 	lds	r16, 0x011A
    1ba6:	10 91 1b 01 	lds	r17, 0x011B
    1baa:	1a c0       	rjmp	.+52     	; 0x1be0 <remove_chain+0x4c>


	while (clust >= 2 && clust < fs->max_clust) {
		nxt = get_cluster(clust);
    1bac:	ce 01       	movw	r24, r28
    1bae:	0e 94 33 0c 	call	0x1866	; 0x1866 <get_cluster>
    1bb2:	7c 01       	movw	r14, r24
		if (nxt == 1) return FALSE;
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	e9 f0       	breq	.+58     	; 0x1bf4 <remove_chain+0x60>
		if (!put_cluster(clust, 0)) return FALSE;
    1bba:	ce 01       	movw	r24, r28
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	70 e0       	ldi	r23, 0x00	; 0
    1bc0:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <put_cluster>
    1bc4:	89 2b       	or	r24, r25
    1bc6:	b1 f0       	breq	.+44     	; 0x1bf4 <remove_chain+0x60>
		if (fs->free_clust != (CLUST)0xFFFFFFFF) {
    1bc8:	f8 01       	movw	r30, r16
    1bca:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bcc:	93 8d       	ldd	r25, Z+27	; 0x1b
    1bce:	ff ef       	ldi	r31, 0xFF	; 255
    1bd0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bd2:	9f 07       	cpc	r25, r31
    1bd4:	21 f0       	breq	.+8      	; 0x1bde <remove_chain+0x4a>
			fs->free_clust++;
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	f8 01       	movw	r30, r16
    1bda:	93 8f       	std	Z+27, r25	; 0x1b
    1bdc:	82 8f       	std	Z+26, r24	; 0x1a
    1bde:	e7 01       	movw	r28, r14
{
	CLUST nxt;
	FATFS *fs = FatFs;


	while (clust >= 2 && clust < fs->max_clust) {
    1be0:	c2 30       	cpi	r28, 0x02	; 2
    1be2:	d1 05       	cpc	r29, r1
    1be4:	50 f0       	brcs	.+20     	; 0x1bfa <remove_chain+0x66>
    1be6:	f8 01       	movw	r30, r16
    1be8:	86 89       	ldd	r24, Z+22	; 0x16
    1bea:	97 89       	ldd	r25, Z+23	; 0x17
    1bec:	c8 17       	cp	r28, r24
    1bee:	d9 07       	cpc	r29, r25
    1bf0:	e8 f2       	brcs	.-70     	; 0x1bac <remove_chain+0x18>
    1bf2:	03 c0       	rjmp	.+6      	; 0x1bfa <remove_chain+0x66>
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <remove_chain+0x6a>
    1bfa:	21 e0       	ldi	r18, 0x01	; 1
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
#endif
		}
		clust = nxt;
	}
	return TRUE;
}
    1bfe:	c9 01       	movw	r24, r18
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	e6 e0       	ldi	r30, 0x06	; 6
    1c06:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__epilogue_restores__+0x18>

00001c0a <create_chain>:
#if !_FS_READONLY
static
CLUST create_chain (	/* 0: No free cluster, 1: Error, >=2: New cluster number */
	CLUST clust			/* Cluster# to stretch, 0 means create new */
)
{
    1c0a:	a0 e0       	ldi	r26, 0x00	; 0
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	eb e0       	ldi	r30, 0x0B	; 11
    1c10:	fe e0       	ldi	r31, 0x0E	; 14
    1c12:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__prologue_saves__+0x10>
    1c16:	7c 01       	movw	r14, r24
	CLUST cstat, ncl, scl, mcl;
	FATFS *fs = FatFs;
    1c18:	c0 90 1a 01 	lds	r12, 0x011A
    1c1c:	d0 90 1b 01 	lds	r13, 0x011B


	mcl = fs->max_clust;
    1c20:	f6 01       	movw	r30, r12
    1c22:	a6 88       	ldd	r10, Z+22	; 0x16
    1c24:	b7 88       	ldd	r11, Z+23	; 0x17
	if (clust == 0) {		/* Create new chain */
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	49 f4       	brne	.+18     	; 0x1c3c <create_chain+0x32>
		scl = fs->last_clust;			/* Get last allocated cluster */
    1c2a:	00 8d       	ldd	r16, Z+24	; 0x18
    1c2c:	11 8d       	ldd	r17, Z+25	; 0x19
		if (scl < 2 || scl >= mcl) scl = 1;
    1c2e:	02 30       	cpi	r16, 0x02	; 2
    1c30:	11 05       	cpc	r17, r1
    1c32:	88 f0       	brcs	.+34     	; 0x1c56 <create_chain+0x4c>
    1c34:	0a 15       	cp	r16, r10
    1c36:	1b 05       	cpc	r17, r11
    1c38:	70 f4       	brcc	.+28     	; 0x1c56 <create_chain+0x4c>
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <create_chain+0x50>
	}
	else {					/* Stretch existing chain */
		cstat = get_cluster(clust);		/* Check the cluster status */
    1c3c:	0e 94 33 0c 	call	0x1866	; 0x1866 <get_cluster>
    1c40:	9c 01       	movw	r18, r24
		if (cstat < 2) return 1;		/* It is an invalid cluster */
    1c42:	82 30       	cpi	r24, 0x02	; 2
    1c44:	91 05       	cpc	r25, r1
    1c46:	08 f4       	brcc	.+2      	; 0x1c4a <create_chain+0x40>
    1c48:	40 c0       	rjmp	.+128    	; 0x1cca <create_chain+0xc0>
		if (cstat < mcl) return cstat;	/* It is already followed by next cluster */
    1c4a:	8a 15       	cp	r24, r10
    1c4c:	9b 05       	cpc	r25, r11
    1c4e:	08 f4       	brcc	.+2      	; 0x1c52 <create_chain+0x48>
    1c50:	41 c0       	rjmp	.+130    	; 0x1cd4 <create_chain+0xca>
    1c52:	87 01       	movw	r16, r14
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <create_chain+0x50>
    1c56:	01 e0       	ldi	r16, 0x01	; 1
    1c58:	10 e0       	ldi	r17, 0x00	; 0
    1c5a:	e8 01       	movw	r28, r16
		scl = clust;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1c5c:	21 96       	adiw	r28, 0x01	; 1
		if (ncl >= mcl) {				/* Wrap around */
    1c5e:	ca 15       	cp	r28, r10
    1c60:	db 05       	cpc	r29, r11
    1c62:	28 f0       	brcs	.+10     	; 0x1c6e <create_chain+0x64>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    1c64:	02 30       	cpi	r16, 0x02	; 2
    1c66:	11 05       	cpc	r17, r1
    1c68:	98 f1       	brcs	.+102    	; 0x1cd0 <create_chain+0xc6>
    1c6a:	c2 e0       	ldi	r28, 0x02	; 2
    1c6c:	d0 e0       	ldi	r29, 0x00	; 0
		}
		cstat = get_cluster(ncl);		/* Get the cluster status */
    1c6e:	ce 01       	movw	r24, r28
    1c70:	0e 94 33 0c 	call	0x1866	; 0x1866 <get_cluster>
    1c74:	9c 01       	movw	r18, r24
		if (cstat == 0) break;			/* Found a free cluster */
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	39 f0       	breq	.+14     	; 0x1c88 <create_chain+0x7e>
		if (cstat == 1) return 1;		/* Any error occured */
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	51 f1       	breq	.+84     	; 0x1cd4 <create_chain+0xca>
		if (ncl == scl) return 0;		/* No free custer */
    1c80:	c0 17       	cp	r28, r16
    1c82:	d1 07       	cpc	r29, r17
    1c84:	59 f7       	brne	.-42     	; 0x1c5c <create_chain+0x52>
    1c86:	24 c0       	rjmp	.+72     	; 0x1cd0 <create_chain+0xc6>
    1c88:	1c 2f       	mov	r17, r28
    1c8a:	0d 2f       	mov	r16, r29
	}

	if (!put_cluster(ncl, (CLUST)0x0FFFFFFF)) return 1;		/* Mark the new cluster "in use" */
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	6f ef       	ldi	r22, 0xFF	; 255
    1c90:	7f ef       	ldi	r23, 0xFF	; 255
    1c92:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <put_cluster>
    1c96:	89 2b       	or	r24, r25
    1c98:	c1 f0       	breq	.+48     	; 0x1cca <create_chain+0xc0>
	if (clust != 0 && !put_cluster(clust, ncl)) return 1;	/* Link it to previous one if needed */
    1c9a:	e1 14       	cp	r14, r1
    1c9c:	f1 04       	cpc	r15, r1
    1c9e:	31 f0       	breq	.+12     	; 0x1cac <create_chain+0xa2>
    1ca0:	c7 01       	movw	r24, r14
    1ca2:	be 01       	movw	r22, r28
    1ca4:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <put_cluster>
    1ca8:	89 2b       	or	r24, r25
    1caa:	79 f0       	breq	.+30     	; 0x1cca <create_chain+0xc0>

	fs->last_clust = ncl;				/* Update fsinfo */
    1cac:	f6 01       	movw	r30, r12
    1cae:	10 8f       	std	Z+24, r17	; 0x18
    1cb0:	01 8f       	std	Z+25, r16	; 0x19
	if (fs->free_clust != (CLUST)0xFFFFFFFF) {
    1cb2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cb4:	93 8d       	ldd	r25, Z+27	; 0x1b
    1cb6:	ff ef       	ldi	r31, 0xFF	; 255
    1cb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1cba:	9f 07       	cpc	r25, r31
    1cbc:	21 f0       	breq	.+8      	; 0x1cc6 <create_chain+0xbc>
		fs->free_clust--;
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f6 01       	movw	r30, r12
    1cc2:	93 8f       	std	Z+27, r25	; 0x1b
    1cc4:	82 8f       	std	Z+26, r24	; 0x1a
    1cc6:	9e 01       	movw	r18, r28
    1cc8:	05 c0       	rjmp	.+10     	; 0x1cd4 <create_chain+0xca>
    1cca:	21 e0       	ldi	r18, 0x01	; 1
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <create_chain+0xca>
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
		fs->fsi_flag = 1;
#endif
	}

	return ncl;		/* Return new cluster number */
}
    1cd4:	c9 01       	movw	r24, r18
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	ea e0       	ldi	r30, 0x0A	; 10
    1cdc:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__epilogue_restores__+0x10>

00001ce0 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    1ce0:	a4 e0       	ldi	r26, 0x04	; 4
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e6 e7       	ldi	r30, 0x76	; 118
    1ce6:	fe e0       	ldi	r31, 0x0E	; 14
    1ce8:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__prologue_saves__>
    1cec:	9c 83       	std	Y+4, r25	; 0x04
    1cee:	8b 83       	std	Y+3, r24	; 0x03
    1cf0:	3a 01       	movw	r6, r20
    1cf2:	4b 01       	movw	r8, r22
	FRESULT res;
	CLUST clust;
	DWORD csize, ifptr;


	res = validate(fp->fs, fp->id);			/* Check validity of the object */
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	6d 91       	ld	r22, X+
    1cf8:	7c 91       	ld	r23, X
    1cfa:	11 97       	sbiw	r26, 0x01	; 1
    1cfc:	14 96       	adiw	r26, 0x04	; 4
    1cfe:	8d 91       	ld	r24, X+
    1d00:	9c 91       	ld	r25, X
    1d02:	15 97       	sbiw	r26, 0x05	; 5
    1d04:	0e 94 af 0b 	call	0x175e	; 0x175e <validate>
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01
	if (res != FR_OK) return res;
    1d0c:	89 2b       	or	r24, r25
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <f_lseek+0x32>
    1d10:	24 c1       	rjmp	.+584    	; 0x1f5a <f_lseek+0x27a>
	if (fp->flag & FA__ERROR) return FR_RW_ERROR;
    1d12:	eb 81       	ldd	r30, Y+3	; 0x03
    1d14:	fc 81       	ldd	r31, Y+4	; 0x04
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	87 ff       	sbrs	r24, 7
    1d1a:	05 c0       	rjmp	.+10     	; 0x1d26 <f_lseek+0x46>
    1d1c:	28 e0       	ldi	r18, 0x08	; 8
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	3a 83       	std	Y+2, r19	; 0x02
    1d22:	29 83       	std	Y+1, r18	; 0x01
    1d24:	1a c1       	rjmp	.+564    	; 0x1f5a <f_lseek+0x27a>
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    1d26:	ab 81       	ldd	r26, Y+3	; 0x03
    1d28:	bc 81       	ldd	r27, Y+4	; 0x04
    1d2a:	1a 96       	adiw	r26, 0x0a	; 10
    1d2c:	ad 90       	ld	r10, X+
    1d2e:	bd 90       	ld	r11, X+
    1d30:	cd 90       	ld	r12, X+
    1d32:	dc 90       	ld	r13, X
    1d34:	1d 97       	sbiw	r26, 0x0d	; 13
    1d36:	a6 14       	cp	r10, r6
    1d38:	b7 04       	cpc	r11, r7
    1d3a:	c8 04       	cpc	r12, r8
    1d3c:	d9 04       	cpc	r13, r9
    1d3e:	10 f4       	brcc	.+4      	; 0x1d44 <f_lseek+0x64>
    1d40:	81 ff       	sbrs	r24, 1
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <f_lseek+0x68>
    1d44:	64 01       	movw	r12, r8
    1d46:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    1d48:	eb 81       	ldd	r30, Y+3	; 0x03
    1d4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d4c:	26 81       	ldd	r18, Z+6	; 0x06
    1d4e:	37 81       	ldd	r19, Z+7	; 0x07
    1d50:	40 85       	ldd	r20, Z+8	; 0x08
    1d52:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = 0; fp->csect = 255;
    1d54:	16 82       	std	Z+6, r1	; 0x06
    1d56:	17 82       	std	Z+7, r1	; 0x07
    1d58:	10 86       	std	Z+8, r1	; 0x08
    1d5a:	11 86       	std	Z+9, r1	; 0x09
    1d5c:	8f ef       	ldi	r24, 0xFF	; 255
    1d5e:	83 83       	std	Z+3, r24	; 0x03
	if (ofs > 0) {
    1d60:	a1 14       	cp	r10, r1
    1d62:	b1 04       	cpc	r11, r1
    1d64:	c1 04       	cpc	r12, r1
    1d66:	d1 04       	cpc	r13, r1
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <f_lseek+0x8c>
    1d6a:	ce c0       	rjmp	.+412    	; 0x1f08 <f_lseek+0x228>
		csize = (DWORD)fp->fs->csize * 512U;		/* Cluster size (byte) */
    1d6c:	04 80       	ldd	r0, Z+4	; 0x04
    1d6e:	f5 81       	ldd	r31, Z+5	; 0x05
    1d70:	e0 2d       	mov	r30, r0
    1d72:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d74:	68 2e       	mov	r6, r24
    1d76:	77 24       	eor	r7, r7
    1d78:	88 24       	eor	r8, r8
    1d7a:	99 24       	eor	r9, r9
    1d7c:	69 e0       	ldi	r22, 0x09	; 9
    1d7e:	66 0c       	add	r6, r6
    1d80:	77 1c       	adc	r7, r7
    1d82:	88 1c       	adc	r8, r8
    1d84:	99 1c       	adc	r9, r9
    1d86:	6a 95       	dec	r22
    1d88:	d1 f7       	brne	.-12     	; 0x1d7e <f_lseek+0x9e>
		if (ifptr > 0 &&
    1d8a:	21 15       	cp	r18, r1
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	41 05       	cpc	r20, r1
    1d90:	51 05       	cpc	r21, r1
    1d92:	b1 f1       	breq	.+108    	; 0x1e00 <f_lseek+0x120>
    1d94:	19 01       	movw	r2, r18
    1d96:	2a 01       	movw	r4, r20
    1d98:	08 94       	sec
    1d9a:	21 08       	sbc	r2, r1
    1d9c:	31 08       	sbc	r3, r1
    1d9e:	41 08       	sbc	r4, r1
    1da0:	51 08       	sbc	r5, r1
    1da2:	c6 01       	movw	r24, r12
    1da4:	b5 01       	movw	r22, r10
    1da6:	61 50       	subi	r22, 0x01	; 1
    1da8:	70 40       	sbci	r23, 0x00	; 0
    1daa:	80 40       	sbci	r24, 0x00	; 0
    1dac:	90 40       	sbci	r25, 0x00	; 0
    1dae:	a4 01       	movw	r20, r8
    1db0:	93 01       	movw	r18, r6
    1db2:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <__udivmodsi4>
    1db6:	79 01       	movw	r14, r18
    1db8:	8a 01       	movw	r16, r20
    1dba:	c2 01       	movw	r24, r4
    1dbc:	b1 01       	movw	r22, r2
    1dbe:	a4 01       	movw	r20, r8
    1dc0:	93 01       	movw	r18, r6
    1dc2:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <__udivmodsi4>
    1dc6:	e2 16       	cp	r14, r18
    1dc8:	f3 06       	cpc	r15, r19
    1dca:	04 07       	cpc	r16, r20
    1dcc:	15 07       	cpc	r17, r21
    1dce:	c0 f0       	brcs	.+48     	; 0x1e00 <f_lseek+0x120>
			(ofs - 1) / csize >= (ifptr - 1) / csize) {/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(csize - 1);	/* start from the current cluster */
    1dd0:	88 27       	eor	r24, r24
    1dd2:	99 27       	eor	r25, r25
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	86 19       	sub	r24, r6
    1dd8:	97 09       	sbc	r25, r7
    1dda:	a8 09       	sbc	r26, r8
    1ddc:	b9 09       	sbc	r27, r9
    1dde:	82 21       	and	r24, r2
    1de0:	93 21       	and	r25, r3
    1de2:	a4 21       	and	r26, r4
    1de4:	b5 21       	and	r27, r5
    1de6:	eb 81       	ldd	r30, Y+3	; 0x03
    1de8:	fc 81       	ldd	r31, Y+4	; 0x04
    1dea:	86 83       	std	Z+6, r24	; 0x06
    1dec:	97 83       	std	Z+7, r25	; 0x07
    1dee:	a0 87       	std	Z+8, r26	; 0x08
    1df0:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    1df2:	a8 1a       	sub	r10, r24
    1df4:	b9 0a       	sbc	r11, r25
    1df6:	ca 0a       	sbc	r12, r26
    1df8:	db 0a       	sbc	r13, r27
			clust = fp->curr_clust;
    1dfa:	20 89       	ldd	r18, Z+16	; 0x10
    1dfc:	31 89       	ldd	r19, Z+17	; 0x11
    1dfe:	1c c0       	rjmp	.+56     	; 0x1e38 <f_lseek+0x158>
		} else {									/* When seek to back cluster, */
			clust = fp->org_clust;					/* start from the first cluster */
    1e00:	ab 81       	ldd	r26, Y+3	; 0x03
    1e02:	bc 81       	ldd	r27, Y+4	; 0x04
    1e04:	1e 96       	adiw	r26, 0x0e	; 14
    1e06:	2d 91       	ld	r18, X+
    1e08:	3c 91       	ld	r19, X
    1e0a:	1f 97       	sbiw	r26, 0x0f	; 15
#if !_FS_READONLY
			if (clust == 0) {						/* If no cluster chain, create a new chain */
    1e0c:	21 15       	cp	r18, r1
    1e0e:	31 05       	cpc	r19, r1
    1e10:	69 f4       	brne	.+26     	; 0x1e2c <f_lseek+0x14c>
				clust = create_chain(0);
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <create_chain>
    1e1a:	9c 01       	movw	r18, r24
				if (clust == 1) goto fk_error;
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	91 05       	cpc	r25, r1
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <f_lseek+0x144>
    1e22:	8f c0       	rjmp	.+286    	; 0x1f42 <f_lseek+0x262>
				fp->org_clust = clust;
    1e24:	eb 81       	ldd	r30, Y+3	; 0x03
    1e26:	fc 81       	ldd	r31, Y+4	; 0x04
    1e28:	97 87       	std	Z+15, r25	; 0x0f
    1e2a:	86 87       	std	Z+14, r24	; 0x0e
			}
#endif
			fp->curr_clust = clust;
    1e2c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e2e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e30:	51 96       	adiw	r26, 0x11	; 17
    1e32:	3c 93       	st	X, r19
    1e34:	2e 93       	st	-X, r18
    1e36:	50 97       	sbiw	r26, 0x10	; 16
		}
		if (clust != 0) {
    1e38:	21 15       	cp	r18, r1
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	c1 f5       	brne	.+112    	; 0x1eae <f_lseek+0x1ce>
    1e3e:	64 c0       	rjmp	.+200    	; 0x1f08 <f_lseek+0x228>
			while (ofs > csize) {					/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    1e40:	eb 81       	ldd	r30, Y+3	; 0x03
    1e42:	fc 81       	ldd	r31, Y+4	; 0x04
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	81 ff       	sbrs	r24, 1
    1e48:	09 c0       	rjmp	.+18     	; 0x1e5c <f_lseek+0x17c>
					clust = create_chain(clust);	/* Force streached if in write mode */
    1e4a:	c9 01       	movw	r24, r18
    1e4c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <create_chain>
    1e50:	9c 01       	movw	r18, r24
					if (clust == 0) {				/* When disk gets full, clip file size */
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	39 f4       	brne	.+14     	; 0x1e64 <f_lseek+0x184>
    1e56:	64 01       	movw	r12, r8
    1e58:	53 01       	movw	r10, r6
    1e5a:	2e c0       	rjmp	.+92     	; 0x1eb8 <f_lseek+0x1d8>
						ofs = csize; break;
					}
				} else
#endif
					clust = get_cluster(clust);		/* Follow cluster chain if not in write mode */
    1e5c:	c9 01       	movw	r24, r18
    1e5e:	0e 94 33 0c 	call	0x1866	; 0x1866 <get_cluster>
    1e62:	9c 01       	movw	r18, r24
				if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
    1e64:	22 30       	cpi	r18, 0x02	; 2
    1e66:	31 05       	cpc	r19, r1
    1e68:	08 f4       	brcc	.+2      	; 0x1e6c <f_lseek+0x18c>
    1e6a:	6b c0       	rjmp	.+214    	; 0x1f42 <f_lseek+0x262>
    1e6c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e6e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e70:	14 96       	adiw	r26, 0x04	; 4
    1e72:	ed 91       	ld	r30, X+
    1e74:	fc 91       	ld	r31, X
    1e76:	15 97       	sbiw	r26, 0x05	; 5
    1e78:	86 89       	ldd	r24, Z+22	; 0x16
    1e7a:	97 89       	ldd	r25, Z+23	; 0x17
    1e7c:	28 17       	cp	r18, r24
    1e7e:	39 07       	cpc	r19, r25
    1e80:	08 f0       	brcs	.+2      	; 0x1e84 <f_lseek+0x1a4>
    1e82:	5f c0       	rjmp	.+190    	; 0x1f42 <f_lseek+0x262>
				fp->curr_clust = clust;
    1e84:	51 96       	adiw	r26, 0x11	; 17
    1e86:	3c 93       	st	X, r19
    1e88:	2e 93       	st	-X, r18
    1e8a:	50 97       	sbiw	r26, 0x10	; 16
				fp->fptr += csize;
    1e8c:	fd 01       	movw	r30, r26
    1e8e:	86 81       	ldd	r24, Z+6	; 0x06
    1e90:	97 81       	ldd	r25, Z+7	; 0x07
    1e92:	a0 85       	ldd	r26, Z+8	; 0x08
    1e94:	b1 85       	ldd	r27, Z+9	; 0x09
    1e96:	86 0d       	add	r24, r6
    1e98:	97 1d       	adc	r25, r7
    1e9a:	a8 1d       	adc	r26, r8
    1e9c:	b9 1d       	adc	r27, r9
    1e9e:	86 83       	std	Z+6, r24	; 0x06
    1ea0:	97 83       	std	Z+7, r25	; 0x07
    1ea2:	a0 87       	std	Z+8, r26	; 0x08
    1ea4:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= csize;
    1ea6:	a6 18       	sub	r10, r6
    1ea8:	b7 08       	sbc	r11, r7
    1eaa:	c8 08       	sbc	r12, r8
    1eac:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clust;
		}
		if (clust != 0) {
			while (ofs > csize) {					/* Cluster following loop */
    1eae:	6a 14       	cp	r6, r10
    1eb0:	7b 04       	cpc	r7, r11
    1eb2:	8c 04       	cpc	r8, r12
    1eb4:	9d 04       	cpc	r9, r13
    1eb6:	20 f2       	brcs	.-120    	; 0x1e40 <f_lseek+0x160>
				if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
				fp->curr_clust = clust;
				fp->fptr += csize;
				ofs -= csize;
			}
			fp->fptr += ofs;
    1eb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eba:	fc 81       	ldd	r31, Y+4	; 0x04
    1ebc:	86 81       	ldd	r24, Z+6	; 0x06
    1ebe:	97 81       	ldd	r25, Z+7	; 0x07
    1ec0:	a0 85       	ldd	r26, Z+8	; 0x08
    1ec2:	b1 85       	ldd	r27, Z+9	; 0x09
    1ec4:	8a 0d       	add	r24, r10
    1ec6:	9b 1d       	adc	r25, r11
    1ec8:	ac 1d       	adc	r26, r12
    1eca:	bd 1d       	adc	r27, r13
    1ecc:	86 83       	std	Z+6, r24	; 0x06
    1ece:	97 83       	std	Z+7, r25	; 0x07
    1ed0:	a0 87       	std	Z+8, r26	; 0x08
    1ed2:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / 512U);	/* Sector offset in the cluster */
    1ed4:	d6 01       	movw	r26, r12
    1ed6:	c5 01       	movw	r24, r10
    1ed8:	49 e0       	ldi	r20, 0x09	; 9
    1eda:	b6 95       	lsr	r27
    1edc:	a7 95       	ror	r26
    1ede:	97 95       	ror	r25
    1ee0:	87 95       	ror	r24
    1ee2:	4a 95       	dec	r20
    1ee4:	d1 f7       	brne	.-12     	; 0x1eda <f_lseek+0x1fa>
    1ee6:	98 2f       	mov	r25, r24
    1ee8:	83 83       	std	Z+3, r24	; 0x03
			if (ofs % 512U) fp->csect++;
    1eea:	2f ef       	ldi	r18, 0xFF	; 255
    1eec:	31 e0       	ldi	r19, 0x01	; 1
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	50 e0       	ldi	r21, 0x00	; 0
    1ef2:	a2 22       	and	r10, r18
    1ef4:	b3 22       	and	r11, r19
    1ef6:	c4 22       	and	r12, r20
    1ef8:	d5 22       	and	r13, r21
    1efa:	a1 14       	cp	r10, r1
    1efc:	b1 04       	cpc	r11, r1
    1efe:	c1 04       	cpc	r12, r1
    1f00:	d1 04       	cpc	r13, r1
    1f02:	11 f0       	breq	.+4      	; 0x1f08 <f_lseek+0x228>
    1f04:	9f 5f       	subi	r25, 0xFF	; 255
    1f06:	93 83       	std	Z+3, r25	; 0x03
		}
	}

#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file was extended */
    1f08:	ab 81       	ldd	r26, Y+3	; 0x03
    1f0a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f0c:	16 96       	adiw	r26, 0x06	; 6
    1f0e:	2d 91       	ld	r18, X+
    1f10:	3d 91       	ld	r19, X+
    1f12:	4d 91       	ld	r20, X+
    1f14:	5c 91       	ld	r21, X
    1f16:	19 97       	sbiw	r26, 0x09	; 9
    1f18:	1a 96       	adiw	r26, 0x0a	; 10
    1f1a:	8d 91       	ld	r24, X+
    1f1c:	9d 91       	ld	r25, X+
    1f1e:	0d 90       	ld	r0, X+
    1f20:	bc 91       	ld	r27, X
    1f22:	a0 2d       	mov	r26, r0
    1f24:	82 17       	cp	r24, r18
    1f26:	93 07       	cpc	r25, r19
    1f28:	a4 07       	cpc	r26, r20
    1f2a:	b5 07       	cpc	r27, r21
    1f2c:	b0 f4       	brcc	.+44     	; 0x1f5a <f_lseek+0x27a>
		fp->fsize = fp->fptr;
    1f2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f30:	fc 81       	ldd	r31, Y+4	; 0x04
    1f32:	22 87       	std	Z+10, r18	; 0x0a
    1f34:	33 87       	std	Z+11, r19	; 0x0b
    1f36:	44 87       	std	Z+12, r20	; 0x0c
    1f38:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	80 62       	ori	r24, 0x20	; 32
    1f3e:	82 83       	std	Z+2, r24	; 0x02
    1f40:	0c c0       	rjmp	.+24     	; 0x1f5a <f_lseek+0x27a>
#endif

	return FR_OK;

fk_error:	/* Abort this file due to an unrecoverable error */
	fp->flag |= FA__ERROR;
    1f42:	ab 81       	ldd	r26, Y+3	; 0x03
    1f44:	bc 81       	ldd	r27, Y+4	; 0x04
    1f46:	12 96       	adiw	r26, 0x02	; 2
    1f48:	8c 91       	ld	r24, X
    1f4a:	12 97       	sbiw	r26, 0x02	; 2
    1f4c:	80 68       	ori	r24, 0x80	; 128
    1f4e:	12 96       	adiw	r26, 0x02	; 2
    1f50:	8c 93       	st	X, r24
    1f52:	e8 e0       	ldi	r30, 0x08	; 8
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	fa 83       	std	Y+2, r31	; 0x02
    1f58:	e9 83       	std	Y+1, r30	; 0x01
	return FR_RW_ERROR;
}
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	24 96       	adiw	r28, 0x04	; 4
    1f60:	e2 e1       	ldi	r30, 0x12	; 18
    1f62:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__epilogue_restores__>

00001f66 <sync>:
FRESULT sync (void)		/* FR_OK: successful, FR_RW_ERROR: failed */
{
	FATFS *fs = FatFs;


	fs->winflag = 1;
    1f66:	e0 91 1a 01 	lds	r30, 0x011A
    1f6a:	f0 91 1b 01 	lds	r31, 0x011B
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	87 8f       	std	Z+31, r24	; 0x1f
	if (!move_window(0)) return FR_RW_ERROR;
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    1f7e:	89 2b       	or	r24, r25
    1f80:	59 f0       	breq	.+22     	; 0x1f98 <sync+0x32>
		disk_write(0, fs->win, fs->fsi_sector, 1);
		fs->fsi_flag = 0;
	}
#endif
	/* Make sure that no pending write process in the physical drive */
	if (disk_ioctl(0, CTRL_SYNC, NULL) != RES_OK)
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <disk_ioctl>
    1f8e:	89 2b       	or	r24, r25
    1f90:	19 f4       	brne	.+6      	; 0x1f98 <sync+0x32>
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <sync+0x36>
    1f98:	28 e0       	ldi	r18, 0x08	; 8
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
		return FR_RW_ERROR;
	return FR_OK;
}
    1f9c:	c9 01       	movw	r24, r18
    1f9e:	08 95       	ret

00001fa0 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *finfo		/* Pointer to file information to return */
)
{
    1fa0:	a0 e0       	ldi	r26, 0x00	; 0
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e6 ed       	ldi	r30, 0xD6	; 214
    1fa6:	ff e0       	ldi	r31, 0x0F	; 15
    1fa8:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__prologue_saves__+0xe>
    1fac:	7c 01       	movw	r14, r24
    1fae:	8b 01       	movw	r16, r22
	FRESULT res;
	BYTE *dir, c;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	6d 91       	ld	r22, X+
    1fb4:	7c 91       	ld	r23, X
    1fb6:	11 97       	sbiw	r26, 0x01	; 1
    1fb8:	14 96       	adiw	r26, 0x04	; 4
    1fba:	8d 91       	ld	r24, X+
    1fbc:	9c 91       	ld	r25, X
    1fbe:	15 97       	sbiw	r26, 0x05	; 5
    1fc0:	0e 94 af 0b 	call	0x175e	; 0x175e <validate>
    1fc4:	6c 01       	movw	r12, r24
	if (res != FR_OK) return res;
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <f_readdir+0x2c>
    1fca:	8b c0       	rjmp	.+278    	; 0x20e2 <f_readdir+0x142>

	finfo->fname[0] = 0;
    1fcc:	f8 01       	movw	r30, r16
    1fce:	11 86       	std	Z+9, r1	; 0x09
{
	BYTE n, c, a;
	char *p;


	p = &finfo->fname[0];
    1fd0:	a9 e0       	ldi	r26, 0x09	; 9
    1fd2:	aa 2e       	mov	r10, r26
    1fd4:	b1 2c       	mov	r11, r1
    1fd6:	a0 0e       	add	r10, r16
    1fd8:	b1 1e       	adc	r11, r17
		if (c == 0x05) c = 0xE5;
		if (a & 0x08 && c >= 'A' && c <= 'Z') c += 0x20;
		*p++ = c;
	}
	if (dir[8] != ' ') {		/* Convert file name (extension) */
		*p++ = '.';
    1fda:	fe e2       	ldi	r31, 0x2E	; 46
    1fdc:	9f 2e       	mov	r9, r31
    1fde:	74 c0       	rjmp	.+232    	; 0x20c8 <f_readdir+0x128>
	res = validate(dj->fs, dj->id);			/* Check validity of the object */
	if (res != FR_OK) return res;

	finfo->fname[0] = 0;
	while (dj->sect) {
		if (!move_window(dj->sect))
    1fe0:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    1fe4:	89 2b       	or	r24, r25
    1fe6:	21 f4       	brne	.+8      	; 0x1ff0 <f_readdir+0x50>
    1fe8:	e8 e0       	ldi	r30, 0x08	; 8
    1fea:	ce 2e       	mov	r12, r30
    1fec:	d1 2c       	mov	r13, r1
    1fee:	79 c0       	rjmp	.+242    	; 0x20e2 <f_readdir+0x142>
			return FR_RW_ERROR;
		dir = &dj->fs->win[(dj->index & 15) * 32];	/* pointer to the directory entry */
    1ff0:	d7 01       	movw	r26, r14
    1ff2:	14 96       	adiw	r26, 0x04	; 4
    1ff4:	4d 91       	ld	r20, X+
    1ff6:	5c 91       	ld	r21, X
    1ff8:	15 97       	sbiw	r26, 0x05	; 5
    1ffa:	12 96       	adiw	r26, 0x02	; 2
    1ffc:	8d 91       	ld	r24, X+
    1ffe:	9c 91       	ld	r25, X
    2000:	13 97       	sbiw	r26, 0x03	; 3
    2002:	8f 70       	andi	r24, 0x0F	; 15
    2004:	90 70       	andi	r25, 0x00	; 0
    2006:	75 e0       	ldi	r23, 0x05	; 5
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	7a 95       	dec	r23
    200e:	e1 f7       	brne	.-8      	; 0x2008 <f_readdir+0x68>
		c = dir[DIR_Name];
    2010:	fa 01       	movw	r30, r20
    2012:	e8 0f       	add	r30, r24
    2014:	f9 1f       	adc	r31, r25
    2016:	20 a1       	ldd	r18, Z+32	; 0x20
		if (c == 0) break;							/* Has it reached to end of dir? */
    2018:	22 23       	and	r18, r18
    201a:	09 f4       	brne	.+2      	; 0x201e <f_readdir+0x7e>
    201c:	62 c0       	rjmp	.+196    	; 0x20e2 <f_readdir+0x142>
		if (c != 0xE5 && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    201e:	25 3e       	cpi	r18, 0xE5	; 229
    2020:	09 f4       	brne	.+2      	; 0x2024 <f_readdir+0x84>
    2022:	42 c0       	rjmp	.+132    	; 0x20a8 <f_readdir+0x108>

	finfo->fname[0] = 0;
	while (dj->sect) {
		if (!move_window(dj->sect))
			return FR_RW_ERROR;
		dir = &dj->fs->win[(dj->index & 15) * 32];	/* pointer to the directory entry */
    2024:	ec 01       	movw	r28, r24
    2026:	a0 96       	adiw	r28, 0x20	; 32
    2028:	c4 0f       	add	r28, r20
    202a:	d5 1f       	adc	r29, r21
		c = dir[DIR_Name];
		if (c == 0) break;							/* Has it reached to end of dir? */
		if (c != 0xE5 && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    202c:	8b 85       	ldd	r24, Y+11	; 0x0b
    202e:	83 fd       	sbrc	r24, 3
    2030:	3b c0       	rjmp	.+118    	; 0x20a8 <f_readdir+0x108>
    2032:	95 01       	movw	r18, r10
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0


	p = &finfo->fname[0];
	a = _USE_NTFLAG ? dir[DIR_NTres] : 0;	/* NT flag */
	for (n = 0; n < 8; n++) {	/* Convert file name (body) */
		c = dir[n];
    2038:	fe 01       	movw	r30, r28
    203a:	e8 0f       	add	r30, r24
    203c:	f9 1f       	adc	r31, r25
    203e:	e0 81       	ld	r30, Z
		if (c == ' ') break;
    2040:	e0 32       	cpi	r30, 0x20	; 32
    2042:	51 f0       	breq	.+20     	; 0x2058 <f_readdir+0xb8>
		if (c == 0x05) c = 0xE5;
    2044:	e5 30       	cpi	r30, 0x05	; 5
    2046:	09 f4       	brne	.+2      	; 0x204a <f_readdir+0xaa>
    2048:	e5 ee       	ldi	r30, 0xE5	; 229
		if (a & 0x08 && c >= 'A' && c <= 'Z') c += 0x20;
		*p++ = c;
    204a:	d9 01       	movw	r26, r18
    204c:	ed 93       	st	X+, r30
    204e:	9d 01       	movw	r18, r26
    2050:	01 96       	adiw	r24, 0x01	; 1
	char *p;


	p = &finfo->fname[0];
	a = _USE_NTFLAG ? dir[DIR_NTres] : 0;	/* NT flag */
	for (n = 0; n < 8; n++) {	/* Convert file name (body) */
    2052:	88 30       	cpi	r24, 0x08	; 8
    2054:	91 05       	cpc	r25, r1
    2056:	81 f7       	brne	.-32     	; 0x2038 <f_readdir+0x98>
		if (c == ' ') break;
		if (c == 0x05) c = 0xE5;
		if (a & 0x08 && c >= 'A' && c <= 'Z') c += 0x20;
		*p++ = c;
	}
	if (dir[8] != ' ') {		/* Convert file name (extension) */
    2058:	88 85       	ldd	r24, Y+8	; 0x08
    205a:	80 32       	cpi	r24, 0x20	; 32
    205c:	11 f4       	brne	.+4      	; 0x2062 <f_readdir+0xc2>
    205e:	f9 01       	movw	r30, r18
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <f_readdir+0xe0>
		*p++ = '.';
    2062:	f9 01       	movw	r30, r18
    2064:	91 92       	st	Z+, r9
    2066:	de 01       	movw	r26, r28
		for (n = 8; n < 11; n++) {
    2068:	2c 5f       	subi	r18, 0xFC	; 252
    206a:	3f 4f       	sbci	r19, 0xFF	; 255
			c = dir[n];
    206c:	18 96       	adiw	r26, 0x08	; 8
    206e:	8c 91       	ld	r24, X
    2070:	18 97       	sbiw	r26, 0x08	; 8
			if (c == ' ') break;
    2072:	80 32       	cpi	r24, 0x20	; 32
    2074:	29 f0       	breq	.+10     	; 0x2080 <f_readdir+0xe0>
			if (a & 0x10 && c >= 'A' && c <= 'Z') c += 0x20;
			*p++ = c;
    2076:	81 93       	st	Z+, r24
    2078:	11 96       	adiw	r26, 0x01	; 1
		if (a & 0x08 && c >= 'A' && c <= 'Z') c += 0x20;
		*p++ = c;
	}
	if (dir[8] != ' ') {		/* Convert file name (extension) */
		*p++ = '.';
		for (n = 8; n < 11; n++) {
    207a:	e2 17       	cp	r30, r18
    207c:	f3 07       	cpc	r31, r19
    207e:	b1 f7       	brne	.-20     	; 0x206c <f_readdir+0xcc>
			if (c == ' ') break;
			if (a & 0x10 && c >= 'A' && c <= 'Z') c += 0x20;
			*p++ = c;
		}
	}
	*p = '\0';
    2080:	10 82       	st	Z, r1

	finfo->fattrib = dir[DIR_Attr];			/* Attribute */
    2082:	8b 85       	ldd	r24, Y+11	; 0x0b
    2084:	f8 01       	movw	r30, r16
    2086:	80 87       	std	Z+8, r24	; 0x08
	finfo->fsize = LD_DWORD(&dir[DIR_FileSize]);	/* Size */
    2088:	8c 8d       	ldd	r24, Y+28	; 0x1c
    208a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    208c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    208e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2090:	80 83       	st	Z, r24
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	a2 83       	std	Z+2, r26	; 0x02
    2096:	b3 83       	std	Z+3, r27	; 0x03
	finfo->fdate = LD_WORD(&dir[DIR_WrtDate]);	/* Date */
    2098:	88 8d       	ldd	r24, Y+24	; 0x18
    209a:	99 8d       	ldd	r25, Y+25	; 0x19
    209c:	95 83       	std	Z+5, r25	; 0x05
    209e:	84 83       	std	Z+4, r24	; 0x04
	finfo->ftime = LD_WORD(&dir[DIR_WrtTime]);	/* Time */
    20a0:	8e 89       	ldd	r24, Y+22	; 0x16
    20a2:	9f 89       	ldd	r25, Y+23	; 0x17
    20a4:	97 83       	std	Z+7, r25	; 0x07
    20a6:	86 83       	std	Z+6, r24	; 0x06
		dir = &dj->fs->win[(dj->index & 15) * 32];	/* pointer to the directory entry */
		c = dir[DIR_Name];
		if (c == 0) break;							/* Has it reached to end of dir? */
		if (c != 0xE5 && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			get_fileinfo(finfo, dir);
		if (!next_dir_entry(dj)) dj->sect = 0;		/* Next entry */
    20a8:	c7 01       	movw	r24, r14
    20aa:	0e 94 b8 0c 	call	0x1970	; 0x1970 <next_dir_entry>
    20ae:	89 2b       	or	r24, r25
    20b0:	39 f4       	brne	.+14     	; 0x20c0 <f_readdir+0x120>
    20b2:	d7 01       	movw	r26, r14
    20b4:	1a 96       	adiw	r26, 0x0a	; 10
    20b6:	1d 92       	st	X+, r1
    20b8:	1d 92       	st	X+, r1
    20ba:	1d 92       	st	X+, r1
    20bc:	1c 92       	st	X, r1
    20be:	1d 97       	sbiw	r26, 0x0d	; 13
		if (finfo->fname[0]) break;					/* Found valid entry */
    20c0:	f8 01       	movw	r30, r16
    20c2:	81 85       	ldd	r24, Z+9	; 0x09
    20c4:	88 23       	and	r24, r24
    20c6:	69 f4       	brne	.+26     	; 0x20e2 <f_readdir+0x142>

	res = validate(dj->fs, dj->id);			/* Check validity of the object */
	if (res != FR_OK) return res;

	finfo->fname[0] = 0;
	while (dj->sect) {
    20c8:	d7 01       	movw	r26, r14
    20ca:	1a 96       	adiw	r26, 0x0a	; 10
    20cc:	6d 91       	ld	r22, X+
    20ce:	7d 91       	ld	r23, X+
    20d0:	8d 91       	ld	r24, X+
    20d2:	9c 91       	ld	r25, X
    20d4:	1d 97       	sbiw	r26, 0x0d	; 13
    20d6:	61 15       	cp	r22, r1
    20d8:	71 05       	cpc	r23, r1
    20da:	81 05       	cpc	r24, r1
    20dc:	91 05       	cpc	r25, r1
    20de:	09 f0       	breq	.+2      	; 0x20e2 <f_readdir+0x142>
    20e0:	7f cf       	rjmp	.-258    	; 0x1fe0 <f_readdir+0x40>
		if (!next_dir_entry(dj)) dj->sect = 0;		/* Next entry */
		if (finfo->fname[0]) break;					/* Found valid entry */
	}

	return FR_OK;
}
    20e2:	c6 01       	movw	r24, r12
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	eb e0       	ldi	r30, 0x0B	; 11
    20ea:	0c 94 0c 1f 	jmp	0x3e18	; 0x3e18 <__epilogue_restores__+0xe>

000020ee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    20f8:	68 81       	ld	r22, Y
    20fa:	79 81       	ldd	r23, Y+1	; 0x01
    20fc:	8c 81       	ldd	r24, Y+4	; 0x04
    20fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2100:	0e 94 af 0b 	call	0x175e	; 0x175e <validate>
    2104:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	69 f5       	brne	.+90     	; 0x2164 <f_sync+0x76>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	85 ff       	sbrs	r24, 5
    210e:	2a c0       	rjmp	.+84     	; 0x2164 <f_sync+0x76>
			/* Update the directory entry */
			if (!move_window(fp->dir_sect))
    2110:	6e 89       	ldd	r22, Y+22	; 0x16
    2112:	7f 89       	ldd	r23, Y+23	; 0x17
    2114:	88 8d       	ldd	r24, Y+24	; 0x18
    2116:	99 8d       	ldd	r25, Y+25	; 0x19
    2118:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    211c:	89 2b       	or	r24, r25
    211e:	19 f4       	brne	.+6      	; 0x2126 <f_sync+0x38>
    2120:	28 e0       	ldi	r18, 0x08	; 8
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	1f c0       	rjmp	.+62     	; 0x2164 <f_sync+0x76>
				return FR_RW_ERROR;
			dir = fp->dir_ptr;
    2126:	0a 8d       	ldd	r16, Y+26	; 0x1a
    2128:	1b 8d       	ldd	r17, Y+27	; 0x1b
			dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
    212a:	f8 01       	movw	r30, r16
    212c:	83 85       	ldd	r24, Z+11	; 0x0b
    212e:	80 62       	ori	r24, 0x20	; 32
    2130:	83 87       	std	Z+11, r24	; 0x0b
			ST_DWORD(&dir[DIR_FileSize], fp->fsize);		/* Update file size */
    2132:	8a 85       	ldd	r24, Y+10	; 0x0a
    2134:	9b 85       	ldd	r25, Y+11	; 0x0b
    2136:	ac 85       	ldd	r26, Y+12	; 0x0c
    2138:	bd 85       	ldd	r27, Y+13	; 0x0d
    213a:	84 8f       	std	Z+28, r24	; 0x1c
    213c:	95 8f       	std	Z+29, r25	; 0x1d
    213e:	a6 8f       	std	Z+30, r26	; 0x1e
    2140:	b7 8f       	std	Z+31, r27	; 0x1f
			ST_WORD(&dir[DIR_FstClusLO], fp->org_clust);	/* Update start cluster */
    2142:	8e 85       	ldd	r24, Y+14	; 0x0e
    2144:	9f 85       	ldd	r25, Y+15	; 0x0f
    2146:	93 8f       	std	Z+27, r25	; 0x1b
    2148:	82 8f       	std	Z+26, r24	; 0x1a
#if _FAT32
			ST_WORD(&dir[DIR_FstClusHI], fp->org_clust >> 16);
#endif
			tim = get_fattime();					/* Updated time */
    214a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <get_fattime>
			ST_DWORD(&dir[DIR_WrtTime], tim);
    214e:	f8 01       	movw	r30, r16
    2150:	66 8b       	std	Z+22, r22	; 0x16
    2152:	77 8b       	std	Z+23, r23	; 0x17
    2154:	80 8f       	std	Z+24, r24	; 0x18
    2156:	91 8f       	std	Z+25, r25	; 0x19
			fp->flag &= (BYTE)~FA__WRITTEN;
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	8f 7d       	andi	r24, 0xDF	; 223
    215c:	8a 83       	std	Y+2, r24	; 0x02
			res = sync();
    215e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <sync>
    2162:	9c 01       	movw	r18, r24
		}
	}
	return res;
}
    2164:	c9 01       	movw	r24, r18
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	08 95       	ret

00002170 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);
    2176:	0e 94 77 10 	call	0x20ee	; 0x20ee <f_sync>
    217a:	9c 01       	movw	r18, r24
#else
	res = validate(fp->fs, fp->id);
#endif
	if (res == FR_OK) fp->fs = NULL;
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	11 f4       	brne	.+4      	; 0x2184 <f_close+0x14>
    2180:	1d 82       	std	Y+5, r1	; 0x05
    2182:	1c 82       	std	Y+4, r1	; 0x04
	return res;
}
    2184:	c9 01       	movw	r24, r18
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	08 95       	ret

0000218c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    218c:	a0 e0       	ldi	r26, 0x00	; 0
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	ec ec       	ldi	r30, 0xCC	; 204
    2192:	f0 e1       	ldi	r31, 0x10	; 16
    2194:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__prologue_saves__>
    2198:	ec 01       	movw	r28, r24
    219a:	16 2f       	mov	r17, r22
    219c:	07 2f       	mov	r16, r23
    219e:	4a 01       	movw	r8, r20
    21a0:	19 01       	movw	r2, r18
	UINT wcnt, cc;
	CLUST clust;
	const BYTE *wbuff = buff;


	*bw = 0;
    21a2:	f9 01       	movw	r30, r18
    21a4:	11 82       	std	Z+1, r1	; 0x01
    21a6:	10 82       	st	Z, r1
	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    21a8:	68 81       	ld	r22, Y
    21aa:	79 81       	ldd	r23, Y+1	; 0x01
    21ac:	8c 81       	ldd	r24, Y+4	; 0x04
    21ae:	9d 81       	ldd	r25, Y+5	; 0x05
    21b0:	0e 94 af 0b 	call	0x175e	; 0x175e <validate>
    21b4:	2c 01       	movw	r4, r24
	if (res != FR_OK) return res;
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	09 f0       	breq	.+2      	; 0x21bc <f_write+0x30>
    21ba:	64 c1       	rjmp	.+712    	; 0x2484 <f_write+0x2f8>
	if (fp->flag & FA__ERROR) return FR_RW_ERROR;	/* Check error flag */
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	87 fd       	sbrc	r24, 7
    21c0:	5e c1       	rjmp	.+700    	; 0x247e <f_write+0x2f2>
	if (!(fp->flag & FA_WRITE)) return FR_DENIED;	/* Check access mode */
    21c2:	81 fd       	sbrc	r24, 1
    21c4:	04 c0       	rjmp	.+8      	; 0x21ce <f_write+0x42>
    21c6:	26 e0       	ldi	r18, 0x06	; 6
    21c8:	42 2e       	mov	r4, r18
    21ca:	51 2c       	mov	r5, r1
    21cc:	5b c1       	rjmp	.+694    	; 0x2484 <f_write+0x2f8>
	if (fp->fsize + btw < fp->fsize) return FR_OK;	/* File size cannot reach 4GB */
    21ce:	2a 85       	ldd	r18, Y+10	; 0x0a
    21d0:	3b 85       	ldd	r19, Y+11	; 0x0b
    21d2:	4c 85       	ldd	r20, Y+12	; 0x0c
    21d4:	5d 85       	ldd	r21, Y+13	; 0x0d
    21d6:	c4 01       	movw	r24, r8
    21d8:	a0 e0       	ldi	r26, 0x00	; 0
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	82 0f       	add	r24, r18
    21de:	93 1f       	adc	r25, r19
    21e0:	a4 1f       	adc	r26, r20
    21e2:	b5 1f       	adc	r27, r21
    21e4:	82 17       	cp	r24, r18
    21e6:	93 07       	cpc	r25, r19
    21e8:	a4 07       	cpc	r26, r20
    21ea:	b5 07       	cpc	r27, r21
    21ec:	08 f4       	brcc	.+2      	; 0x21f0 <f_write+0x64>
    21ee:	4a c1       	rjmp	.+660    	; 0x2484 <f_write+0x2f8>
{
	FRESULT res;
	DWORD sect;
	UINT wcnt, cc;
	CLUST clust;
	const BYTE *wbuff = buff;
    21f0:	81 2f       	mov	r24, r17
    21f2:	90 2f       	mov	r25, r16
    21f4:	9c 01       	movw	r18, r24
    21f6:	39 01       	movw	r6, r18
    21f8:	26 c1       	rjmp	.+588    	; 0x2446 <f_write+0x2ba>
	if (!(fp->flag & FA_WRITE)) return FR_DENIED;	/* Check access mode */
	if (fp->fsize + btw < fp->fsize) return FR_OK;	/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % 512U) == 0) {				/* On the sector boundary? */
    21fa:	2e 81       	ldd	r18, Y+6	; 0x06
    21fc:	3f 81       	ldd	r19, Y+7	; 0x07
    21fe:	48 85       	ldd	r20, Y+8	; 0x08
    2200:	59 85       	ldd	r21, Y+9	; 0x09
    2202:	da 01       	movw	r26, r20
    2204:	c9 01       	movw	r24, r18
    2206:	91 70       	andi	r25, 0x01	; 1
    2208:	a0 70       	andi	r26, 0x00	; 0
    220a:	b0 70       	andi	r27, 0x00	; 0
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	a1 05       	cpc	r26, r1
    2210:	b1 05       	cpc	r27, r1
    2212:	09 f0       	breq	.+2      	; 0x2216 <f_write+0x8a>
    2214:	a6 c0       	rjmp	.+332    	; 0x2362 <f_write+0x1d6>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    2216:	ec 81       	ldd	r30, Y+4	; 0x04
    2218:	fd 81       	ldd	r31, Y+5	; 0x05
    221a:	9b 81       	ldd	r25, Y+3	; 0x03
    221c:	85 8d       	ldd	r24, Z+29	; 0x1d
    221e:	98 17       	cp	r25, r24
    2220:	50 f1       	brcs	.+84     	; 0x2276 <f_write+0xea>
				if (fp->fptr == 0) {				/* On the top of the file? */
    2222:	21 15       	cp	r18, r1
    2224:	31 05       	cpc	r19, r1
    2226:	41 05       	cpc	r20, r1
    2228:	51 05       	cpc	r21, r1
    222a:	69 f4       	brne	.+26     	; 0x2246 <f_write+0xba>
					clust = fp->org_clust;			/* Follow from the origin */
    222c:	2e 85       	ldd	r18, Y+14	; 0x0e
    222e:	3f 85       	ldd	r19, Y+15	; 0x0f
					if (clust == 0)					/* When there is no cluster chain, */
    2230:	21 15       	cp	r18, r1
    2232:	31 05       	cpc	r19, r1
    2234:	89 f4       	brne	.+34     	; 0x2258 <f_write+0xcc>
						fp->org_clust = clust = create_chain(0);	/* Create a new cluster chain */
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <create_chain>
    223e:	9c 01       	movw	r18, r24
    2240:	9f 87       	std	Y+15, r25	; 0x0f
    2242:	8e 87       	std	Y+14, r24	; 0x0e
    2244:	05 c0       	rjmp	.+10     	; 0x2250 <f_write+0xc4>
				} else {							/* Middle or end of the file */
					clust = create_chain(fp->curr_clust);			/* Trace or streach cluster chain */
    2246:	88 89       	ldd	r24, Y+16	; 0x10
    2248:	99 89       	ldd	r25, Y+17	; 0x11
    224a:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <create_chain>
    224e:	9c 01       	movw	r18, r24
				}
				if (clust == 0) break;				/* Could not allocate a new cluster (disk full) */
    2250:	21 15       	cp	r18, r1
    2252:	31 05       	cpc	r19, r1
    2254:	09 f4       	brne	.+2      	; 0x2258 <f_write+0xcc>
    2256:	fb c0       	rjmp	.+502    	; 0x244e <f_write+0x2c2>
				if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
    2258:	21 30       	cpi	r18, 0x01	; 1
    225a:	31 05       	cpc	r19, r1
    225c:	09 f4       	brne	.+2      	; 0x2260 <f_write+0xd4>
    225e:	0c c1       	rjmp	.+536    	; 0x2478 <f_write+0x2ec>
    2260:	ec 81       	ldd	r30, Y+4	; 0x04
    2262:	fd 81       	ldd	r31, Y+5	; 0x05
    2264:	86 89       	ldd	r24, Z+22	; 0x16
    2266:	97 89       	ldd	r25, Z+23	; 0x17
    2268:	28 17       	cp	r18, r24
    226a:	39 07       	cpc	r19, r25
    226c:	08 f0       	brcs	.+2      	; 0x2270 <f_write+0xe4>
    226e:	04 c1       	rjmp	.+520    	; 0x2478 <f_write+0x2ec>
				fp->curr_clust = clust;				/* Update current cluster */
    2270:	39 8b       	std	Y+17, r19	; 0x11
    2272:	28 8b       	std	Y+16, r18	; 0x10
				fp->csect = 0;						/* Reset sector address in the cluster */
    2274:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	CLUST clust		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    2276:	00 91 1a 01 	lds	r16, 0x011A
    227a:	10 91 1b 01 	lds	r17, 0x011B


	clust -= 2;
    227e:	68 89       	ldd	r22, Y+16	; 0x10
    2280:	79 89       	ldd	r23, Y+17	; 0x11
    2282:	62 50       	subi	r22, 0x02	; 2
    2284:	70 40       	sbci	r23, 0x00	; 0
	if (clust >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2286:	f8 01       	movw	r30, r16
    2288:	86 89       	ldd	r24, Z+22	; 0x16
    228a:	97 89       	ldd	r25, Z+23	; 0x17
    228c:	02 97       	sbiw	r24, 0x02	; 2
    228e:	68 17       	cp	r22, r24
    2290:	79 07       	cpc	r23, r25
    2292:	28 f0       	brcs	.+10     	; 0x229e <f_write+0x112>
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	14 c0       	rjmp	.+40     	; 0x22c6 <f_write+0x13a>
	return (DWORD)clust * fs->csize + fs->database;
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	f8 01       	movw	r30, r16
    22a4:	25 8d       	ldd	r18, Z+29	; 0x1d
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	40 e0       	ldi	r20, 0x00	; 0
    22aa:	50 e0       	ldi	r21, 0x00	; 0
    22ac:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__mulsi3>
    22b0:	9b 01       	movw	r18, r22
    22b2:	ac 01       	movw	r20, r24
    22b4:	f8 01       	movw	r30, r16
    22b6:	80 89       	ldd	r24, Z+16	; 0x10
    22b8:	91 89       	ldd	r25, Z+17	; 0x11
    22ba:	a2 89       	ldd	r26, Z+18	; 0x12
    22bc:	b3 89       	ldd	r27, Z+19	; 0x13
    22be:	28 0f       	add	r18, r24
    22c0:	39 1f       	adc	r19, r25
    22c2:	4a 1f       	adc	r20, r26
    22c4:	5b 1f       	adc	r21, r27
				if (clust == 0) break;				/* Could not allocate a new cluster (disk full) */
				if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
				fp->curr_clust = clust;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector address in the cluster */
			}
			sect = clust2sect(fp->curr_clust) + fp->csect;	/* Get current sector */
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	59 01       	movw	r10, r18
    22ca:	6a 01       	movw	r12, r20
    22cc:	a8 0e       	add	r10, r24
    22ce:	b1 1c       	adc	r11, r1
    22d0:	c1 1c       	adc	r12, r1
    22d2:	d1 1c       	adc	r13, r1
			cc = btw / 512U;						/* When remaining bytes >= sector size, */
    22d4:	74 01       	movw	r14, r8
    22d6:	ef 2c       	mov	r14, r15
    22d8:	ff 24       	eor	r15, r15
    22da:	e6 94       	lsr	r14
			if (cc) {								/* Write maximum contiguous sectors directly */
    22dc:	e1 14       	cp	r14, r1
    22de:	f1 04       	cpc	r15, r1
    22e0:	09 f1       	breq	.+66     	; 0x2324 <f_write+0x198>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    22e2:	ec 81       	ldd	r30, Y+4	; 0x04
    22e4:	fd 81       	ldd	r31, Y+5	; 0x05
    22e6:	25 8d       	ldd	r18, Z+29	; 0x1d
    22e8:	48 2f       	mov	r20, r24
    22ea:	50 e0       	ldi	r21, 0x00	; 0
    22ec:	c7 01       	movw	r24, r14
    22ee:	84 0f       	add	r24, r20
    22f0:	95 1f       	adc	r25, r21
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	28 17       	cp	r18, r24
    22f6:	39 07       	cpc	r19, r25
    22f8:	18 f4       	brcc	.+6      	; 0x2300 <f_write+0x174>
					cc = fp->fs->csize - fp->csect;
    22fa:	79 01       	movw	r14, r18
    22fc:	e4 1a       	sub	r14, r20
    22fe:	f5 0a       	sbc	r15, r21
				if (disk_write(0, wbuff, sect, (BYTE)cc) != RES_OK)
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	b3 01       	movw	r22, r6
    2304:	a6 01       	movw	r20, r12
    2306:	95 01       	movw	r18, r10
    2308:	0e 2d       	mov	r16, r14
    230a:	0e 94 94 1b 	call	0x3728	; 0x3728 <disk_write>
    230e:	89 2b       	or	r24, r25
    2310:	09 f0       	breq	.+2      	; 0x2314 <f_write+0x188>
    2312:	b2 c0       	rjmp	.+356    	; 0x2478 <f_write+0x2ec>
					goto fw_error;
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	8e 0d       	add	r24, r14
    2318:	8b 83       	std	Y+3, r24	; 0x03
				wcnt = 512U * cc;					/* Number of bytes transferred */
    231a:	87 01       	movw	r16, r14
    231c:	10 2f       	mov	r17, r16
    231e:	00 27       	eor	r16, r16
    2320:	11 0f       	add	r17, r17
    2322:	77 c0       	rjmp	.+238    	; 0x2412 <f_write+0x286>
				continue;
			}
			if (fp->fptr >= fp->fsize) {			/* Flush R/W window without reading if needed */
    2324:	2e 81       	ldd	r18, Y+6	; 0x06
    2326:	3f 81       	ldd	r19, Y+7	; 0x07
    2328:	48 85       	ldd	r20, Y+8	; 0x08
    232a:	59 85       	ldd	r21, Y+9	; 0x09
    232c:	8a 85       	ldd	r24, Y+10	; 0x0a
    232e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2330:	ac 85       	ldd	r26, Y+12	; 0x0c
    2332:	bd 85       	ldd	r27, Y+13	; 0x0d
    2334:	28 17       	cp	r18, r24
    2336:	39 07       	cpc	r19, r25
    2338:	4a 07       	cpc	r20, r26
    233a:	5b 07       	cpc	r21, r27
    233c:	78 f0       	brcs	.+30     	; 0x235c <f_write+0x1d0>
				if (!move_window(0)) goto fw_error;
    233e:	60 e0       	ldi	r22, 0x00	; 0
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    234a:	89 2b       	or	r24, r25
    234c:	09 f4       	brne	.+2      	; 0x2350 <f_write+0x1c4>
    234e:	94 c0       	rjmp	.+296    	; 0x2478 <f_write+0x2ec>
				fp->fs->winsect = sect;
    2350:	ec 81       	ldd	r30, Y+4	; 0x04
    2352:	fd 81       	ldd	r31, Y+5	; 0x05
    2354:	a4 82       	std	Z+4, r10	; 0x04
    2356:	b5 82       	std	Z+5, r11	; 0x05
    2358:	c6 82       	std	Z+6, r12	; 0x06
    235a:	d7 82       	std	Z+7, r13	; 0x07
			}
			fp->csect++;							/* Next sector address in the cluster */
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	8f 5f       	subi	r24, 0xFF	; 255
    2360:	8b 83       	std	Y+3, r24	; 0x03
static
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	CLUST clust		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    2362:	00 91 1a 01 	lds	r16, 0x011A
    2366:	10 91 1b 01 	lds	r17, 0x011B


	clust -= 2;
    236a:	68 89       	ldd	r22, Y+16	; 0x10
    236c:	79 89       	ldd	r23, Y+17	; 0x11
    236e:	62 50       	subi	r22, 0x02	; 2
    2370:	70 40       	sbci	r23, 0x00	; 0
	if (clust >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2372:	f8 01       	movw	r30, r16
    2374:	86 89       	ldd	r24, Z+22	; 0x16
    2376:	97 89       	ldd	r25, Z+23	; 0x17
    2378:	02 97       	sbiw	r24, 0x02	; 2
    237a:	68 17       	cp	r22, r24
    237c:	79 07       	cpc	r23, r25
    237e:	28 f0       	brcs	.+10     	; 0x238a <f_write+0x1fe>
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	50 e0       	ldi	r21, 0x00	; 0
    2388:	14 c0       	rjmp	.+40     	; 0x23b2 <f_write+0x226>
	return (DWORD)clust * fs->csize + fs->database;
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	f8 01       	movw	r30, r16
    2390:	25 8d       	ldd	r18, Z+29	; 0x1d
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	50 e0       	ldi	r21, 0x00	; 0
    2398:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__mulsi3>
    239c:	9b 01       	movw	r18, r22
    239e:	ac 01       	movw	r20, r24
    23a0:	f8 01       	movw	r30, r16
    23a2:	80 89       	ldd	r24, Z+16	; 0x10
    23a4:	91 89       	ldd	r25, Z+17	; 0x11
    23a6:	a2 89       	ldd	r26, Z+18	; 0x12
    23a8:	b3 89       	ldd	r27, Z+19	; 0x13
    23aa:	28 0f       	add	r18, r24
    23ac:	39 1f       	adc	r19, r25
    23ae:	4a 1f       	adc	r20, r26
    23b0:	5b 1f       	adc	r21, r27
				fp->fs->winsect = sect;
			}
			fp->csect++;							/* Next sector address in the cluster */
		}
		sect = clust2sect(fp->curr_clust) + fp->csect - 1;	/* Get current sector */
		if (!move_window(sect)) goto fw_error;		/* Move sector window */
    23b2:	6b 81       	ldd	r22, Y+3	; 0x03
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	61 50       	subi	r22, 0x01	; 1
    23bc:	70 40       	sbci	r23, 0x00	; 0
    23be:	80 40       	sbci	r24, 0x00	; 0
    23c0:	90 40       	sbci	r25, 0x00	; 0
    23c2:	62 0f       	add	r22, r18
    23c4:	73 1f       	adc	r23, r19
    23c6:	84 1f       	adc	r24, r20
    23c8:	95 1f       	adc	r25, r21
    23ca:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    23ce:	89 2b       	or	r24, r25
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <f_write+0x248>
    23d2:	52 c0       	rjmp	.+164    	; 0x2478 <f_write+0x2ec>
		wcnt = 512U - (fp->fptr % 512U);			/* Put partial sector into sector window */
    23d4:	2e 81       	ldd	r18, Y+6	; 0x06
    23d6:	3f 81       	ldd	r19, Y+7	; 0x07
    23d8:	48 85       	ldd	r20, Y+8	; 0x08
    23da:	59 85       	ldd	r21, Y+9	; 0x09
    23dc:	c9 01       	movw	r24, r18
    23de:	91 70       	andi	r25, 0x01	; 1
    23e0:	60 e0       	ldi	r22, 0x00	; 0
    23e2:	72 e0       	ldi	r23, 0x02	; 2
    23e4:	68 1b       	sub	r22, r24
    23e6:	79 0b       	sbc	r23, r25
    23e8:	84 01       	movw	r16, r8
    23ea:	68 15       	cp	r22, r8
    23ec:	79 05       	cpc	r23, r9
    23ee:	08 f4       	brcc	.+2      	; 0x23f2 <f_write+0x266>
    23f0:	8b 01       	movw	r16, r22
		if (wcnt > btw) wcnt = btw;
		memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
    23f2:	c9 01       	movw	r24, r18
    23f4:	91 70       	andi	r25, 0x01	; 1
    23f6:	80 96       	adiw	r24, 0x20	; 32
    23f8:	2c 81       	ldd	r18, Y+4	; 0x04
    23fa:	3d 81       	ldd	r19, Y+5	; 0x05
    23fc:	28 0f       	add	r18, r24
    23fe:	39 1f       	adc	r19, r25
    2400:	c9 01       	movw	r24, r18
    2402:	b3 01       	movw	r22, r6
    2404:	a8 01       	movw	r20, r16
    2406:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <memcpy>
		fp->fs->winflag = 1;
    240a:	ec 81       	ldd	r30, Y+4	; 0x04
    240c:	fd 81       	ldd	r31, Y+5	; 0x05
    240e:	71 e0       	ldi	r23, 0x01	; 1
    2410:	77 8f       	std	Z+31, r23	; 0x1f
	if (fp->flag & FA__ERROR) return FR_RW_ERROR;	/* Check error flag */
	if (!(fp->flag & FA_WRITE)) return FR_DENIED;	/* Check access mode */
	if (fp->fsize + btw < fp->fsize) return FR_OK;	/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2412:	60 0e       	add	r6, r16
    2414:	71 1e       	adc	r7, r17
    2416:	c8 01       	movw	r24, r16
    2418:	a0 e0       	ldi	r26, 0x00	; 0
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	2e 81       	ldd	r18, Y+6	; 0x06
    241e:	3f 81       	ldd	r19, Y+7	; 0x07
    2420:	48 85       	ldd	r20, Y+8	; 0x08
    2422:	59 85       	ldd	r21, Y+9	; 0x09
    2424:	28 0f       	add	r18, r24
    2426:	39 1f       	adc	r19, r25
    2428:	4a 1f       	adc	r20, r26
    242a:	5b 1f       	adc	r21, r27
    242c:	2e 83       	std	Y+6, r18	; 0x06
    242e:	3f 83       	std	Y+7, r19	; 0x07
    2430:	48 87       	std	Y+8, r20	; 0x08
    2432:	59 87       	std	Y+9, r21	; 0x09
    2434:	f1 01       	movw	r30, r2
    2436:	80 81       	ld	r24, Z
    2438:	91 81       	ldd	r25, Z+1	; 0x01
    243a:	80 0f       	add	r24, r16
    243c:	91 1f       	adc	r25, r17
    243e:	91 83       	std	Z+1, r25	; 0x01
    2440:	80 83       	st	Z, r24
    2442:	80 1a       	sub	r8, r16
    2444:	91 0a       	sbc	r9, r17
	if (res != FR_OK) return res;
	if (fp->flag & FA__ERROR) return FR_RW_ERROR;	/* Check error flag */
	if (!(fp->flag & FA_WRITE)) return FR_DENIED;	/* Check access mode */
	if (fp->fsize + btw < fp->fsize) return FR_OK;	/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    2446:	81 14       	cp	r8, r1
    2448:	91 04       	cpc	r9, r1
    244a:	09 f0       	breq	.+2      	; 0x244e <f_write+0x2c2>
    244c:	d6 ce       	rjmp	.-596    	; 0x21fa <f_write+0x6e>
		if (wcnt > btw) wcnt = btw;
		memcpy(&fp->fs->win[fp->fptr % 512U], wbuff, wcnt);
		fp->fs->winflag = 1;
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    244e:	2e 81       	ldd	r18, Y+6	; 0x06
    2450:	3f 81       	ldd	r19, Y+7	; 0x07
    2452:	48 85       	ldd	r20, Y+8	; 0x08
    2454:	59 85       	ldd	r21, Y+9	; 0x09
    2456:	8a 85       	ldd	r24, Y+10	; 0x0a
    2458:	9b 85       	ldd	r25, Y+11	; 0x0b
    245a:	ac 85       	ldd	r26, Y+12	; 0x0c
    245c:	bd 85       	ldd	r27, Y+13	; 0x0d
    245e:	82 17       	cp	r24, r18
    2460:	93 07       	cpc	r25, r19
    2462:	a4 07       	cpc	r26, r20
    2464:	b5 07       	cpc	r27, r21
    2466:	20 f4       	brcc	.+8      	; 0x2470 <f_write+0x2e4>
    2468:	2a 87       	std	Y+10, r18	; 0x0a
    246a:	3b 87       	std	Y+11, r19	; 0x0b
    246c:	4c 87       	std	Y+12, r20	; 0x0c
    246e:	5d 87       	std	Y+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	80 62       	ori	r24, 0x20	; 32
    2474:	8a 83       	std	Y+2, r24	; 0x02
    2476:	06 c0       	rjmp	.+12     	; 0x2484 <f_write+0x2f8>
	return res;

fw_error:	/* Abort this file due to an unrecoverable error */
	fp->flag |= FA__ERROR;
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	80 68       	ori	r24, 0x80	; 128
    247c:	8a 83       	std	Y+2, r24	; 0x02
    247e:	b8 e0       	ldi	r27, 0x08	; 8
    2480:	4b 2e       	mov	r4, r27
    2482:	51 2c       	mov	r5, r1
	return FR_RW_ERROR;
}
    2484:	c2 01       	movw	r24, r4
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	e2 e1       	ldi	r30, 0x12	; 18
    248c:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__epilogue_restores__>

00002490 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2490:	a0 e0       	ldi	r26, 0x00	; 0
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	ee e4       	ldi	r30, 0x4E	; 78
    2496:	f2 e1       	ldi	r31, 0x12	; 18
    2498:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__prologue_saves__>
    249c:	ec 01       	movw	r28, r24
    249e:	16 2f       	mov	r17, r22
    24a0:	07 2f       	mov	r16, r23
    24a2:	5a 01       	movw	r10, r20
    24a4:	29 01       	movw	r4, r18
	UINT rcnt, cc;
	CLUST clust;
	BYTE *rbuff = buff;


	*br = 0;
    24a6:	f9 01       	movw	r30, r18
    24a8:	11 82       	std	Z+1, r1	; 0x01
    24aa:	10 82       	st	Z, r1
	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    24ac:	68 81       	ld	r22, Y
    24ae:	79 81       	ldd	r23, Y+1	; 0x01
    24b0:	8c 81       	ldd	r24, Y+4	; 0x04
    24b2:	9d 81       	ldd	r25, Y+5	; 0x05
    24b4:	0e 94 af 0b 	call	0x175e	; 0x175e <validate>
    24b8:	3c 01       	movw	r6, r24
	if (res != FR_OK) return res;
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <f_read+0x30>
    24be:	23 c1       	rjmp	.+582    	; 0x2706 <f_read+0x276>
	if (fp->flag & FA__ERROR) return FR_RW_ERROR;	/* Check error flag */
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	87 fd       	sbrc	r24, 7
    24c4:	1d c1       	rjmp	.+570    	; 0x2700 <f_read+0x270>
	if (!(fp->flag & FA_READ)) return FR_DENIED;	/* Check access mode */
    24c6:	80 fd       	sbrc	r24, 0
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <f_read+0x42>
    24ca:	76 e0       	ldi	r23, 0x06	; 6
    24cc:	67 2e       	mov	r6, r23
    24ce:	71 2c       	mov	r7, r1
    24d0:	1a c1       	rjmp	.+564    	; 0x2706 <f_read+0x276>
	remain = fp->fsize - fp->fptr;
    24d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    24d4:	3b 85       	ldd	r19, Y+11	; 0x0b
    24d6:	4c 85       	ldd	r20, Y+12	; 0x0c
    24d8:	5d 85       	ldd	r21, Y+13	; 0x0d
    24da:	8e 81       	ldd	r24, Y+6	; 0x06
    24dc:	9f 81       	ldd	r25, Y+7	; 0x07
    24de:	a8 85       	ldd	r26, Y+8	; 0x08
    24e0:	b9 85       	ldd	r27, Y+9	; 0x09
    24e2:	28 1b       	sub	r18, r24
    24e4:	39 0b       	sbc	r19, r25
    24e6:	4a 0b       	sbc	r20, r26
    24e8:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    24ea:	c5 01       	movw	r24, r10
    24ec:	a0 e0       	ldi	r26, 0x00	; 0
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	28 17       	cp	r18, r24
    24f2:	39 07       	cpc	r19, r25
    24f4:	4a 07       	cpc	r20, r26
    24f6:	5b 07       	cpc	r21, r27
    24f8:	08 f4       	brcc	.+2      	; 0x24fc <f_read+0x6c>
    24fa:	59 01       	movw	r10, r18
{
	FRESULT res;
	DWORD sect, remain;
	UINT rcnt, cc;
	CLUST clust;
	BYTE *rbuff = buff;
    24fc:	81 2f       	mov	r24, r17
    24fe:	90 2f       	mov	r25, r16
    2500:	9c 01       	movw	r18, r24
    2502:	49 01       	movw	r8, r18
			}
			fp->csect++;							/* Next sector address in the cluster */
		}
		sect = clust2sect(fp->curr_clust) + fp->csect - 1;	/* Get current sector */
		if (!move_window(sect)) goto fr_error;		/* Move sector window */
		rcnt = 512U - (fp->fptr % 512U);			/* Get partial sector from sector window */
    2504:	21 2c       	mov	r2, r1
    2506:	62 e0       	ldi	r22, 0x02	; 2
    2508:	36 2e       	mov	r3, r22
    250a:	f2 c0       	rjmp	.+484    	; 0x26f0 <f_read+0x260>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % 512U) == 0) {				/* On the sector boundary? */
    250c:	2e 81       	ldd	r18, Y+6	; 0x06
    250e:	3f 81       	ldd	r19, Y+7	; 0x07
    2510:	48 85       	ldd	r20, Y+8	; 0x08
    2512:	59 85       	ldd	r21, Y+9	; 0x09
    2514:	da 01       	movw	r26, r20
    2516:	c9 01       	movw	r24, r18
    2518:	91 70       	andi	r25, 0x01	; 1
    251a:	a0 70       	andi	r26, 0x00	; 0
    251c:	b0 70       	andi	r27, 0x00	; 0
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	a1 05       	cpc	r26, r1
    2522:	b1 05       	cpc	r27, r1
    2524:	09 f0       	breq	.+2      	; 0x2528 <f_read+0x98>
    2526:	78 c0       	rjmp	.+240    	; 0x2618 <f_read+0x188>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    2528:	ec 81       	ldd	r30, Y+4	; 0x04
    252a:	fd 81       	ldd	r31, Y+5	; 0x05
    252c:	9b 81       	ldd	r25, Y+3	; 0x03
    252e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2530:	98 17       	cp	r25, r24
    2532:	e0 f0       	brcs	.+56     	; 0x256c <f_read+0xdc>
				clust = (fp->fptr == 0) ?			/* On the top of the file? */
    2534:	21 15       	cp	r18, r1
    2536:	31 05       	cpc	r19, r1
    2538:	41 05       	cpc	r20, r1
    253a:	51 05       	cpc	r21, r1
    253c:	19 f4       	brne	.+6      	; 0x2544 <f_read+0xb4>
    253e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2540:	3f 85       	ldd	r19, Y+15	; 0x0f
    2542:	05 c0       	rjmp	.+10     	; 0x254e <f_read+0xbe>
    2544:	88 89       	ldd	r24, Y+16	; 0x10
    2546:	99 89       	ldd	r25, Y+17	; 0x11
    2548:	0e 94 33 0c 	call	0x1866	; 0x1866 <get_cluster>
    254c:	9c 01       	movw	r18, r24
					fp->org_clust : get_cluster(fp->curr_clust);
				if (clust < 2 || clust >= fp->fs->max_clust) goto fr_error;
    254e:	22 30       	cpi	r18, 0x02	; 2
    2550:	31 05       	cpc	r19, r1
    2552:	08 f4       	brcc	.+2      	; 0x2556 <f_read+0xc6>
    2554:	d2 c0       	rjmp	.+420    	; 0x26fa <f_read+0x26a>
    2556:	ec 81       	ldd	r30, Y+4	; 0x04
    2558:	fd 81       	ldd	r31, Y+5	; 0x05
    255a:	86 89       	ldd	r24, Z+22	; 0x16
    255c:	97 89       	ldd	r25, Z+23	; 0x17
    255e:	28 17       	cp	r18, r24
    2560:	39 07       	cpc	r19, r25
    2562:	08 f0       	brcs	.+2      	; 0x2566 <f_read+0xd6>
    2564:	ca c0       	rjmp	.+404    	; 0x26fa <f_read+0x26a>
				fp->curr_clust = clust;				/* Update current cluster */
    2566:	39 8b       	std	Y+17, r19	; 0x11
    2568:	28 8b       	std	Y+16, r18	; 0x10
				fp->csect = 0;						/* Reset sector address in the cluster */
    256a:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	CLUST clust		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    256c:	c0 90 1a 01 	lds	r12, 0x011A
    2570:	d0 90 1b 01 	lds	r13, 0x011B


	clust -= 2;
    2574:	68 89       	ldd	r22, Y+16	; 0x10
    2576:	79 89       	ldd	r23, Y+17	; 0x11
    2578:	62 50       	subi	r22, 0x02	; 2
    257a:	70 40       	sbci	r23, 0x00	; 0
	if (clust >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    257c:	f6 01       	movw	r30, r12
    257e:	86 89       	ldd	r24, Z+22	; 0x16
    2580:	97 89       	ldd	r25, Z+23	; 0x17
    2582:	02 97       	sbiw	r24, 0x02	; 2
    2584:	68 17       	cp	r22, r24
    2586:	79 07       	cpc	r23, r25
    2588:	20 f0       	brcs	.+8      	; 0x2592 <f_read+0x102>
    258a:	ee 24       	eor	r14, r14
    258c:	ff 24       	eor	r15, r15
    258e:	87 01       	movw	r16, r14
    2590:	14 c0       	rjmp	.+40     	; 0x25ba <f_read+0x12a>
	return (DWORD)clust * fs->csize + fs->database;
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	f6 01       	movw	r30, r12
    2598:	25 8d       	ldd	r18, Z+29	; 0x1d
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__mulsi3>
    25a4:	7b 01       	movw	r14, r22
    25a6:	8c 01       	movw	r16, r24
    25a8:	f6 01       	movw	r30, r12
    25aa:	80 89       	ldd	r24, Z+16	; 0x10
    25ac:	91 89       	ldd	r25, Z+17	; 0x11
    25ae:	a2 89       	ldd	r26, Z+18	; 0x12
    25b0:	b3 89       	ldd	r27, Z+19	; 0x13
    25b2:	e8 0e       	add	r14, r24
    25b4:	f9 1e       	adc	r15, r25
    25b6:	0a 1f       	adc	r16, r26
    25b8:	1b 1f       	adc	r17, r27
					fp->org_clust : get_cluster(fp->curr_clust);
				if (clust < 2 || clust >= fp->fs->max_clust) goto fr_error;
				fp->curr_clust = clust;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector address in the cluster */
			}
			sect = clust2sect(fp->curr_clust) + fp->csect;	/* Get current sector */
    25ba:	6b 81       	ldd	r22, Y+3	; 0x03
			cc = btr / 512U;						/* When remaining bytes >= sector size, */
    25bc:	65 01       	movw	r12, r10
    25be:	cd 2c       	mov	r12, r13
    25c0:	dd 24       	eor	r13, r13
    25c2:	c6 94       	lsr	r12
			if (cc) {								/* Read maximum contiguous sectors directly */
    25c4:	c1 14       	cp	r12, r1
    25c6:	d1 04       	cpc	r13, r1
    25c8:	29 f1       	breq	.+74     	; 0x2614 <f_read+0x184>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    25ca:	ec 81       	ldd	r30, Y+4	; 0x04
    25cc:	fd 81       	ldd	r31, Y+5	; 0x05
    25ce:	25 8d       	ldd	r18, Z+29	; 0x1d
    25d0:	46 2f       	mov	r20, r22
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	c6 01       	movw	r24, r12
    25d6:	84 0f       	add	r24, r20
    25d8:	95 1f       	adc	r25, r21
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	28 17       	cp	r18, r24
    25de:	39 07       	cpc	r19, r25
    25e0:	18 f4       	brcc	.+6      	; 0x25e8 <f_read+0x158>
					cc = fp->fs->csize - fp->csect;
    25e2:	69 01       	movw	r12, r18
    25e4:	c4 1a       	sub	r12, r20
    25e6:	d5 0a       	sbc	r13, r21
				if (disk_read(0, rbuff, sect, (BYTE)cc) != RES_OK)
    25e8:	e6 0e       	add	r14, r22
    25ea:	f1 1c       	adc	r15, r1
    25ec:	01 1d       	adc	r16, r1
    25ee:	11 1d       	adc	r17, r1
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	b4 01       	movw	r22, r8
    25f4:	a8 01       	movw	r20, r16
    25f6:	97 01       	movw	r18, r14
    25f8:	0c 2d       	mov	r16, r12
    25fa:	0e 94 37 1b 	call	0x366e	; 0x366e <disk_read>
    25fe:	89 2b       	or	r24, r25
    2600:	09 f0       	breq	.+2      	; 0x2604 <f_read+0x174>
    2602:	7b c0       	rjmp	.+246    	; 0x26fa <f_read+0x26a>
					goto fr_error;
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	8c 0d       	add	r24, r12
    2608:	8b 83       	std	Y+3, r24	; 0x03
				rcnt = 512U * cc;					/* Number of bytes transferred */
    260a:	86 01       	movw	r16, r12
    260c:	10 2f       	mov	r17, r16
    260e:	00 27       	eor	r16, r16
    2610:	11 0f       	add	r17, r17
    2612:	54 c0       	rjmp	.+168    	; 0x26bc <f_read+0x22c>
				continue;
			}
			fp->csect++;							/* Next sector address in the cluster */
    2614:	6f 5f       	subi	r22, 0xFF	; 255
    2616:	6b 83       	std	Y+3, r22	; 0x03
static
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	CLUST clust		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    2618:	00 91 1a 01 	lds	r16, 0x011A
    261c:	10 91 1b 01 	lds	r17, 0x011B


	clust -= 2;
    2620:	68 89       	ldd	r22, Y+16	; 0x10
    2622:	79 89       	ldd	r23, Y+17	; 0x11
    2624:	62 50       	subi	r22, 0x02	; 2
    2626:	70 40       	sbci	r23, 0x00	; 0
	if (clust >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2628:	f8 01       	movw	r30, r16
    262a:	86 89       	ldd	r24, Z+22	; 0x16
    262c:	97 89       	ldd	r25, Z+23	; 0x17
    262e:	02 97       	sbiw	r24, 0x02	; 2
    2630:	68 17       	cp	r22, r24
    2632:	79 07       	cpc	r23, r25
    2634:	28 f0       	brcs	.+10     	; 0x2640 <f_read+0x1b0>
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e0       	ldi	r20, 0x00	; 0
    263c:	50 e0       	ldi	r21, 0x00	; 0
    263e:	14 c0       	rjmp	.+40     	; 0x2668 <f_read+0x1d8>
	return (DWORD)clust * fs->csize + fs->database;
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	f8 01       	movw	r30, r16
    2646:	25 8d       	ldd	r18, Z+29	; 0x1d
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	50 e0       	ldi	r21, 0x00	; 0
    264e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__mulsi3>
    2652:	9b 01       	movw	r18, r22
    2654:	ac 01       	movw	r20, r24
    2656:	f8 01       	movw	r30, r16
    2658:	80 89       	ldd	r24, Z+16	; 0x10
    265a:	91 89       	ldd	r25, Z+17	; 0x11
    265c:	a2 89       	ldd	r26, Z+18	; 0x12
    265e:	b3 89       	ldd	r27, Z+19	; 0x13
    2660:	28 0f       	add	r18, r24
    2662:	39 1f       	adc	r19, r25
    2664:	4a 1f       	adc	r20, r26
    2666:	5b 1f       	adc	r21, r27
				continue;
			}
			fp->csect++;							/* Next sector address in the cluster */
		}
		sect = clust2sect(fp->curr_clust) + fp->csect - 1;	/* Get current sector */
		if (!move_window(sect)) goto fr_error;		/* Move sector window */
    2668:	6b 81       	ldd	r22, Y+3	; 0x03
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	61 50       	subi	r22, 0x01	; 1
    2672:	70 40       	sbci	r23, 0x00	; 0
    2674:	80 40       	sbci	r24, 0x00	; 0
    2676:	90 40       	sbci	r25, 0x00	; 0
    2678:	62 0f       	add	r22, r18
    267a:	73 1f       	adc	r23, r19
    267c:	84 1f       	adc	r24, r20
    267e:	95 1f       	adc	r25, r21
    2680:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    2684:	89 2b       	or	r24, r25
    2686:	c9 f1       	breq	.+114    	; 0x26fa <f_read+0x26a>
		rcnt = 512U - (fp->fptr % 512U);			/* Get partial sector from sector window */
    2688:	2e 81       	ldd	r18, Y+6	; 0x06
    268a:	3f 81       	ldd	r19, Y+7	; 0x07
    268c:	48 85       	ldd	r20, Y+8	; 0x08
    268e:	59 85       	ldd	r21, Y+9	; 0x09
    2690:	c9 01       	movw	r24, r18
    2692:	91 70       	andi	r25, 0x01	; 1
    2694:	b1 01       	movw	r22, r2
    2696:	68 1b       	sub	r22, r24
    2698:	79 0b       	sbc	r23, r25
    269a:	85 01       	movw	r16, r10
    269c:	6a 15       	cp	r22, r10
    269e:	7b 05       	cpc	r23, r11
    26a0:	08 f4       	brcc	.+2      	; 0x26a4 <f_read+0x214>
    26a2:	8b 01       	movw	r16, r22
		if (rcnt > btr) rcnt = btr;
		memcpy(rbuff, &fp->fs->win[fp->fptr % 512U], rcnt);
    26a4:	c9 01       	movw	r24, r18
    26a6:	91 70       	andi	r25, 0x01	; 1
    26a8:	80 96       	adiw	r24, 0x20	; 32
    26aa:	2c 81       	ldd	r18, Y+4	; 0x04
    26ac:	3d 81       	ldd	r19, Y+5	; 0x05
    26ae:	28 0f       	add	r18, r24
    26b0:	39 1f       	adc	r19, r25
    26b2:	c4 01       	movw	r24, r8
    26b4:	b9 01       	movw	r22, r18
    26b6:	a8 01       	movw	r20, r16
    26b8:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <memcpy>
	if (!(fp->flag & FA_READ)) return FR_DENIED;	/* Check access mode */
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    26bc:	80 0e       	add	r8, r16
    26be:	91 1e       	adc	r9, r17
    26c0:	c8 01       	movw	r24, r16
    26c2:	a0 e0       	ldi	r26, 0x00	; 0
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	2e 81       	ldd	r18, Y+6	; 0x06
    26c8:	3f 81       	ldd	r19, Y+7	; 0x07
    26ca:	48 85       	ldd	r20, Y+8	; 0x08
    26cc:	59 85       	ldd	r21, Y+9	; 0x09
    26ce:	28 0f       	add	r18, r24
    26d0:	39 1f       	adc	r19, r25
    26d2:	4a 1f       	adc	r20, r26
    26d4:	5b 1f       	adc	r21, r27
    26d6:	2e 83       	std	Y+6, r18	; 0x06
    26d8:	3f 83       	std	Y+7, r19	; 0x07
    26da:	48 87       	std	Y+8, r20	; 0x08
    26dc:	59 87       	std	Y+9, r21	; 0x09
    26de:	f2 01       	movw	r30, r4
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	80 0f       	add	r24, r16
    26e6:	91 1f       	adc	r25, r17
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	80 83       	st	Z, r24
    26ec:	a0 1a       	sub	r10, r16
    26ee:	b1 0a       	sbc	r11, r17
	if (fp->flag & FA__ERROR) return FR_RW_ERROR;	/* Check error flag */
	if (!(fp->flag & FA_READ)) return FR_DENIED;	/* Check access mode */
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    26f0:	a1 14       	cp	r10, r1
    26f2:	b1 04       	cpc	r11, r1
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <f_read+0x268>
    26f6:	0a cf       	rjmp	.-492    	; 0x250c <f_read+0x7c>
    26f8:	06 c0       	rjmp	.+12     	; 0x2706 <f_read+0x276>
	}

	return FR_OK;

fr_error:	/* Abort this file due to an unrecoverable error */
	fp->flag |= FA__ERROR;
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	80 68       	ori	r24, 0x80	; 128
    26fe:	8a 83       	std	Y+2, r24	; 0x02
    2700:	38 e0       	ldi	r19, 0x08	; 8
    2702:	63 2e       	mov	r6, r19
    2704:	71 2c       	mov	r7, r1
	return FR_RW_ERROR;
}
    2706:	c3 01       	movw	r24, r6
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	e2 e1       	ldi	r30, 0x12	; 18
    270e:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__epilogue_restores__>

00002712 <check_fs>:

static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record or error */
	DWORD sect	/* Sector# to check if it is an FAT boot record or not */
)
{
    2712:	0f 93       	push	r16
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    2718:	9b 01       	movw	r18, r22
    271a:	ac 01       	movw	r20, r24
	FATFS *fs = FatFs;
    271c:	c0 91 1a 01 	lds	r28, 0x011A
    2720:	d0 91 1b 01 	lds	r29, 0x011B

	if (disk_read(0, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    2724:	be 01       	movw	r22, r28
    2726:	60 5e       	subi	r22, 0xE0	; 224
    2728:	7f 4f       	sbci	r23, 0xFF	; 255
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	01 e0       	ldi	r16, 0x01	; 1
    272e:	0e 94 37 1b 	call	0x366e	; 0x366e <disk_read>
    2732:	89 2b       	or	r24, r25
    2734:	c1 f4       	brne	.+48     	; 0x2766 <check_fs+0x54>
		return 2;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature */
    2736:	c2 5e       	subi	r28, 0xE2	; 226
    2738:	dd 4f       	sbci	r29, 0xFD	; 253
    273a:	88 81       	ld	r24, Y
    273c:	99 81       	ldd	r25, Y+1	; 0x01
    273e:	ce 51       	subi	r28, 0x1E	; 30
    2740:	d2 40       	sbci	r29, 0x02	; 2
    2742:	85 55       	subi	r24, 0x55	; 85
    2744:	9a 4a       	sbci	r25, 0xAA	; 170
    2746:	79 f4       	brne	.+30     	; 0x2766 <check_fs+0x54>
		return 2;

	if (!memcmp(&fs->win[BS_FilSysType], "FAT", 3))	/* Check FAT signature */
    2748:	ce 01       	movw	r24, r28
    274a:	8a 5a       	subi	r24, 0xAA	; 170
    274c:	9f 4f       	sbci	r25, 0xFF	; 255
    274e:	6c e8       	ldi	r22, 0x8C	; 140
    2750:	70 e0       	ldi	r23, 0x00	; 0
    2752:	43 e0       	ldi	r20, 0x03	; 3
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <memcmp>
    275a:	9c 01       	movw	r18, r24
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	23 2b       	or	r18, r19
    2760:	19 f0       	breq	.+6      	; 0x2768 <check_fs+0x56>
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	01 c0       	rjmp	.+2      	; 0x2768 <check_fs+0x56>
    2766:	82 e0       	ldi	r24, 0x02	; 2
#if _FAT32
	if (!memcmp(&fs->win[BS_FilSysType32], "FAT32", 5) && !(fs->win[BPB_ExtFlags] & 0x80))
		return 0;
#endif
	return 1;
}
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	0f 91       	pop	r16
    276e:	08 95       	ret

00002770 <auto_mount>:
static
FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
	const char **path,	/* Pointer to pointer to the path name (drive number) */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    2770:	a0 e0       	ldi	r26, 0x00	; 0
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	ee eb       	ldi	r30, 0xBE	; 190
    2776:	f3 e1       	ldi	r31, 0x13	; 19
    2778:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__prologue_saves__+0x10>
    277c:	dc 01       	movw	r26, r24
    277e:	16 2f       	mov	r17, r22
	BYTE fmt;
	DSTATUS stat;
	DWORD bootsect, fatsize, totalsect, maxclust;
	const char *p = *path;
    2780:	ed 91       	ld	r30, X+
    2782:	fc 91       	ld	r31, X
    2784:	11 97       	sbiw	r26, 0x01	; 1
    2786:	01 c0       	rjmp	.+2      	; 0x278a <auto_mount+0x1a>
	FATFS *fs;


	while (*p == ' ') p++;	/* Strip leading spaces */
    2788:	31 96       	adiw	r30, 0x01	; 1
    278a:	80 81       	ld	r24, Z
    278c:	80 32       	cpi	r24, 0x20	; 32
    278e:	e1 f3       	breq	.-8      	; 0x2788 <auto_mount+0x18>
	if (*p == '/') p++;		/* Strip heading slash */
    2790:	8f 32       	cpi	r24, 0x2F	; 47
    2792:	09 f4       	brne	.+2      	; 0x2796 <auto_mount+0x26>
    2794:	31 96       	adiw	r30, 0x01	; 1
	*path = p;				/* Return pointer to the path name */
    2796:	ed 93       	st	X+, r30
    2798:	fc 93       	st	X, r31

	/* Is the file system object registered? */
	fs = FatFs;
    279a:	c0 91 1a 01 	lds	r28, 0x011A
    279e:	d0 91 1b 01 	lds	r29, 0x011B
	if (!fs) return FR_NOT_ENABLED;
    27a2:	20 97       	sbiw	r28, 0x00	; 0
    27a4:	19 f4       	brne	.+6      	; 0x27ac <auto_mount+0x3c>
    27a6:	2a e0       	ldi	r18, 0x0A	; 10
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	fb c0       	rjmp	.+502    	; 0x29a2 <auto_mount+0x232>

	if (fs->fs_type) {						/* If the logical drive has been mounted */
    27ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ae:	88 23       	and	r24, r24
    27b0:	59 f0       	breq	.+22     	; 0x27c8 <auto_mount+0x58>
		stat = disk_status(0);
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	0e 94 30 1b 	call	0x3660	; 0x3660 <disk_status>
		if (!(stat & STA_NOINIT)) {			/* and physical drive is kept initialized (has not been changed), */
    27b8:	80 fd       	sbrc	r24, 0
    27ba:	06 c0       	rjmp	.+12     	; 0x27c8 <auto_mount+0x58>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    27bc:	11 23       	and	r17, r17
    27be:	09 f4       	brne	.+2      	; 0x27c2 <auto_mount+0x52>
    27c0:	eb c0       	rjmp	.+470    	; 0x2998 <auto_mount+0x228>
    27c2:	82 fd       	sbrc	r24, 2
    27c4:	e6 c0       	rjmp	.+460    	; 0x2992 <auto_mount+0x222>
    27c6:	e8 c0       	rjmp	.+464    	; 0x2998 <auto_mount+0x228>
		}
	}

	/* The logical drive must be re-mounted. Following code attempts to mount the logical drive */

	memset(fs, 0, sizeof(FATFS));		/* Clean-up the file system object */
    27c8:	80 ea       	ldi	r24, 0xA0	; 160
    27ca:	fe 01       	movw	r30, r28
    27cc:	11 92       	st	Z+, r1
    27ce:	8a 95       	dec	r24
    27d0:	e9 f7       	brne	.-6      	; 0x27cc <auto_mount+0x5c>
	stat = disk_initialize(0);			/* Initialize low level disk I/O layer */
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    27d8:	80 ff       	sbrs	r24, 0
    27da:	03 c0       	rjmp	.+6      	; 0x27e2 <auto_mount+0x72>
    27dc:	21 e0       	ldi	r18, 0x01	; 1
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	e0 c0       	rjmp	.+448    	; 0x29a2 <auto_mount+0x232>
		return FR_NOT_READY;
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    27e2:	11 23       	and	r17, r17
    27e4:	11 f0       	breq	.+4      	; 0x27ea <auto_mount+0x7a>
    27e6:	82 fd       	sbrc	r24, 2
    27e8:	d4 c0       	rjmp	.+424    	; 0x2992 <auto_mount+0x222>
		return FR_WRITE_PROTECTED;
#endif

	/* Search FAT partition on the drive */
	fmt = check_fs(bootsect = 0);		/* Check sector 0 as an SFD format */
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	70 e0       	ldi	r23, 0x00	; 0
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 89 13 	call	0x2712	; 0x2712 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    27f6:	81 30       	cpi	r24, 0x01	; 1
    27f8:	21 f0       	breq	.+8      	; 0x2802 <auto_mount+0x92>
    27fa:	ee 24       	eor	r14, r14
    27fc:	ff 24       	eor	r15, r15
    27fe:	87 01       	movw	r16, r14
    2800:	14 c0       	rjmp	.+40     	; 0x282a <auto_mount+0xba>
		/* Check a partition listed in top of the partition table */
		if (fs->win[MBR_Table+4]) {						/* Is the 1st partition existing? */
    2802:	ce 51       	subi	r28, 0x1E	; 30
    2804:	de 4f       	sbci	r29, 0xFE	; 254
    2806:	88 81       	ld	r24, Y
    2808:	c2 5e       	subi	r28, 0xE2	; 226
    280a:	d1 40       	sbci	r29, 0x01	; 1
    280c:	88 23       	and	r24, r24
    280e:	09 f4       	brne	.+2      	; 0x2812 <auto_mount+0xa2>
    2810:	c6 c0       	rjmp	.+396    	; 0x299e <auto_mount+0x22e>
			bootsect = LD_DWORD(&fs->win[MBR_Table+8]);	/* Partition offset in LBA */
    2812:	ca 51       	subi	r28, 0x1A	; 26
    2814:	de 4f       	sbci	r29, 0xFE	; 254
    2816:	e8 80       	ld	r14, Y
    2818:	f9 80       	ldd	r15, Y+1	; 0x01
    281a:	0a 81       	ldd	r16, Y+2	; 0x02
    281c:	1b 81       	ldd	r17, Y+3	; 0x03
    281e:	c6 5e       	subi	r28, 0xE6	; 230
    2820:	d1 40       	sbci	r29, 0x01	; 1
			fmt = check_fs(bootsect);					/* Check the partition */
    2822:	c8 01       	movw	r24, r16
    2824:	b7 01       	movw	r22, r14
    2826:	0e 94 89 13 	call	0x2712	; 0x2712 <check_fs>
		}
	}
	if (fmt || LD_WORD(&fs->win[BPB_BytsPerSec]) != 512U)	/* No valid FAT patition is found */
    282a:	88 23       	and	r24, r24
    282c:	09 f0       	breq	.+2      	; 0x2830 <auto_mount+0xc0>
    282e:	b7 c0       	rjmp	.+366    	; 0x299e <auto_mount+0x22e>
    2830:	8b a5       	ldd	r24, Y+43	; 0x2b
    2832:	9c a5       	ldd	r25, Y+44	; 0x2c
    2834:	80 50       	subi	r24, 0x00	; 0
    2836:	92 40       	sbci	r25, 0x02	; 2
    2838:	09 f0       	breq	.+2      	; 0x283c <auto_mount+0xcc>
    283a:	b1 c0       	rjmp	.+354    	; 0x299e <auto_mount+0x22e>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fatsize = LD_WORD(&fs->win[BPB_FATSz16]);			/* Number of sectors per FAT */
    283c:	8e a9       	ldd	r24, Y+54	; 0x36
    283e:	9f a9       	ldd	r25, Y+55	; 0x37
    2840:	bc 01       	movw	r22, r24
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	90 e0       	ldi	r25, 0x00	; 0
	if (!fatsize) fatsize = LD_DWORD(&fs->win[BPB_FATSz32]);
    2846:	61 15       	cp	r22, r1
    2848:	71 05       	cpc	r23, r1
    284a:	81 05       	cpc	r24, r1
    284c:	91 05       	cpc	r25, r1
    284e:	41 f4       	brne	.+16     	; 0x2860 <auto_mount+0xf0>
    2850:	cc 5b       	subi	r28, 0xBC	; 188
    2852:	df 4f       	sbci	r29, 0xFF	; 255
    2854:	68 81       	ld	r22, Y
    2856:	79 81       	ldd	r23, Y+1	; 0x01
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	9b 81       	ldd	r25, Y+3	; 0x03
    285c:	c4 54       	subi	r28, 0x44	; 68
    285e:	d0 40       	sbci	r29, 0x00	; 0
	fs->sects_fat = (CLUST)fatsize;
    2860:	7d 8b       	std	Y+21, r23	; 0x15
    2862:	6c 8b       	std	Y+20, r22	; 0x14
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    2864:	28 a9       	ldd	r18, Y+48	; 0x30
    2866:	2e 8f       	std	Y+30, r18	; 0x1e
	fatsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	50 e0       	ldi	r21, 0x00	; 0
    286e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__mulsi3>
    2872:	5b 01       	movw	r10, r22
    2874:	6c 01       	movw	r12, r24
	fs->fatbase = bootsect + LD_WORD(&fs->win[BPB_RsvdSecCnt]);	/* FAT start sector (lba) */
    2876:	8e a5       	ldd	r24, Y+46	; 0x2e
    2878:	9f a5       	ldd	r25, Y+47	; 0x2f
    287a:	a0 e0       	ldi	r26, 0x00	; 0
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e8 0e       	add	r14, r24
    2880:	f9 1e       	adc	r15, r25
    2882:	0a 1f       	adc	r16, r26
    2884:	1b 1f       	adc	r17, r27
    2886:	e8 86       	std	Y+8, r14	; 0x08
    2888:	f9 86       	std	Y+9, r15	; 0x09
    288a:	0a 87       	std	Y+10, r16	; 0x0a
    288c:	1b 87       	std	Y+11, r17	; 0x0b
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    288e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2890:	8d 8f       	std	Y+29, r24	; 0x1d
	fs->n_rootdir = LD_WORD(&fs->win[BPB_RootEntCnt]);	/* Nmuber of root directory entries */
    2892:	29 a9       	ldd	r18, Y+49	; 0x31
    2894:	3a a9       	ldd	r19, Y+50	; 0x32
    2896:	3b 83       	std	Y+3, r19	; 0x03
    2898:	2a 83       	std	Y+2, r18	; 0x02
	totalsect = LD_WORD(&fs->win[BPB_TotSec16]);		/* Number of sectors on the file system */
    289a:	8b a9       	ldd	r24, Y+51	; 0x33
    289c:	9c a9       	ldd	r25, Y+52	; 0x34
    289e:	7c 01       	movw	r14, r24
    28a0:	00 e0       	ldi	r16, 0x00	; 0
    28a2:	10 e0       	ldi	r17, 0x00	; 0
	if (!totalsect) totalsect = LD_DWORD(&fs->win[BPB_TotSec32]);
    28a4:	e1 14       	cp	r14, r1
    28a6:	f1 04       	cpc	r15, r1
    28a8:	01 05       	cpc	r16, r1
    28aa:	11 05       	cpc	r17, r1
    28ac:	41 f4       	brne	.+16     	; 0x28be <auto_mount+0x14e>
    28ae:	c0 5c       	subi	r28, 0xC0	; 192
    28b0:	df 4f       	sbci	r29, 0xFF	; 255
    28b2:	e8 80       	ld	r14, Y
    28b4:	f9 80       	ldd	r15, Y+1	; 0x01
    28b6:	0a 81       	ldd	r16, Y+2	; 0x02
    28b8:	1b 81       	ldd	r17, Y+3	; 0x03
    28ba:	c0 54       	subi	r28, 0x40	; 64
    28bc:	d0 40       	sbci	r29, 0x00	; 0
	fs->max_clust = maxclust = (totalsect				/* max_clust = Last cluster# + 1 */
    28be:	8e a5       	ldd	r24, Y+46	; 0x2e
    28c0:	9f a5       	ldd	r25, Y+47	; 0x2f
    28c2:	a0 e0       	ldi	r26, 0x00	; 0
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e8 1a       	sub	r14, r24
    28c8:	f9 0a       	sbc	r15, r25
    28ca:	0a 0b       	sbc	r16, r26
    28cc:	1b 0b       	sbc	r17, r27
    28ce:	ea 18       	sub	r14, r10
    28d0:	fb 08       	sbc	r15, r11
    28d2:	0c 09       	sbc	r16, r12
    28d4:	1d 09       	sbc	r17, r13
    28d6:	f4 e0       	ldi	r31, 0x04	; 4
    28d8:	36 95       	lsr	r19
    28da:	27 95       	ror	r18
    28dc:	fa 95       	dec	r31
    28de:	e1 f7       	brne	.-8      	; 0x28d8 <auto_mount+0x168>
    28e0:	c9 01       	movw	r24, r18
    28e2:	a0 e0       	ldi	r26, 0x00	; 0
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	e8 1a       	sub	r14, r24
    28e8:	f9 0a       	sbc	r15, r25
    28ea:	0a 0b       	sbc	r16, r26
    28ec:	1b 0b       	sbc	r17, r27
    28ee:	2d 8d       	ldd	r18, Y+29	; 0x1d
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	50 e0       	ldi	r21, 0x00	; 0
    28f6:	c8 01       	movw	r24, r16
    28f8:	b7 01       	movw	r22, r14
    28fa:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <__udivmodsi4>
    28fe:	2e 5f       	subi	r18, 0xFE	; 254
    2900:	3f 4f       	sbci	r19, 0xFF	; 255
    2902:	4f 4f       	sbci	r20, 0xFF	; 255
    2904:	5f 4f       	sbci	r21, 0xFF	; 255
    2906:	3f 8b       	std	Y+23, r19	; 0x17
    2908:	2e 8b       	std	Y+22, r18	; 0x16
		- LD_WORD(&fs->win[BPB_RsvdSecCnt]) - fatsize - fs->n_rootdir / 16
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (maxclust >= 0xFF7) fmt = FS_FAT16;
    290a:	27 3f       	cpi	r18, 0xF7	; 247
    290c:	8f e0       	ldi	r24, 0x0F	; 15
    290e:	38 07       	cpc	r19, r24
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	48 07       	cpc	r20, r24
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	58 07       	cpc	r21, r24
    2918:	10 f4       	brcc	.+4      	; 0x291e <auto_mount+0x1ae>
    291a:	61 e0       	ldi	r22, 0x01	; 1
    291c:	06 c0       	rjmp	.+12     	; 0x292a <auto_mount+0x1ba>
	if (maxclust >= 0xFFF7)
    291e:	27 5f       	subi	r18, 0xF7	; 247
    2920:	3f 4f       	sbci	r19, 0xFF	; 255
    2922:	40 40       	sbci	r20, 0x00	; 0
    2924:	50 40       	sbci	r21, 0x00	; 0
    2926:	d8 f5       	brcc	.+118    	; 0x299e <auto_mount+0x22e>
    2928:	62 e0       	ldi	r22, 0x02	; 2
		fmt = FS_FAT32;
	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(&fs->win[BPB_RootClus]);	/* Root directory start cluster */
	else
#endif
		fs->dirbase = fs->fatbase + fatsize;			/* Root directory start sector (lba) */
    292a:	28 85       	ldd	r18, Y+8	; 0x08
    292c:	39 85       	ldd	r19, Y+9	; 0x09
    292e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2930:	5b 85       	ldd	r21, Y+11	; 0x0b
    2932:	d6 01       	movw	r26, r12
    2934:	c5 01       	movw	r24, r10
    2936:	82 0f       	add	r24, r18
    2938:	93 1f       	adc	r25, r19
    293a:	a4 1f       	adc	r26, r20
    293c:	b5 1f       	adc	r27, r21
    293e:	8c 87       	std	Y+12, r24	; 0x0c
    2940:	9d 87       	std	Y+13, r25	; 0x0d
    2942:	ae 87       	std	Y+14, r26	; 0x0e
    2944:	bf 87       	std	Y+15, r27	; 0x0f
	fs->database = fs->fatbase + fatsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	9b 81       	ldd	r25, Y+3	; 0x03
    294a:	e4 e0       	ldi	r30, 0x04	; 4
    294c:	96 95       	lsr	r25
    294e:	87 95       	ror	r24
    2950:	ea 95       	dec	r30
    2952:	e1 f7       	brne	.-8      	; 0x294c <auto_mount+0x1dc>
    2954:	a0 e0       	ldi	r26, 0x00	; 0
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	82 0f       	add	r24, r18
    295a:	93 1f       	adc	r25, r19
    295c:	a4 1f       	adc	r26, r20
    295e:	b5 1f       	adc	r27, r21
    2960:	8a 0d       	add	r24, r10
    2962:	9b 1d       	adc	r25, r11
    2964:	ac 1d       	adc	r26, r12
    2966:	bd 1d       	adc	r27, r13
    2968:	88 8b       	std	Y+16, r24	; 0x10
    296a:	99 8b       	std	Y+17, r25	; 0x11
    296c:	aa 8b       	std	Y+18, r26	; 0x12
    296e:	bb 8b       	std	Y+19, r27	; 0x13

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = (CLUST)0xFFFFFFFF;
    2970:	8f ef       	ldi	r24, 0xFF	; 255
    2972:	9f ef       	ldi	r25, 0xFF	; 255
    2974:	9b 8f       	std	Y+27, r25	; 0x1b
    2976:	8a 8f       	std	Y+26, r24	; 0x1a
		}
	}
#endif
#endif

	fs->fs_type = fmt;			/* FAT syb-type */
    2978:	6c 8f       	std	Y+28, r22	; 0x1c
	fs->id = ++fsid;			/* File system mount ID */
    297a:	80 91 1c 01 	lds	r24, 0x011C
    297e:	90 91 1d 01 	lds	r25, 0x011D
    2982:	01 96       	adiw	r24, 0x01	; 1
    2984:	90 93 1d 01 	sts	0x011D, r25
    2988:	80 93 1c 01 	sts	0x011C, r24
    298c:	99 83       	std	Y+1, r25	; 0x01
    298e:	88 83       	st	Y, r24
    2990:	03 c0       	rjmp	.+6      	; 0x2998 <auto_mount+0x228>
	return FR_OK;
    2992:	29 e0       	ldi	r18, 0x09	; 9
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	05 c0       	rjmp	.+10     	; 0x29a2 <auto_mount+0x232>
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <auto_mount+0x232>
    299e:	2b e0       	ldi	r18, 0x0B	; 11
    29a0:	30 e0       	ldi	r19, 0x00	; 0
}
    29a2:	c9 01       	movw	r24, r18
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	ea e0       	ldi	r30, 0x0A	; 10
    29aa:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__epilogue_restores__+0x10>

000029ae <f_getfree>:
FRESULT f_getfree (
	const char *drv,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclust,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    29ae:	a6 e0       	ldi	r26, 0x06	; 6
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	ed ed       	ldi	r30, 0xDD	; 221
    29b4:	f4 e1       	ldi	r31, 0x14	; 20
    29b6:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__prologue_saves__>
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01
    29be:	7e 83       	std	Y+6, r23	; 0x06
    29c0:	6d 83       	std	Y+5, r22	; 0x05
    29c2:	8a 01       	movw	r16, r20
	CLUST clust;
	BYTE fat, f, *p;


	/* Get drive number */
	res = auto_mount(&drv, 0);
    29c4:	ce 01       	movw	r24, r28
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	0e 94 b8 13 	call	0x2770	; 0x2770 <auto_mount>
    29ce:	1c 01       	movw	r2, r24
	if (res != FR_OK) return res;
    29d0:	00 97       	sbiw	r24, 0x00	; 0
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <f_getfree+0x28>
    29d4:	75 c0       	rjmp	.+234    	; 0x2ac0 <f_getfree+0x112>
	*fatfs = fs = FatFs;
    29d6:	80 90 1a 01 	lds	r8, 0x011A
    29da:	90 90 1b 01 	lds	r9, 0x011B
    29de:	f8 01       	movw	r30, r16
    29e0:	91 82       	std	Z+1, r9	; 0x01
    29e2:	80 82       	st	Z, r8

	/* If number of free cluster is valid, return it without cluster scan. */
	if (fs->free_clust <= fs->max_clust - 2) {
    29e4:	f4 01       	movw	r30, r8
    29e6:	22 8d       	ldd	r18, Z+26	; 0x1a
    29e8:	33 8d       	ldd	r19, Z+27	; 0x1b
    29ea:	46 88       	ldd	r4, Z+22	; 0x16
    29ec:	57 88       	ldd	r5, Z+23	; 0x17
    29ee:	c2 01       	movw	r24, r4
    29f0:	02 97       	sbiw	r24, 0x02	; 2
    29f2:	82 17       	cp	r24, r18
    29f4:	93 07       	cpc	r25, r19
    29f6:	50 f0       	brcs	.+20     	; 0x2a0c <f_getfree+0x5e>
		*nclust = fs->free_clust;
    29f8:	c9 01       	movw	r24, r18
    29fa:	a0 e0       	ldi	r26, 0x00	; 0
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	ed 81       	ldd	r30, Y+5	; 0x05
    2a00:	fe 81       	ldd	r31, Y+6	; 0x06
    2a02:	80 83       	st	Z, r24
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	a2 83       	std	Z+2, r26	; 0x02
    2a08:	b3 83       	std	Z+3, r27	; 0x03
    2a0a:	5a c0       	rjmp	.+180    	; 0x2ac0 <f_getfree+0x112>
	}

	/* Get number of free clusters */
	fat = fs->fs_type;
	n = 0;
	if (fat == FS_FAT12) {
    2a0c:	f4 01       	movw	r30, r8
    2a0e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a10:	81 30       	cpi	r24, 0x01	; 1
    2a12:	d1 f4       	brne	.+52     	; 0x2a48 <f_getfree+0x9a>
    2a14:	ee 24       	eor	r14, r14
    2a16:	ff 24       	eor	r15, r15
    2a18:	87 01       	movw	r16, r14
    2a1a:	b2 e0       	ldi	r27, 0x02	; 2
    2a1c:	cb 2e       	mov	r12, r27
    2a1e:	d1 2c       	mov	r13, r1
		clust = 2;
		do {
			if ((WORD)get_cluster(clust) == 0) n++;
    2a20:	c6 01       	movw	r24, r12
    2a22:	0e 94 33 0c 	call	0x1866	; 0x1866 <get_cluster>
    2a26:	89 2b       	or	r24, r25
    2a28:	29 f4       	brne	.+10     	; 0x2a34 <f_getfree+0x86>
    2a2a:	08 94       	sec
    2a2c:	e1 1c       	adc	r14, r1
    2a2e:	f1 1c       	adc	r15, r1
    2a30:	01 1d       	adc	r16, r1
    2a32:	11 1d       	adc	r17, r1
		} while (++clust < fs->max_clust);
    2a34:	08 94       	sec
    2a36:	c1 1c       	adc	r12, r1
    2a38:	d1 1c       	adc	r13, r1
    2a3a:	f4 01       	movw	r30, r8
    2a3c:	86 89       	ldd	r24, Z+22	; 0x16
    2a3e:	97 89       	ldd	r25, Z+23	; 0x17
    2a40:	c8 16       	cp	r12, r24
    2a42:	d9 06       	cpc	r13, r25
    2a44:	68 f3       	brcs	.-38     	; 0x2a20 <f_getfree+0x72>
    2a46:	33 c0       	rjmp	.+102    	; 0x2aae <f_getfree+0x100>
	} else {
		clust = fs->max_clust;
		sect = fs->fatbase;
    2a48:	f4 01       	movw	r30, r8
    2a4a:	a0 84       	ldd	r10, Z+8	; 0x08
    2a4c:	b1 84       	ldd	r11, Z+9	; 0x09
    2a4e:	c2 84       	ldd	r12, Z+10	; 0x0a
    2a50:	d3 84       	ldd	r13, Z+11	; 0x0b
		f = 0; p = 0;
		do {
			if (!f) {
				if (!move_window(sect++)) return FR_RW_ERROR;
				p = fs->win;
    2a52:	c4 01       	movw	r24, r8
    2a54:	80 96       	adiw	r24, 0x20	; 32
    2a56:	9c 83       	std	Y+4, r25	; 0x04
    2a58:	8b 83       	std	Y+3, r24	; 0x03
    2a5a:	32 01       	movw	r6, r4
    2a5c:	ee 24       	eor	r14, r14
    2a5e:	ff 24       	eor	r15, r15
    2a60:	87 01       	movw	r16, r14
    2a62:	e0 e0       	ldi	r30, 0x00	; 0
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
	} else {
		clust = fs->max_clust;
		sect = fs->fatbase;
		f = 0; p = 0;
		do {
			if (!f) {
    2a66:	46 14       	cp	r4, r6
    2a68:	89 f4       	brne	.+34     	; 0x2a8c <f_getfree+0xde>
				if (!move_window(sect++)) return FR_RW_ERROR;
    2a6a:	c6 01       	movw	r24, r12
    2a6c:	b5 01       	movw	r22, r10
    2a6e:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    2a72:	89 2b       	or	r24, r25
    2a74:	21 f4       	brne	.+8      	; 0x2a7e <f_getfree+0xd0>
    2a76:	a8 e0       	ldi	r26, 0x08	; 8
    2a78:	2a 2e       	mov	r2, r26
    2a7a:	31 2c       	mov	r3, r1
    2a7c:	21 c0       	rjmp	.+66     	; 0x2ac0 <f_getfree+0x112>
    2a7e:	08 94       	sec
    2a80:	a1 1c       	adc	r10, r1
    2a82:	b1 1c       	adc	r11, r1
    2a84:	c1 1c       	adc	r12, r1
    2a86:	d1 1c       	adc	r13, r1
    2a88:	eb 81       	ldd	r30, Y+3	; 0x03
    2a8a:	fc 81       	ldd	r31, Y+4	; 0x04
				p = fs->win;
			}
			if (!_FAT32 || fat == FS_FAT16) {
				if (LD_WORD(p) == 0) n++;
    2a8c:	80 81       	ld	r24, Z
    2a8e:	91 81       	ldd	r25, Z+1	; 0x01
    2a90:	89 2b       	or	r24, r25
    2a92:	29 f4       	brne	.+10     	; 0x2a9e <f_getfree+0xf0>
    2a94:	08 94       	sec
    2a96:	e1 1c       	adc	r14, r1
    2a98:	f1 1c       	adc	r15, r1
    2a9a:	01 1d       	adc	r16, r1
    2a9c:	11 1d       	adc	r17, r1
				p += 2; f += 1;
			} else {
				if (LD_DWORD(p) == 0) n++;
				p += 4; f += 2;
			}
		} while (--clust);
    2a9e:	08 94       	sec
    2aa0:	61 08       	sbc	r6, r1
    2aa2:	71 08       	sbc	r7, r1
    2aa4:	61 14       	cp	r6, r1
    2aa6:	71 04       	cpc	r7, r1
    2aa8:	11 f0       	breq	.+4      	; 0x2aae <f_getfree+0x100>
				if (!move_window(sect++)) return FR_RW_ERROR;
				p = fs->win;
			}
			if (!_FAT32 || fat == FS_FAT16) {
				if (LD_WORD(p) == 0) n++;
				p += 2; f += 1;
    2aaa:	32 96       	adiw	r30, 0x02	; 2
    2aac:	dc cf       	rjmp	.-72     	; 0x2a66 <f_getfree+0xb8>
				if (LD_DWORD(p) == 0) n++;
				p += 4; f += 2;
			}
		} while (--clust);
	}
	fs->free_clust = n;
    2aae:	f4 01       	movw	r30, r8
    2ab0:	f3 8e       	std	Z+27, r15	; 0x1b
    2ab2:	e2 8e       	std	Z+26, r14	; 0x1a
#if _USE_FSINFO
	if (fat == FS_FAT32) fs->fsi_flag = 1;
#endif

	*nclust = n;
    2ab4:	ed 81       	ldd	r30, Y+5	; 0x05
    2ab6:	fe 81       	ldd	r31, Y+6	; 0x06
    2ab8:	e0 82       	st	Z, r14
    2aba:	f1 82       	std	Z+1, r15	; 0x01
    2abc:	02 83       	std	Z+2, r16	; 0x02
    2abe:	13 83       	std	Z+3, r17	; 0x03
	return FR_OK;
}
    2ac0:	c1 01       	movw	r24, r2
    2ac2:	26 96       	adiw	r28, 0x06	; 6
    2ac4:	e2 e1       	ldi	r30, 0x12	; 18
    2ac6:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__epilogue_restores__>

00002aca <trace_path>:
	DIR *dj,			/* Pointer to directory object to return last directory */
	char *fn,			/* Pointer to last segment name to return */
	const char *path,	/* Full-path string to trace a file or directory */
	BYTE **dir			/* Pointer to pointer to found entry to retutn */
)
{
    2aca:	a0 e0       	ldi	r26, 0x00	; 0
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	eb e6       	ldi	r30, 0x6B	; 107
    2ad0:	f5 e1       	ldi	r31, 0x15	; 21
    2ad2:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__prologue_saves__+0x4>
    2ad6:	7c 01       	movw	r14, r24
    2ad8:	5b 01       	movw	r10, r22
    2ada:	4a 01       	movw	r8, r20
    2adc:	39 01       	movw	r6, r18
	CLUST clust;
	char ds;
	BYTE *dptr = NULL;
	FATFS *fs = FatFs;
    2ade:	c0 90 1a 01 	lds	r12, 0x011A
    2ae2:	d0 90 1b 01 	lds	r13, 0x011B

	/* Initialize directory object */
	dj->fs = fs;
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	d5 82       	std	Z+5, r13	; 0x05
    2aea:	c4 82       	std	Z+4, r12	; 0x04
	clust = fs->dirbase;
    2aec:	f6 01       	movw	r30, r12
    2aee:	84 85       	ldd	r24, Z+12	; 0x0c
    2af0:	95 85       	ldd	r25, Z+13	; 0x0d
		dj->clust = dj->sclust = clust;
		dj->sect = clust2sect(clust);
	} else
#endif
	{
		dj->clust = dj->sclust = 0;
    2af2:	f7 01       	movw	r30, r14
    2af4:	17 82       	std	Z+7, r1	; 0x07
    2af6:	16 82       	std	Z+6, r1	; 0x06
    2af8:	11 86       	std	Z+9, r1	; 0x09
    2afa:	10 86       	std	Z+8, r1	; 0x08
		dj->sect = clust;
    2afc:	a0 e0       	ldi	r26, 0x00	; 0
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	82 87       	std	Z+10, r24	; 0x0a
    2b02:	93 87       	std	Z+11, r25	; 0x0b
    2b04:	a4 87       	std	Z+12, r26	; 0x0c
    2b06:	b5 87       	std	Z+13, r27	; 0x0d
	}
	dj->index = 0;
    2b08:	13 82       	std	Z+3, r1	; 0x03
    2b0a:	12 82       	std	Z+2, r1	; 0x02

	if (*path == '\0') {							/* Null path means the root directory */
    2b0c:	fa 01       	movw	r30, r20
    2b0e:	80 81       	ld	r24, Z
    2b10:	88 23       	and	r24, r24
    2b12:	21 f4       	brne	.+8      	; 0x2b1c <trace_path+0x52>
		*dir = NULL; return FR_OK;
    2b14:	f9 01       	movw	r30, r18
    2b16:	11 82       	std	Z+1, r1	; 0x01
    2b18:	10 82       	st	Z, r1
    2b1a:	8a c0       	rjmp	.+276    	; 0x2c30 <trace_path+0x166>
			((DWORD)LD_WORD(&dptr[DIR_FstClusHI]) << 16) |
#endif
			LD_WORD(&dptr[DIR_FstClusLO]);
		dj->clust = dj->sclust = clust;				/* Restart scannig with the new directory */
		dj->sect = clust2sect(clust);
		dj->index = 2;
    2b1c:	32 e0       	ldi	r19, 0x02	; 2
    2b1e:	43 2e       	mov	r4, r19
    2b20:	51 2c       	mov	r5, r1
)
{
	BYTE n, t, c, a, b;


	memset(dirname, ' ', 8+3);	/* Fill buffer with spaces */
    2b22:	c5 01       	movw	r24, r10
    2b24:	60 e2       	ldi	r22, 0x20	; 32
    2b26:	70 e0       	ldi	r23, 0x00	; 0
    2b28:	4b e0       	ldi	r20, 0x0B	; 11
    2b2a:	50 e0       	ldi	r21, 0x00	; 0
    2b2c:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <memset>
    2b30:	28 e0       	ldi	r18, 0x08	; 8
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <trace_path+0x70>
    2b36:	2b e0       	ldi	r18, 0x0B	; 11
    2b38:	98 e0       	ldi	r25, 0x08	; 8
	a = 0; b = 0x18;	/* NT flag */
	n = 0; t = 8;
	for (;;) {
		c = *(*path)++;
    2b3a:	f4 01       	movw	r30, r8
    2b3c:	11 91       	ld	r17, Z+
    2b3e:	4f 01       	movw	r8, r30
		if (c == '\0' || c == '/') {		/* Reached to end of str or directory separator */
    2b40:	11 23       	and	r17, r17
    2b42:	11 f0       	breq	.+4      	; 0x2b48 <trace_path+0x7e>
    2b44:	1f 32       	cpi	r17, 0x2F	; 47
    2b46:	41 f4       	brne	.+16     	; 0x2b58 <trace_path+0x8e>
			if (n == 0) break;
    2b48:	99 23       	and	r25, r25
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <trace_path+0x84>
    2b4c:	a9 c0       	rjmp	.+338    	; 0x2ca0 <trace_path+0x1d6>
			dirname[11] = _USE_NTFLAG ? (a & b) : 0;
    2b4e:	f5 01       	movw	r30, r10
    2b50:	13 86       	std	Z+11, r1	; 0x0b
		*dir = NULL; return FR_OK;
	}

	for (;;) {
		ds = make_dirfile(&path, fn);					/* Get a paragraph into fn[] */
		if (ds == 1) return FR_INVALID_NAME;
    2b52:	11 30       	cpi	r17, 0x01	; 1
    2b54:	89 f5       	brne	.+98     	; 0x2bb8 <trace_path+0xee>
    2b56:	a4 c0       	rjmp	.+328    	; 0x2ca0 <trace_path+0x1d6>
		if (c == '\0' || c == '/') {		/* Reached to end of str or directory separator */
			if (n == 0) break;
			dirname[11] = _USE_NTFLAG ? (a & b) : 0;
			return c;
		}
		if (c <= ' ' || c == 0x7F) break;		/* Reject invisible chars */
    2b58:	11 32       	cpi	r17, 0x21	; 33
    2b5a:	08 f4       	brcc	.+2      	; 0x2b5e <trace_path+0x94>
    2b5c:	a1 c0       	rjmp	.+322    	; 0x2ca0 <trace_path+0x1d6>
    2b5e:	1f 37       	cpi	r17, 0x7F	; 127
    2b60:	09 f4       	brne	.+2      	; 0x2b64 <trace_path+0x9a>
    2b62:	9e c0       	rjmp	.+316    	; 0x2ca0 <trace_path+0x1d6>
		if (c == '.') {
    2b64:	1e 32       	cpi	r17, 0x2E	; 46
    2b66:	31 f4       	brne	.+12     	; 0x2b74 <trace_path+0xaa>
			if (!(a & 1) && n >= 1 && n <= 8) {	/* Enter extension part */
    2b68:	99 23       	and	r25, r25
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <trace_path+0xa4>
    2b6c:	99 c0       	rjmp	.+306    	; 0x2ca0 <trace_path+0x1d6>
    2b6e:	99 30       	cpi	r25, 0x09	; 9
    2b70:	10 f3       	brcs	.-60     	; 0x2b36 <trace_path+0x6c>
    2b72:	96 c0       	rjmp	.+300    	; 0x2ca0 <trace_path+0x1d6>
		    (c >= 0xE0 && c <= 0xFC))) {
			if (n == 0 && c == 0xE5)		/* Change heading \xE5 to \x05 */
				c = 0x05;
			a ^= 1; goto md_l2;
		}
		if (c == '"') break;				/* Reject " */
    2b74:	12 32       	cpi	r17, 0x22	; 34
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <trace_path+0xb0>
    2b78:	93 c0       	rjmp	.+294    	; 0x2ca0 <trace_path+0x1d6>
		if (c <= ')') goto md_l1;			/* Accept ! # $ % & ' ( ) */
    2b7a:	1a 32       	cpi	r17, 0x2A	; 42
    2b7c:	a0 f0       	brcs	.+40     	; 0x2ba6 <trace_path+0xdc>
		if (c <= ',') break;				/* Reject * + , */
    2b7e:	1d 32       	cpi	r17, 0x2D	; 45
    2b80:	08 f4       	brcc	.+2      	; 0x2b84 <trace_path+0xba>
    2b82:	8e c0       	rjmp	.+284    	; 0x2ca0 <trace_path+0x1d6>
		if (c <= '9') goto md_l1;			/* Accept - 0-9 */
    2b84:	1a 33       	cpi	r17, 0x3A	; 58
    2b86:	78 f0       	brcs	.+30     	; 0x2ba6 <trace_path+0xdc>
		if (c <= '?') break;				/* Reject : ; < = > ? */
    2b88:	10 34       	cpi	r17, 0x40	; 64
    2b8a:	08 f4       	brcc	.+2      	; 0x2b8e <trace_path+0xc4>
    2b8c:	89 c0       	rjmp	.+274    	; 0x2ca0 <trace_path+0x1d6>
		if (!(a & 1)) {	/* These checks are not applied to S-JIS 2nd byte */
			if (c == '|') break;			/* Reject | */
    2b8e:	1c 37       	cpi	r17, 0x7C	; 124
    2b90:	09 f4       	brne	.+2      	; 0x2b94 <trace_path+0xca>
    2b92:	86 c0       	rjmp	.+268    	; 0x2ca0 <trace_path+0x1d6>
			if (c >= '[' && c <= ']') break;/* Reject [ \ ] */
    2b94:	81 2f       	mov	r24, r17
    2b96:	8b 55       	subi	r24, 0x5B	; 91
    2b98:	83 30       	cpi	r24, 0x03	; 3
    2b9a:	08 f4       	brcc	.+2      	; 0x2b9e <trace_path+0xd4>
    2b9c:	81 c0       	rjmp	.+258    	; 0x2ca0 <trace_path+0x1d6>
			if (_USE_NTFLAG && c >= 'A' && c <= 'Z')
				(t == 8) ? (b &= 0xF7) : (b &= 0xEF);
			if (c >= 'a' && c <= 'z') {		/* Convert to upper case */
    2b9e:	86 50       	subi	r24, 0x06	; 6
    2ba0:	8a 31       	cpi	r24, 0x1A	; 26
    2ba2:	08 f4       	brcc	.+2      	; 0x2ba6 <trace_path+0xdc>
				c -= 0x20;
    2ba4:	10 52       	subi	r17, 0x20	; 32
			}
		}
	md_l1:
		a &= 0xFE;
	md_l2:
		if (n >= t) break;
    2ba6:	92 17       	cp	r25, r18
    2ba8:	08 f0       	brcs	.+2      	; 0x2bac <trace_path+0xe2>
    2baa:	7a c0       	rjmp	.+244    	; 0x2ca0 <trace_path+0x1d6>
		dirname[n++] = c;
    2bac:	f5 01       	movw	r30, r10
    2bae:	e9 0f       	add	r30, r25
    2bb0:	f1 1d       	adc	r31, r1
    2bb2:	10 83       	st	Z, r17
    2bb4:	9f 5f       	subi	r25, 0xFF	; 255
    2bb6:	c1 cf       	rjmp	.-126    	; 0x2b3a <trace_path+0x70>

	for (;;) {
		ds = make_dirfile(&path, fn);					/* Get a paragraph into fn[] */
		if (ds == 1) return FR_INVALID_NAME;
		for (;;) {
			if (!move_window(dj->sect)) return FR_RW_ERROR;
    2bb8:	f7 01       	movw	r30, r14
    2bba:	62 85       	ldd	r22, Z+10	; 0x0a
    2bbc:	73 85       	ldd	r23, Z+11	; 0x0b
    2bbe:	84 85       	ldd	r24, Z+12	; 0x0c
    2bc0:	95 85       	ldd	r25, Z+13	; 0x0d
    2bc2:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    2bc6:	89 2b       	or	r24, r25
    2bc8:	19 f4       	brne	.+6      	; 0x2bd0 <trace_path+0x106>
    2bca:	28 e0       	ldi	r18, 0x08	; 8
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	70 c0       	rjmp	.+224    	; 0x2cb0 <trace_path+0x1e6>
			dptr = &fs->win[(dj->index & 15) * 32];		/* Pointer to the directory entry */
    2bd0:	f7 01       	movw	r30, r14
    2bd2:	82 81       	ldd	r24, Z+2	; 0x02
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	8f 70       	andi	r24, 0x0F	; 15
    2bd8:	90 70       	andi	r25, 0x00	; 0
    2bda:	25 e0       	ldi	r18, 0x05	; 5
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	2a 95       	dec	r18
    2be2:	e1 f7       	brne	.-8      	; 0x2bdc <trace_path+0x112>
			if (dptr[DIR_Name] == 0)					/* Has it reached to end of dir? */
    2be4:	f6 01       	movw	r30, r12
    2be6:	e8 0f       	add	r30, r24
    2be8:	f9 1f       	adc	r31, r25
    2bea:	20 a1       	ldd	r18, Z+32	; 0x20
    2bec:	22 23       	and	r18, r18
    2bee:	b9 f0       	breq	.+46     	; 0x2c1e <trace_path+0x154>
				return !ds ? FR_NO_FILE : FR_NO_PATH;
			if (dptr[DIR_Name] != 0xE5					/* Matched? */
    2bf0:	25 3e       	cpi	r18, 0xE5	; 229
    2bf2:	81 f0       	breq	.+32     	; 0x2c14 <trace_path+0x14a>
	for (;;) {
		ds = make_dirfile(&path, fn);					/* Get a paragraph into fn[] */
		if (ds == 1) return FR_INVALID_NAME;
		for (;;) {
			if (!move_window(dj->sect)) return FR_RW_ERROR;
			dptr = &fs->win[(dj->index & 15) * 32];		/* Pointer to the directory entry */
    2bf4:	ec 01       	movw	r28, r24
    2bf6:	a0 96       	adiw	r28, 0x20	; 32
    2bf8:	cc 0d       	add	r28, r12
    2bfa:	dd 1d       	adc	r29, r13
			if (dptr[DIR_Name] == 0)					/* Has it reached to end of dir? */
				return !ds ? FR_NO_FILE : FR_NO_PATH;
			if (dptr[DIR_Name] != 0xE5					/* Matched? */
    2bfc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bfe:	08 2f       	mov	r16, r24
    2c00:	83 fd       	sbrc	r24, 3
    2c02:	08 c0       	rjmp	.+16     	; 0x2c14 <trace_path+0x14a>
    2c04:	ce 01       	movw	r24, r28
    2c06:	b5 01       	movw	r22, r10
    2c08:	4b e0       	ldi	r20, 0x0B	; 11
    2c0a:	50 e0       	ldi	r21, 0x00	; 0
    2c0c:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <memcmp>
    2c10:	00 97       	sbiw	r24, 0x00	; 0
    2c12:	49 f0       	breq	.+18     	; 0x2c26 <trace_path+0x15c>
				&& !(dptr[DIR_Attr] & AM_VOL)
				&& !memcmp(&dptr[DIR_Name], fn, 8+3) ) break;
			if (!next_dir_entry(dj))					/* Next directory pointer */
    2c14:	c7 01       	movw	r24, r14
    2c16:	0e 94 b8 0c 	call	0x1970	; 0x1970 <next_dir_entry>
    2c1a:	89 2b       	or	r24, r25
    2c1c:	69 f6       	brne	.-102    	; 0x2bb8 <trace_path+0xee>
				return !ds ? FR_NO_FILE : FR_NO_PATH;
    2c1e:	11 23       	and	r17, r17
    2c20:	09 f0       	breq	.+2      	; 0x2c24 <trace_path+0x15a>
    2c22:	41 c0       	rjmp	.+130    	; 0x2ca6 <trace_path+0x1dc>
    2c24:	43 c0       	rjmp	.+134    	; 0x2cac <trace_path+0x1e2>
		}
		if (!ds) { *dir = dptr; return FR_OK; }			/* Matched with end of path */
    2c26:	11 23       	and	r17, r17
    2c28:	31 f4       	brne	.+12     	; 0x2c36 <trace_path+0x16c>
    2c2a:	f3 01       	movw	r30, r6
    2c2c:	d1 83       	std	Z+1, r29	; 0x01
    2c2e:	c0 83       	st	Z, r28
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	3d c0       	rjmp	.+122    	; 0x2cb0 <trace_path+0x1e6>
		if (!(dptr[DIR_Attr] & AM_DIR)) return FR_NO_PATH;	/* Cannot trace because it is a file */
    2c36:	04 ff       	sbrs	r16, 4
    2c38:	36 c0       	rjmp	.+108    	; 0x2ca6 <trace_path+0x1dc>
		clust =											/* Get cluster# of the directory */
    2c3a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c3c:	9b 8d       	ldd	r25, Y+27	; 0x1b
#if _FAT32
			((DWORD)LD_WORD(&dptr[DIR_FstClusHI]) << 16) |
#endif
			LD_WORD(&dptr[DIR_FstClusLO]);
		dj->clust = dj->sclust = clust;				/* Restart scannig with the new directory */
    2c3e:	f7 01       	movw	r30, r14
    2c40:	97 83       	std	Z+7, r25	; 0x07
    2c42:	86 83       	std	Z+6, r24	; 0x06
    2c44:	91 87       	std	Z+9, r25	; 0x09
    2c46:	80 87       	std	Z+8, r24	; 0x08
static
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	CLUST clust		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    2c48:	c0 91 1a 01 	lds	r28, 0x011A
    2c4c:	d0 91 1b 01 	lds	r29, 0x011B


	clust -= 2;
    2c50:	bc 01       	movw	r22, r24
    2c52:	62 50       	subi	r22, 0x02	; 2
    2c54:	70 40       	sbci	r23, 0x00	; 0
	if (clust >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2c56:	8e 89       	ldd	r24, Y+22	; 0x16
    2c58:	9f 89       	ldd	r25, Y+23	; 0x17
    2c5a:	02 97       	sbiw	r24, 0x02	; 2
    2c5c:	68 17       	cp	r22, r24
    2c5e:	79 07       	cpc	r23, r25
    2c60:	28 f0       	brcs	.+10     	; 0x2c6c <trace_path+0x1a2>
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e0       	ldi	r20, 0x00	; 0
    2c68:	50 e0       	ldi	r21, 0x00	; 0
    2c6a:	12 c0       	rjmp	.+36     	; 0x2c90 <trace_path+0x1c6>
	return (DWORD)clust * fs->csize + fs->database;
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	50 e0       	ldi	r21, 0x00	; 0
    2c78:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__mulsi3>
    2c7c:	9b 01       	movw	r18, r22
    2c7e:	ac 01       	movw	r20, r24
    2c80:	88 89       	ldd	r24, Y+16	; 0x10
    2c82:	99 89       	ldd	r25, Y+17	; 0x11
    2c84:	aa 89       	ldd	r26, Y+18	; 0x12
    2c86:	bb 89       	ldd	r27, Y+19	; 0x13
    2c88:	28 0f       	add	r18, r24
    2c8a:	39 1f       	adc	r19, r25
    2c8c:	4a 1f       	adc	r20, r26
    2c8e:	5b 1f       	adc	r21, r27
#if _FAT32
			((DWORD)LD_WORD(&dptr[DIR_FstClusHI]) << 16) |
#endif
			LD_WORD(&dptr[DIR_FstClusLO]);
		dj->clust = dj->sclust = clust;				/* Restart scannig with the new directory */
		dj->sect = clust2sect(clust);
    2c90:	f7 01       	movw	r30, r14
    2c92:	22 87       	std	Z+10, r18	; 0x0a
    2c94:	33 87       	std	Z+11, r19	; 0x0b
    2c96:	44 87       	std	Z+12, r20	; 0x0c
    2c98:	55 87       	std	Z+13, r21	; 0x0d
		dj->index = 2;
    2c9a:	53 82       	std	Z+3, r5	; 0x03
    2c9c:	42 82       	std	Z+2, r4	; 0x02
    2c9e:	41 cf       	rjmp	.-382    	; 0x2b22 <trace_path+0x58>
	}
    2ca0:	24 e0       	ldi	r18, 0x04	; 4
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	05 c0       	rjmp	.+10     	; 0x2cb0 <trace_path+0x1e6>
    2ca6:	23 e0       	ldi	r18, 0x03	; 3
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	02 c0       	rjmp	.+4      	; 0x2cb0 <trace_path+0x1e6>
    2cac:	22 e0       	ldi	r18, 0x02	; 2
    2cae:	30 e0       	ldi	r19, 0x00	; 0
}
    2cb0:	c9 01       	movw	r24, r18
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	e0 e1       	ldi	r30, 0x10	; 16
    2cb8:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__epilogue_restores__+0x4>

00002cbc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const char *path		/* Pointer to the file or directory path */
)
{
    2cbc:	ae e1       	ldi	r26, 0x1E	; 30
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	e4 e6       	ldi	r30, 0x64	; 100
    2cc2:	f6 e1       	ldi	r31, 0x16	; 22
    2cc4:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__prologue_saves__+0x10>
    2cc8:	9e 8f       	std	Y+30, r25	; 0x1e
    2cca:	8d 8f       	std	Y+29, r24	; 0x1d
	DWORD dsect;
	char fn[8+3+1];
	CLUST dclust;


	res = auto_mount(&path, 1);
    2ccc:	ce 01       	movw	r24, r28
    2cce:	4d 96       	adiw	r24, 0x1d	; 29
    2cd0:	61 e0       	ldi	r22, 0x01	; 1
    2cd2:	0e 94 b8 13 	call	0x2770	; 0x2770 <auto_mount>
    2cd6:	9c 01       	movw	r18, r24
	if (res != FR_OK) return res;
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	09 f0       	breq	.+2      	; 0x2cde <f_unlink+0x22>
    2cdc:	9b c0       	rjmp	.+310    	; 0x2e14 <f_unlink+0x158>
	res = trace_path(&dj, fn, path, &dir);	/* Trace the file path */
    2cde:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2ce0:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	0f 96       	adiw	r24, 0x0f	; 15
    2ce6:	be 01       	movw	r22, r28
    2ce8:	6d 5f       	subi	r22, 0xFD	; 253
    2cea:	7f 4f       	sbci	r23, 0xFF	; 255
    2cec:	9e 01       	movw	r18, r28
    2cee:	2f 5f       	subi	r18, 0xFF	; 255
    2cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf2:	0e 94 65 15 	call	0x2aca	; 0x2aca <trace_path>
    2cf6:	9c 01       	movw	r18, r24
	if (res != FR_OK) return res;			/* Trace failed */
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	09 f0       	breq	.+2      	; 0x2cfe <f_unlink+0x42>
    2cfc:	8b c0       	rjmp	.+278    	; 0x2e14 <f_unlink+0x158>
	if (!dir) return FR_INVALID_NAME;		/* It is the root directory */
    2cfe:	a9 81       	ldd	r26, Y+1	; 0x01
    2d00:	ba 81       	ldd	r27, Y+2	; 0x02
    2d02:	10 97       	sbiw	r26, 0x00	; 0
    2d04:	19 f4       	brne	.+6      	; 0x2d0c <f_unlink+0x50>
    2d06:	24 e0       	ldi	r18, 0x04	; 4
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	84 c0       	rjmp	.+264    	; 0x2e14 <f_unlink+0x158>
	if (dir[DIR_Attr] & AM_RDO) return FR_DENIED;	/* It is a R/O object */
    2d0c:	1b 96       	adiw	r26, 0x0b	; 11
    2d0e:	8c 91       	ld	r24, X
    2d10:	1b 97       	sbiw	r26, 0x0b	; 11
    2d12:	80 fd       	sbrc	r24, 0
    2d14:	7a c0       	rjmp	.+244    	; 0x2e0a <f_unlink+0x14e>
	dsect = dj.fs->winsect;
    2d16:	eb 89       	ldd	r30, Y+19	; 0x13
    2d18:	fc 89       	ldd	r31, Y+20	; 0x14
    2d1a:	a4 80       	ldd	r10, Z+4	; 0x04
    2d1c:	b5 80       	ldd	r11, Z+5	; 0x05
    2d1e:	c6 80       	ldd	r12, Z+6	; 0x06
    2d20:	d7 80       	ldd	r13, Z+7	; 0x07
	dclust =
    2d22:	5a 96       	adiw	r26, 0x1a	; 26
    2d24:	ed 90       	ld	r14, X+
    2d26:	fc 90       	ld	r15, X
    2d28:	5b 97       	sbiw	r26, 0x1b	; 27
#if _FAT32
		((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) |
#endif
		LD_WORD(&dir[DIR_FstClusLO]);
	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    2d2a:	84 ff       	sbrs	r24, 4
    2d2c:	57 c0       	rjmp	.+174    	; 0x2ddc <f_unlink+0x120>
static
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	CLUST clust		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    2d2e:	00 91 1a 01 	lds	r16, 0x011A
    2d32:	10 91 1b 01 	lds	r17, 0x011B


	clust -= 2;
    2d36:	b7 01       	movw	r22, r14
    2d38:	62 50       	subi	r22, 0x02	; 2
    2d3a:	70 40       	sbci	r23, 0x00	; 0
	if (clust >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2d3c:	f8 01       	movw	r30, r16
    2d3e:	86 89       	ldd	r24, Z+22	; 0x16
    2d40:	97 89       	ldd	r25, Z+23	; 0x17
    2d42:	02 97       	sbiw	r24, 0x02	; 2
    2d44:	68 17       	cp	r22, r24
    2d46:	79 07       	cpc	r23, r25
    2d48:	28 f0       	brcs	.+10     	; 0x2d54 <f_unlink+0x98>
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	40 e0       	ldi	r20, 0x00	; 0
    2d50:	50 e0       	ldi	r21, 0x00	; 0
    2d52:	14 c0       	rjmp	.+40     	; 0x2d7c <f_unlink+0xc0>
	return (DWORD)clust * fs->csize + fs->database;
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	f8 01       	movw	r30, r16
    2d5a:	25 8d       	ldd	r18, Z+29	; 0x1d
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	50 e0       	ldi	r21, 0x00	; 0
    2d62:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__mulsi3>
    2d66:	9b 01       	movw	r18, r22
    2d68:	ac 01       	movw	r20, r24
    2d6a:	f8 01       	movw	r30, r16
    2d6c:	80 89       	ldd	r24, Z+16	; 0x10
    2d6e:	91 89       	ldd	r25, Z+17	; 0x11
    2d70:	a2 89       	ldd	r26, Z+18	; 0x12
    2d72:	b3 89       	ldd	r27, Z+19	; 0x13
    2d74:	28 0f       	add	r18, r24
    2d76:	39 1f       	adc	r19, r25
    2d78:	4a 1f       	adc	r20, r26
    2d7a:	5b 1f       	adc	r21, r27
#if _FAT32
		((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) |
#endif
		LD_WORD(&dir[DIR_FstClusLO]);
	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		dj.clust = dclust;					/* Check if the sub-dir is empty or not */
    2d7c:	f8 8e       	std	Y+24, r15	; 0x18
    2d7e:	ef 8a       	std	Y+23, r14	; 0x17
		dj.sect = clust2sect(dclust);
    2d80:	29 8f       	std	Y+25, r18	; 0x19
    2d82:	3a 8f       	std	Y+26, r19	; 0x1a
    2d84:	4b 8f       	std	Y+27, r20	; 0x1b
    2d86:	5c 8f       	std	Y+28, r21	; 0x1c
		dj.index = 2;
    2d88:	82 e0       	ldi	r24, 0x02	; 2
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	9a 8b       	std	Y+18, r25	; 0x12
    2d8e:	89 8b       	std	Y+17, r24	; 0x11
			if (!move_window(dj.sect)) return FR_RW_ERROR;
			sdir = &dj.fs->win[(dj.index & 15) * 32];
			if (sdir[DIR_Name] == 0) break;
			if (sdir[DIR_Name] != 0xE5 && !(sdir[DIR_Attr] & AM_VOL))
				return FR_DENIED;	/* The directory is not empty */
		} while (next_dir_entry(&dj));
    2d90:	8e 01       	movw	r16, r28
    2d92:	01 5f       	subi	r16, 0xF1	; 241
    2d94:	1f 4f       	sbci	r17, 0xFF	; 255
	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		dj.clust = dclust;					/* Check if the sub-dir is empty or not */
		dj.sect = clust2sect(dclust);
		dj.index = 2;
		do {
			if (!move_window(dj.sect)) return FR_RW_ERROR;
    2d96:	69 8d       	ldd	r22, Y+25	; 0x19
    2d98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d9e:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    2da2:	89 2b       	or	r24, r25
    2da4:	a9 f1       	breq	.+106    	; 0x2e10 <f_unlink+0x154>
			sdir = &dj.fs->win[(dj.index & 15) * 32];
    2da6:	ab 89       	ldd	r26, Y+19	; 0x13
    2da8:	bc 89       	ldd	r27, Y+20	; 0x14
    2daa:	89 89       	ldd	r24, Y+17	; 0x11
    2dac:	9a 89       	ldd	r25, Y+18	; 0x12
    2dae:	8f 70       	andi	r24, 0x0F	; 15
    2db0:	90 70       	andi	r25, 0x00	; 0
    2db2:	45 e0       	ldi	r20, 0x05	; 5
    2db4:	88 0f       	add	r24, r24
    2db6:	99 1f       	adc	r25, r25
    2db8:	4a 95       	dec	r20
    2dba:	e1 f7       	brne	.-8      	; 0x2db4 <f_unlink+0xf8>
			if (sdir[DIR_Name] == 0) break;
    2dbc:	fd 01       	movw	r30, r26
    2dbe:	e8 0f       	add	r30, r24
    2dc0:	f9 1f       	adc	r31, r25
    2dc2:	20 a1       	ldd	r18, Z+32	; 0x20
    2dc4:	22 23       	and	r18, r18
    2dc6:	51 f0       	breq	.+20     	; 0x2ddc <f_unlink+0x120>
			if (sdir[DIR_Name] != 0xE5 && !(sdir[DIR_Attr] & AM_VOL))
    2dc8:	25 3e       	cpi	r18, 0xE5	; 229
    2dca:	19 f0       	breq	.+6      	; 0x2dd2 <f_unlink+0x116>
    2dcc:	83 a5       	ldd	r24, Z+43	; 0x2b
    2dce:	83 ff       	sbrs	r24, 3
    2dd0:	1c c0       	rjmp	.+56     	; 0x2e0a <f_unlink+0x14e>
				return FR_DENIED;	/* The directory is not empty */
		} while (next_dir_entry(&dj));
    2dd2:	c8 01       	movw	r24, r16
    2dd4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <next_dir_entry>
    2dd8:	89 2b       	or	r24, r25
    2dda:	e9 f6       	brne	.-70     	; 0x2d96 <f_unlink+0xda>
	}

	if (!move_window(dsect)) return FR_RW_ERROR;	/* Mark the directory entry 'deleted' */
    2ddc:	c6 01       	movw	r24, r12
    2dde:	b5 01       	movw	r22, r10
    2de0:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    2de4:	89 2b       	or	r24, r25
    2de6:	a1 f0       	breq	.+40     	; 0x2e10 <f_unlink+0x154>
	dir[DIR_Name] = 0xE5;
    2de8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dea:	fa 81       	ldd	r31, Y+2	; 0x02
    2dec:	85 ee       	ldi	r24, 0xE5	; 229
    2dee:	80 83       	st	Z, r24
	dj.fs->winflag = 1;
    2df0:	eb 89       	ldd	r30, Y+19	; 0x13
    2df2:	fc 89       	ldd	r31, Y+20	; 0x14
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	87 8f       	std	Z+31, r24	; 0x1f
	if (!remove_chain(dclust)) return FR_RW_ERROR;	/* Remove the cluster chain */
    2df8:	c7 01       	movw	r24, r14
    2dfa:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <remove_chain>
    2dfe:	89 2b       	or	r24, r25
    2e00:	39 f0       	breq	.+14     	; 0x2e10 <f_unlink+0x154>

	return sync();
    2e02:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <sync>
    2e06:	9c 01       	movw	r18, r24
    2e08:	05 c0       	rjmp	.+10     	; 0x2e14 <f_unlink+0x158>
    2e0a:	26 e0       	ldi	r18, 0x06	; 6
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	02 c0       	rjmp	.+4      	; 0x2e14 <f_unlink+0x158>
    2e10:	28 e0       	ldi	r18, 0x08	; 8
    2e12:	30 e0       	ldi	r19, 0x00	; 0
}
    2e14:	c9 01       	movw	r24, r18
    2e16:	6e 96       	adiw	r28, 0x1e	; 30
    2e18:	ea e0       	ldi	r30, 0x0A	; 10
    2e1a:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__epilogue_restores__+0x10>

00002e1e <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    2e1e:	a0 e1       	ldi	r26, 0x10	; 16
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	e5 e1       	ldi	r30, 0x15	; 21
    2e24:	f7 e1       	ldi	r31, 0x17	; 23
    2e26:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__prologue_saves__+0x14>
    2e2a:	6c 01       	movw	r12, r24
    2e2c:	78 8b       	std	Y+16, r23	; 0x10
    2e2e:	6f 87       	std	Y+15, r22	; 0x0f
	FRESULT res;
	BYTE *dir;
	char fn[8+3+1];


	res = auto_mount(&path, 0);
    2e30:	ce 01       	movw	r24, r28
    2e32:	0f 96       	adiw	r24, 0x0f	; 15
    2e34:	60 e0       	ldi	r22, 0x00	; 0
    2e36:	0e 94 b8 13 	call	0x2770	; 0x2770 <auto_mount>
    2e3a:	7c 01       	movw	r14, r24
	if (res == FR_OK) {
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	09 f0       	breq	.+2      	; 0x2e42 <f_opendir+0x24>
    2e40:	60 c0       	rjmp	.+192    	; 0x2f02 <f_opendir+0xe4>
		res = trace_path(dj, fn, path, &dir);	/* Trace the directory path */
    2e42:	4f 85       	ldd	r20, Y+15	; 0x0f
    2e44:	58 89       	ldd	r21, Y+16	; 0x10
    2e46:	c6 01       	movw	r24, r12
    2e48:	be 01       	movw	r22, r28
    2e4a:	6d 5f       	subi	r22, 0xFD	; 253
    2e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e4e:	9e 01       	movw	r18, r28
    2e50:	2f 5f       	subi	r18, 0xFF	; 255
    2e52:	3f 4f       	sbci	r19, 0xFF	; 255
    2e54:	0e 94 65 15 	call	0x2aca	; 0x2aca <trace_path>
    2e58:	7c 01       	movw	r14, r24
		if (res == FR_OK) {						/* Trace completed */
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	09 f0       	breq	.+2      	; 0x2e60 <f_opendir+0x42>
    2e5e:	51 c0       	rjmp	.+162    	; 0x2f02 <f_opendir+0xe4>
			if (dir) {							/* It is not the root dir */
    2e60:	e9 81       	ldd	r30, Y+1	; 0x01
    2e62:	fa 81       	ldd	r31, Y+2	; 0x02
    2e64:	30 97       	sbiw	r30, 0x00	; 0
    2e66:	09 f4       	brne	.+2      	; 0x2e6a <f_opendir+0x4c>
    2e68:	43 c0       	rjmp	.+134    	; 0x2ef0 <f_opendir+0xd2>
				if (dir[DIR_Attr] & AM_DIR) {	/* The entry is a directory */
    2e6a:	83 85       	ldd	r24, Z+11	; 0x0b
    2e6c:	84 fd       	sbrc	r24, 4
    2e6e:	04 c0       	rjmp	.+8      	; 0x2e78 <f_opendir+0x5a>
    2e70:	52 e0       	ldi	r21, 0x02	; 2
    2e72:	e5 2e       	mov	r14, r21
    2e74:	f1 2c       	mov	r15, r1
    2e76:	3c c0       	rjmp	.+120    	; 0x2ef0 <f_opendir+0xd2>
	 				dj->clust =
    2e78:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e7a:	93 8d       	ldd	r25, Z+27	; 0x1b
    2e7c:	d6 01       	movw	r26, r12
    2e7e:	19 96       	adiw	r26, 0x09	; 9
    2e80:	9c 93       	st	X, r25
    2e82:	8e 93       	st	-X, r24
    2e84:	18 97       	sbiw	r26, 0x08	; 8
static
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	CLUST clust		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    2e86:	00 91 1a 01 	lds	r16, 0x011A
    2e8a:	10 91 1b 01 	lds	r17, 0x011B


	clust -= 2;
    2e8e:	bc 01       	movw	r22, r24
    2e90:	62 50       	subi	r22, 0x02	; 2
    2e92:	70 40       	sbci	r23, 0x00	; 0
	if (clust >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2e94:	f8 01       	movw	r30, r16
    2e96:	86 89       	ldd	r24, Z+22	; 0x16
    2e98:	97 89       	ldd	r25, Z+23	; 0x17
    2e9a:	02 97       	sbiw	r24, 0x02	; 2
    2e9c:	68 17       	cp	r22, r24
    2e9e:	79 07       	cpc	r23, r25
    2ea0:	28 f0       	brcs	.+10     	; 0x2eac <f_opendir+0x8e>
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e0       	ldi	r20, 0x00	; 0
    2ea8:	50 e0       	ldi	r21, 0x00	; 0
    2eaa:	15 c0       	rjmp	.+42     	; 0x2ed6 <f_opendir+0xb8>
	return (DWORD)clust * fs->csize + fs->database;
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	d8 01       	movw	r26, r16
    2eb2:	5d 96       	adiw	r26, 0x1d	; 29
    2eb4:	2c 91       	ld	r18, X
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	40 e0       	ldi	r20, 0x00	; 0
    2eba:	50 e0       	ldi	r21, 0x00	; 0
    2ebc:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__mulsi3>
    2ec0:	9b 01       	movw	r18, r22
    2ec2:	ac 01       	movw	r20, r24
    2ec4:	f8 01       	movw	r30, r16
    2ec6:	80 89       	ldd	r24, Z+16	; 0x10
    2ec8:	91 89       	ldd	r25, Z+17	; 0x11
    2eca:	a2 89       	ldd	r26, Z+18	; 0x12
    2ecc:	b3 89       	ldd	r27, Z+19	; 0x13
    2ece:	28 0f       	add	r18, r24
    2ed0:	39 1f       	adc	r19, r25
    2ed2:	4a 1f       	adc	r20, r26
    2ed4:	5b 1f       	adc	r21, r27
	 				dj->clust =
#if _FAT32
						((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) |
#endif
							LD_WORD(&dir[DIR_FstClusLO]);
					dj->sect = clust2sect(dj->clust);
    2ed6:	d6 01       	movw	r26, r12
    2ed8:	1a 96       	adiw	r26, 0x0a	; 10
    2eda:	2d 93       	st	X+, r18
    2edc:	3d 93       	st	X+, r19
    2ede:	4d 93       	st	X+, r20
    2ee0:	5c 93       	st	X, r21
    2ee2:	1d 97       	sbiw	r26, 0x0d	; 13
					dj->index = 2;
    2ee4:	82 e0       	ldi	r24, 0x02	; 2
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	13 96       	adiw	r26, 0x03	; 3
    2eea:	9c 93       	st	X, r25
    2eec:	8e 93       	st	-X, r24
    2eee:	12 97       	sbiw	r26, 0x02	; 2
				} else {						/* The entry is not a directory */
					res = FR_NO_FILE;
				}
			}
			dj->id = dj->fs->id;
    2ef0:	d6 01       	movw	r26, r12
    2ef2:	14 96       	adiw	r26, 0x04	; 4
    2ef4:	ed 91       	ld	r30, X+
    2ef6:	fc 91       	ld	r31, X
    2ef8:	15 97       	sbiw	r26, 0x05	; 5
    2efa:	80 81       	ld	r24, Z
    2efc:	91 81       	ldd	r25, Z+1	; 0x01
    2efe:	8d 93       	st	X+, r24
    2f00:	9c 93       	st	X, r25
		}
	}

	return res;
}
    2f02:	c7 01       	movw	r24, r14
    2f04:	60 96       	adiw	r28, 0x10	; 16
    2f06:	e8 e0       	ldi	r30, 0x08	; 8
    2f08:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__epilogue_restores__+0x14>

00002f0c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const char *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2f0c:	ae e1       	ldi	r26, 0x1E	; 30
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	ec e8       	ldi	r30, 0x8C	; 140
    2f12:	f7 e1       	ldi	r31, 0x17	; 23
    2f14:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__prologue_saves__+0x2>
    2f18:	3c 01       	movw	r6, r24
    2f1a:	7e 8f       	std	Y+30, r23	; 0x1e
    2f1c:	6d 8f       	std	Y+29, r22	; 0x1d
	DIR dj;
	BYTE *dir;
	char fn[8+3+1];


	fp->fs = NULL;		/* Clear file object */
    2f1e:	dc 01       	movw	r26, r24
    2f20:	15 96       	adiw	r26, 0x05	; 5
    2f22:	1c 92       	st	X, r1
    2f24:	1e 92       	st	-X, r1
    2f26:	14 97       	sbiw	r26, 0x04	; 4
#if !_FS_READONLY
	mode &= (FA_READ|FA_WRITE|FA_CREATE_ALWAYS|FA_OPEN_ALWAYS|FA_CREATE_NEW);
    2f28:	9f e1       	ldi	r25, 0x1F	; 31
    2f2a:	39 2e       	mov	r3, r25
    2f2c:	34 22       	and	r3, r20
	res = auto_mount(&path, (BYTE)(mode & (FA_WRITE|FA_CREATE_ALWAYS|FA_OPEN_ALWAYS|FA_CREATE_NEW)));
    2f2e:	4e 71       	andi	r20, 0x1E	; 30
    2f30:	ce 01       	movw	r24, r28
    2f32:	4d 96       	adiw	r24, 0x1d	; 29
    2f34:	64 2f       	mov	r22, r20
    2f36:	0e 94 b8 13 	call	0x2770	; 0x2770 <auto_mount>
    2f3a:	2c 01       	movw	r4, r24
#else
	mode &= FA_READ;
	res = auto_mount(&path, 0);
#endif
	if (res != FR_OK) return res;
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	09 f0       	breq	.+2      	; 0x2f42 <f_open+0x36>
    2f40:	9a c1       	rjmp	.+820    	; 0x3276 <f_open+0x36a>
	res = trace_path(&dj, fn, path, &dir);	/* Trace the file path */
    2f42:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2f44:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2f46:	ce 01       	movw	r24, r28
    2f48:	0f 96       	adiw	r24, 0x0f	; 15
    2f4a:	be 01       	movw	r22, r28
    2f4c:	6d 5f       	subi	r22, 0xFD	; 253
    2f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f50:	9e 01       	movw	r18, r28
    2f52:	2f 5f       	subi	r18, 0xFF	; 255
    2f54:	3f 4f       	sbci	r19, 0xFF	; 255
    2f56:	0e 94 65 15 	call	0x2aca	; 0x2aca <trace_path>
    2f5a:	9c 01       	movw	r18, r24

#if !_FS_READONLY
	/* Create or Open a File */
	if (mode & (FA_CREATE_ALWAYS|FA_OPEN_ALWAYS|FA_CREATE_NEW)) {
    2f5c:	43 2d       	mov	r20, r3
    2f5e:	50 e0       	ldi	r21, 0x00	; 0
    2f60:	ca 01       	movw	r24, r20
    2f62:	8c 71       	andi	r24, 0x1C	; 28
    2f64:	90 70       	andi	r25, 0x00	; 0
    2f66:	89 2b       	or	r24, r25
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <f_open+0x60>
    2f6a:	2e c1       	rjmp	.+604    	; 0x31c8 <f_open+0x2bc>
		CLUST rs;
		DWORD dw;
		if (res != FR_OK) {		/* No file, create new */
    2f6c:	21 15       	cp	r18, r1
    2f6e:	31 05       	cpc	r19, r1
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <f_open+0x68>
    2f72:	df c0       	rjmp	.+446    	; 0x3132 <f_open+0x226>
			if (res != FR_NO_FILE) return res;
    2f74:	22 30       	cpi	r18, 0x02	; 2
    2f76:	31 05       	cpc	r19, r1
    2f78:	09 f0       	breq	.+2      	; 0x2f7c <f_open+0x70>
    2f7a:	70 c1       	rjmp	.+736    	; 0x325c <f_open+0x350>
)
{
	CLUST clust;
	DWORD sector;
	BYTE c, n, *dptr;
	FATFS *fs = dj->fs;
    2f7c:	8b 88       	ldd	r8, Y+19	; 0x13
    2f7e:	9c 88       	ldd	r9, Y+20	; 0x14


	/* Re-initialize directory object */
	clust = dj->sclust;
    2f80:	ed 88       	ldd	r14, Y+21	; 0x15
    2f82:	fe 88       	ldd	r15, Y+22	; 0x16
	if (clust != 0) {	/* Dyanmic directory table */
    2f84:	e1 14       	cp	r14, r1
    2f86:	f1 04       	cpc	r15, r1
    2f88:	79 f1       	breq	.+94     	; 0x2fe8 <f_open+0xdc>
static
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	CLUST clust		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    2f8a:	00 91 1a 01 	lds	r16, 0x011A
    2f8e:	10 91 1b 01 	lds	r17, 0x011B


	clust -= 2;
    2f92:	b7 01       	movw	r22, r14
    2f94:	62 50       	subi	r22, 0x02	; 2
    2f96:	70 40       	sbci	r23, 0x00	; 0
	if (clust >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2f98:	f8 01       	movw	r30, r16
    2f9a:	86 89       	ldd	r24, Z+22	; 0x16
    2f9c:	97 89       	ldd	r25, Z+23	; 0x17
    2f9e:	02 97       	sbiw	r24, 0x02	; 2
    2fa0:	68 17       	cp	r22, r24
    2fa2:	79 07       	cpc	r23, r25
    2fa4:	28 f0       	brcs	.+10     	; 0x2fb0 <f_open+0xa4>
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e0       	ldi	r20, 0x00	; 0
    2fac:	50 e0       	ldi	r21, 0x00	; 0
    2fae:	15 c0       	rjmp	.+42     	; 0x2fda <f_open+0xce>
	return (DWORD)clust * fs->csize + fs->database;
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	d8 01       	movw	r26, r16
    2fb6:	5d 96       	adiw	r26, 0x1d	; 29
    2fb8:	2c 91       	ld	r18, X
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e0       	ldi	r20, 0x00	; 0
    2fbe:	50 e0       	ldi	r21, 0x00	; 0
    2fc0:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__mulsi3>
    2fc4:	9b 01       	movw	r18, r22
    2fc6:	ac 01       	movw	r20, r24
    2fc8:	f8 01       	movw	r30, r16
    2fca:	80 89       	ldd	r24, Z+16	; 0x10
    2fcc:	91 89       	ldd	r25, Z+17	; 0x11
    2fce:	a2 89       	ldd	r26, Z+18	; 0x12
    2fd0:	b3 89       	ldd	r27, Z+19	; 0x13
    2fd2:	28 0f       	add	r18, r24
    2fd4:	39 1f       	adc	r19, r25
    2fd6:	4a 1f       	adc	r20, r26
    2fd8:	5b 1f       	adc	r21, r27


	/* Re-initialize directory object */
	clust = dj->sclust;
	if (clust != 0) {	/* Dyanmic directory table */
		dj->clust = clust;
    2fda:	f8 8e       	std	Y+24, r15	; 0x18
    2fdc:	ef 8a       	std	Y+23, r14	; 0x17
		dj->sect = clust2sect(clust);
    2fde:	29 8f       	std	Y+25, r18	; 0x19
    2fe0:	3a 8f       	std	Y+26, r19	; 0x1a
    2fe2:	4b 8f       	std	Y+27, r20	; 0x1b
    2fe4:	5c 8f       	std	Y+28, r21	; 0x1c
    2fe6:	09 c0       	rjmp	.+18     	; 0x2ffa <f_open+0xee>
	} else {			/* Static directory table */
		dj->sect = fs->dirbase;
    2fe8:	f4 01       	movw	r30, r8
    2fea:	84 85       	ldd	r24, Z+12	; 0x0c
    2fec:	95 85       	ldd	r25, Z+13	; 0x0d
    2fee:	a6 85       	ldd	r26, Z+14	; 0x0e
    2ff0:	b7 85       	ldd	r27, Z+15	; 0x0f
    2ff2:	89 8f       	std	Y+25, r24	; 0x19
    2ff4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ff6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ff8:	bc 8f       	std	Y+28, r27	; 0x1c
	}
	dj->index = 0;
    2ffa:	1a 8a       	std	Y+18, r1	; 0x12
    2ffc:	19 8a       	std	Y+17, r1	; 0x11
		dptr = &fs->win[(dj->index & 15) * 32];	/* Pointer to the directory entry */
		c = dptr[DIR_Name];
		if (c == 0 || c == 0xE5) {			/* Found an empty entry! */
			*dir = dptr; return FR_OK;
		}
	} while (next_dir_entry(dj));			/* Next directory pointer */
    2ffe:	8e 01       	movw	r16, r28
    3000:	01 5f       	subi	r16, 0xF1	; 241
    3002:	1f 4f       	sbci	r17, 0xFF	; 255
		dj->sect = fs->dirbase;
	}
	dj->index = 0;

	do {
		if (!move_window(dj->sect)) return FR_RW_ERROR;
    3004:	69 8d       	ldd	r22, Y+25	; 0x19
    3006:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3008:	8b 8d       	ldd	r24, Y+27	; 0x1b
    300a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    300c:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    3010:	89 2b       	or	r24, r25
    3012:	09 f4       	brne	.+2      	; 0x3016 <f_open+0x10a>
    3014:	29 c1       	rjmp	.+594    	; 0x3268 <f_open+0x35c>
		dptr = &fs->win[(dj->index & 15) * 32];	/* Pointer to the directory entry */
    3016:	e9 89       	ldd	r30, Y+17	; 0x11
    3018:	fa 89       	ldd	r31, Y+18	; 0x12
    301a:	ef 70       	andi	r30, 0x0F	; 15
    301c:	f0 70       	andi	r31, 0x00	; 0
    301e:	85 e0       	ldi	r24, 0x05	; 5
    3020:	ee 0f       	add	r30, r30
    3022:	ff 1f       	adc	r31, r31
    3024:	8a 95       	dec	r24
    3026:	e1 f7       	brne	.-8      	; 0x3020 <f_open+0x114>
    3028:	b0 96       	adiw	r30, 0x20	; 32
    302a:	94 01       	movw	r18, r8
    302c:	2e 0f       	add	r18, r30
    302e:	3f 1f       	adc	r19, r31
    3030:	b0 97       	sbiw	r30, 0x20	; 32
		c = dptr[DIR_Name];
    3032:	e8 0d       	add	r30, r8
    3034:	f9 1d       	adc	r31, r9
    3036:	80 a1       	ldd	r24, Z+32	; 0x20
		if (c == 0 || c == 0xE5) {			/* Found an empty entry! */
    3038:	88 23       	and	r24, r24
    303a:	11 f0       	breq	.+4      	; 0x3040 <f_open+0x134>
    303c:	85 3e       	cpi	r24, 0xE5	; 229
    303e:	19 f4       	brne	.+6      	; 0x3046 <f_open+0x13a>
			*dir = dptr; return FR_OK;
    3040:	3a 83       	std	Y+2, r19	; 0x02
    3042:	29 83       	std	Y+1, r18	; 0x01
    3044:	1d c1       	rjmp	.+570    	; 0x3280 <f_open+0x374>
		}
	} while (next_dir_entry(dj));			/* Next directory pointer */
    3046:	c8 01       	movw	r24, r16
    3048:	0e 94 b8 0c 	call	0x1970	; 0x1970 <next_dir_entry>
    304c:	89 2b       	or	r24, r25
    304e:	d1 f6       	brne	.-76     	; 0x3004 <f_open+0xf8>
	/* Reached to end of the directory table */

	/* Abort when static table or could not stretch dynamic table */
	if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
    3050:	e1 14       	cp	r14, r1
    3052:	f1 04       	cpc	r15, r1
    3054:	09 f4       	brne	.+2      	; 0x3058 <f_open+0x14c>
    3056:	04 c1       	rjmp	.+520    	; 0x3260 <f_open+0x354>
    3058:	8f 89       	ldd	r24, Y+23	; 0x17
    305a:	98 8d       	ldd	r25, Y+24	; 0x18
    305c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <create_chain>
    3060:	8c 01       	movw	r16, r24
    3062:	00 97       	sbiw	r24, 0x00	; 0
    3064:	09 f4       	brne	.+2      	; 0x3068 <f_open+0x15c>
    3066:	fc c0       	rjmp	.+504    	; 0x3260 <f_open+0x354>
	if (clust == 1 || !move_window(0)) return FR_RW_ERROR;
    3068:	81 30       	cpi	r24, 0x01	; 1
    306a:	91 05       	cpc	r25, r1
    306c:	09 f4       	brne	.+2      	; 0x3070 <f_open+0x164>
    306e:	fc c0       	rjmp	.+504    	; 0x3268 <f_open+0x35c>
    3070:	60 e0       	ldi	r22, 0x00	; 0
    3072:	70 e0       	ldi	r23, 0x00	; 0
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    307c:	89 2b       	or	r24, r25
    307e:	09 f4       	brne	.+2      	; 0x3082 <f_open+0x176>
    3080:	f3 c0       	rjmp	.+486    	; 0x3268 <f_open+0x35c>
static
DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
	CLUST clust		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    3082:	a0 90 1a 01 	lds	r10, 0x011A
    3086:	b0 90 1b 01 	lds	r11, 0x011B


	clust -= 2;
    308a:	b8 01       	movw	r22, r16
    308c:	62 50       	subi	r22, 0x02	; 2
    308e:	70 40       	sbci	r23, 0x00	; 0
	if (clust >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3090:	d5 01       	movw	r26, r10
    3092:	56 96       	adiw	r26, 0x16	; 22
    3094:	8d 91       	ld	r24, X+
    3096:	9c 91       	ld	r25, X
    3098:	57 97       	sbiw	r26, 0x17	; 23
    309a:	02 97       	sbiw	r24, 0x02	; 2
    309c:	68 17       	cp	r22, r24
    309e:	79 07       	cpc	r23, r25
    30a0:	20 f0       	brcs	.+8      	; 0x30aa <f_open+0x19e>
    30a2:	cc 24       	eor	r12, r12
    30a4:	dd 24       	eor	r13, r13
    30a6:	76 01       	movw	r14, r12
    30a8:	14 c0       	rjmp	.+40     	; 0x30d2 <f_open+0x1c6>
	return (DWORD)clust * fs->csize + fs->database;
    30aa:	80 e0       	ldi	r24, 0x00	; 0
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	f5 01       	movw	r30, r10
    30b0:	25 8d       	ldd	r18, Z+29	; 0x1d
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e0       	ldi	r20, 0x00	; 0
    30b6:	50 e0       	ldi	r21, 0x00	; 0
    30b8:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__mulsi3>
    30bc:	6b 01       	movw	r12, r22
    30be:	7c 01       	movw	r14, r24
    30c0:	f5 01       	movw	r30, r10
    30c2:	80 89       	ldd	r24, Z+16	; 0x10
    30c4:	91 89       	ldd	r25, Z+17	; 0x11
    30c6:	a2 89       	ldd	r26, Z+18	; 0x12
    30c8:	b3 89       	ldd	r27, Z+19	; 0x13
    30ca:	c8 0e       	add	r12, r24
    30cc:	d9 1e       	adc	r13, r25
    30ce:	ea 1e       	adc	r14, r26
    30d0:	fb 1e       	adc	r15, r27

	/* Abort when static table or could not stretch dynamic table */
	if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
	if (clust == 1 || !move_window(0)) return FR_RW_ERROR;

	fs->winsect = sector = clust2sect(clust);	/* Cleanup the expanded table */
    30d2:	d4 01       	movw	r26, r8
    30d4:	14 96       	adiw	r26, 0x04	; 4
    30d6:	cd 92       	st	X+, r12
    30d8:	dd 92       	st	X+, r13
    30da:	ed 92       	st	X+, r14
    30dc:	fc 92       	st	X, r15
    30de:	17 97       	sbiw	r26, 0x07	; 7
	memset(fs->win, 0, 512U);
    30e0:	10 e2       	ldi	r17, 0x20	; 32
    30e2:	a1 2e       	mov	r10, r17
    30e4:	b1 2c       	mov	r11, r1
    30e6:	a8 0c       	add	r10, r8
    30e8:	b9 1c       	adc	r11, r9
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	92 e0       	ldi	r25, 0x02	; 2
    30ee:	f5 01       	movw	r30, r10
    30f0:	9c 01       	movw	r18, r24
    30f2:	11 92       	st	Z+, r1
    30f4:	21 50       	subi	r18, 0x01	; 1
    30f6:	30 40       	sbci	r19, 0x00	; 0
    30f8:	e1 f7       	brne	.-8      	; 0x30f2 <f_open+0x1e6>
	for (n = fs->csize; n; n--) {
    30fa:	5d 96       	adiw	r26, 0x1d	; 29
    30fc:	1c 91       	ld	r17, X
    30fe:	10 c0       	rjmp	.+32     	; 0x3120 <f_open+0x214>
		if (disk_write(0, fs->win, sector, 1) != RES_OK)
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	b5 01       	movw	r22, r10
    3104:	a7 01       	movw	r20, r14
    3106:	96 01       	movw	r18, r12
    3108:	01 e0       	ldi	r16, 0x01	; 1
    310a:	0e 94 94 1b 	call	0x3728	; 0x3728 <disk_write>
    310e:	89 2b       	or	r24, r25
    3110:	09 f0       	breq	.+2      	; 0x3114 <f_open+0x208>
    3112:	aa c0       	rjmp	.+340    	; 0x3268 <f_open+0x35c>
			return FR_RW_ERROR;
		sector++;
    3114:	08 94       	sec
    3116:	c1 1c       	adc	r12, r1
    3118:	d1 1c       	adc	r13, r1
    311a:	e1 1c       	adc	r14, r1
    311c:	f1 1c       	adc	r15, r1
	if (clust == 0 || !(clust = create_chain(dj->clust))) return FR_DENIED;
	if (clust == 1 || !move_window(0)) return FR_RW_ERROR;

	fs->winsect = sector = clust2sect(clust);	/* Cleanup the expanded table */
	memset(fs->win, 0, 512U);
	for (n = fs->csize; n; n--) {
    311e:	11 50       	subi	r17, 0x01	; 1
    3120:	11 23       	and	r17, r17
    3122:	71 f7       	brne	.-36     	; 0x3100 <f_open+0x1f4>
		if (disk_write(0, fs->win, sector, 1) != RES_OK)
			return FR_RW_ERROR;
		sector++;
	}
	fs->winflag = 1;
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	d4 01       	movw	r26, r8
    3128:	5f 96       	adiw	r26, 0x1f	; 31
    312a:	8c 93       	st	X, r24
	*dir = fs->win;
    312c:	ba 82       	std	Y+2, r11	; 0x02
    312e:	a9 82       	std	Y+1, r10	; 0x01
    3130:	a7 c0       	rjmp	.+334    	; 0x3280 <f_open+0x374>
			memcpy(&dir[DIR_Name], fn, 8+3);
			dir[DIR_NTres] = fn[11];
			mode |= FA_CREATE_ALWAYS;
		}
		else {					/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    3132:	32 fe       	sbrs	r3, 2
    3134:	04 c0       	rjmp	.+8      	; 0x313e <f_open+0x232>
    3136:	f7 e0       	ldi	r31, 0x07	; 7
    3138:	4f 2e       	mov	r4, r31
    313a:	51 2c       	mov	r5, r1
    313c:	9c c0       	rjmp	.+312    	; 0x3276 <f_open+0x36a>
				return FR_EXIST;
			if (!dir || (dir[DIR_Attr] & (AM_RDO|AM_DIR)))	/* Cannot overwrite (R/O or DIR) */
    313e:	e9 81       	ldd	r30, Y+1	; 0x01
    3140:	fa 81       	ldd	r31, Y+2	; 0x02
    3142:	30 97       	sbiw	r30, 0x00	; 0
    3144:	09 f4       	brne	.+2      	; 0x3148 <f_open+0x23c>
    3146:	8c c0       	rjmp	.+280    	; 0x3260 <f_open+0x354>
    3148:	83 85       	ldd	r24, Z+11	; 0x0b
    314a:	81 71       	andi	r24, 0x11	; 17
    314c:	09 f0       	breq	.+2      	; 0x3150 <f_open+0x244>
    314e:	88 c0       	rjmp	.+272    	; 0x3260 <f_open+0x354>
				return FR_DENIED;
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero */
    3150:	33 fe       	sbrs	r3, 3
    3152:	26 c0       	rjmp	.+76     	; 0x31a0 <f_open+0x294>
#if _FAT32
				rs = ((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) | LD_WORD(&dir[DIR_FstClusLO]);
				ST_WORD(&dir[DIR_FstClusHI], 0);
#else
				rs = LD_WORD(&dir[DIR_FstClusLO]);
    3154:	c2 8c       	ldd	r12, Z+26	; 0x1a
    3156:	d3 8c       	ldd	r13, Z+27	; 0x1b
#endif
				ST_WORD(&dir[DIR_FstClusLO], 0);	/* cluster = 0 */
    3158:	13 8e       	std	Z+27, r1	; 0x1b
    315a:	12 8e       	std	Z+26, r1	; 0x1a
				ST_DWORD(&dir[DIR_FileSize], 0);	/* size = 0 */
    315c:	14 8e       	std	Z+28, r1	; 0x1c
    315e:	15 8e       	std	Z+29, r1	; 0x1d
    3160:	16 8e       	std	Z+30, r1	; 0x1e
    3162:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->winflag = 1;
    3164:	eb 89       	ldd	r30, Y+19	; 0x13
    3166:	fc 89       	ldd	r31, Y+20	; 0x14
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	87 8f       	std	Z+31, r24	; 0x1f
				dw = dj.fs->winsect;			/* Remove the cluster chain */
    316c:	eb 89       	ldd	r30, Y+19	; 0x13
    316e:	fc 89       	ldd	r31, Y+20	; 0x14
    3170:	e4 80       	ldd	r14, Z+4	; 0x04
    3172:	f5 80       	ldd	r15, Z+5	; 0x05
    3174:	06 81       	ldd	r16, Z+6	; 0x06
    3176:	17 81       	ldd	r17, Z+7	; 0x07
				if (!remove_chain(rs) || !move_window(dw))
    3178:	c6 01       	movw	r24, r12
    317a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <remove_chain>
    317e:	89 2b       	or	r24, r25
    3180:	09 f4       	brne	.+2      	; 0x3184 <f_open+0x278>
    3182:	72 c0       	rjmp	.+228    	; 0x3268 <f_open+0x35c>
    3184:	c8 01       	movw	r24, r16
    3186:	b7 01       	movw	r22, r14
    3188:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_window>
    318c:	89 2b       	or	r24, r25
    318e:	09 f4       	brne	.+2      	; 0x3192 <f_open+0x286>
    3190:	6b c0       	rjmp	.+214    	; 0x3268 <f_open+0x35c>
					return FR_RW_ERROR;
				dj.fs->last_clust = rs - 1;		/* Reuse the cluster hole */
    3192:	eb 89       	ldd	r30, Y+19	; 0x13
    3194:	fc 89       	ldd	r31, Y+20	; 0x14
    3196:	08 94       	sec
    3198:	c1 08       	sbc	r12, r1
    319a:	d1 08       	sbc	r13, r1
    319c:	d1 8e       	std	Z+25, r13	; 0x19
    319e:	c0 8e       	std	Z+24, r12	; 0x18
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    31a0:	33 fe       	sbrs	r3, 3
    31a2:	22 c0       	rjmp	.+68     	; 0x31e8 <f_open+0x2dc>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    31a4:	e9 81       	ldd	r30, Y+1	; 0x01
    31a6:	fa 81       	ldd	r31, Y+2	; 0x02
    31a8:	13 86       	std	Z+11, r1	; 0x0b
			dw = get_fattime();
    31aa:	0e 94 f5 04 	call	0x9ea	; 0x9ea <get_fattime>
			ST_DWORD(&dir[DIR_CrtTime], dw);	/* Created time */
    31ae:	e9 81       	ldd	r30, Y+1	; 0x01
    31b0:	fa 81       	ldd	r31, Y+2	; 0x02
    31b2:	66 87       	std	Z+14, r22	; 0x0e
    31b4:	77 87       	std	Z+15, r23	; 0x0f
    31b6:	80 8b       	std	Z+16, r24	; 0x10
    31b8:	91 8b       	std	Z+17, r25	; 0x11
			dj.fs->winflag = 1;
    31ba:	eb 89       	ldd	r30, Y+19	; 0x13
    31bc:	fc 89       	ldd	r31, Y+20	; 0x14
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	87 8f       	std	Z+31, r24	; 0x1f
			mode |= FA__WRITTEN;				/* Set file changed flag */
    31c2:	b0 e2       	ldi	r27, 0x20	; 32
    31c4:	3b 2a       	or	r3, r27
    31c6:	10 c0       	rjmp	.+32     	; 0x31e8 <f_open+0x2dc>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) return res;			/* Trace failed */
    31c8:	21 15       	cp	r18, r1
    31ca:	31 05       	cpc	r19, r1
    31cc:	09 f0       	breq	.+2      	; 0x31d0 <f_open+0x2c4>
    31ce:	46 c0       	rjmp	.+140    	; 0x325c <f_open+0x350>
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    31d0:	e9 81       	ldd	r30, Y+1	; 0x01
    31d2:	fa 81       	ldd	r31, Y+2	; 0x02
    31d4:	30 97       	sbiw	r30, 0x00	; 0
    31d6:	09 f4       	brne	.+2      	; 0x31da <f_open+0x2ce>
    31d8:	4b c0       	rjmp	.+150    	; 0x3270 <f_open+0x364>
    31da:	83 85       	ldd	r24, Z+11	; 0x0b
    31dc:	84 fd       	sbrc	r24, 4
    31de:	48 c0       	rjmp	.+144    	; 0x3270 <f_open+0x364>
			return FR_NO_FILE;
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    31e0:	31 fe       	sbrs	r3, 1
    31e2:	02 c0       	rjmp	.+4      	; 0x31e8 <f_open+0x2dc>
    31e4:	80 fd       	sbrc	r24, 0
    31e6:	3c c0       	rjmp	.+120    	; 0x3260 <f_open+0x354>
			return FR_DENIED;
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    31e8:	2b 89       	ldd	r18, Y+19	; 0x13
    31ea:	3c 89       	ldd	r19, Y+20	; 0x14
    31ec:	f9 01       	movw	r30, r18
    31ee:	84 81       	ldd	r24, Z+4	; 0x04
    31f0:	95 81       	ldd	r25, Z+5	; 0x05
    31f2:	a6 81       	ldd	r26, Z+6	; 0x06
    31f4:	b7 81       	ldd	r27, Z+7	; 0x07
    31f6:	f3 01       	movw	r30, r6
    31f8:	86 8b       	std	Z+22, r24	; 0x16
    31fa:	97 8b       	std	Z+23, r25	; 0x17
    31fc:	a0 8f       	std	Z+24, r26	; 0x18
    31fe:	b1 8f       	std	Z+25, r27	; 0x19
	fp->dir_ptr = dir;
    3200:	e9 81       	ldd	r30, Y+1	; 0x01
    3202:	fa 81       	ldd	r31, Y+2	; 0x02
    3204:	d3 01       	movw	r26, r6
    3206:	5b 96       	adiw	r26, 0x1b	; 27
    3208:	fc 93       	st	X, r31
    320a:	ee 93       	st	-X, r30
    320c:	5a 97       	sbiw	r26, 0x1a	; 26
#endif
	fp->flag = mode;					/* File access mode */
    320e:	12 96       	adiw	r26, 0x02	; 2
    3210:	3c 92       	st	X, r3
    3212:	12 97       	sbiw	r26, 0x02	; 2
	fp->org_clust =						/* File start cluster */
    3214:	82 8d       	ldd	r24, Z+26	; 0x1a
    3216:	93 8d       	ldd	r25, Z+27	; 0x1b
    3218:	1f 96       	adiw	r26, 0x0f	; 15
    321a:	9c 93       	st	X, r25
    321c:	8e 93       	st	-X, r24
    321e:	1e 97       	sbiw	r26, 0x0e	; 14
#if _FAT32
		((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) |
#endif
		LD_WORD(&dir[DIR_FstClusLO]);
	fp->fsize = LD_DWORD(&dir[DIR_FileSize]);	/* File size */
    3220:	84 8d       	ldd	r24, Z+28	; 0x1c
    3222:	95 8d       	ldd	r25, Z+29	; 0x1d
    3224:	a6 8d       	ldd	r26, Z+30	; 0x1e
    3226:	b7 8d       	ldd	r27, Z+31	; 0x1f
    3228:	f3 01       	movw	r30, r6
    322a:	82 87       	std	Z+10, r24	; 0x0a
    322c:	93 87       	std	Z+11, r25	; 0x0b
    322e:	a4 87       	std	Z+12, r26	; 0x0c
    3230:	b5 87       	std	Z+13, r27	; 0x0d
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    3232:	d3 01       	movw	r26, r6
    3234:	16 96       	adiw	r26, 0x06	; 6
    3236:	1d 92       	st	X+, r1
    3238:	1d 92       	st	X+, r1
    323a:	1d 92       	st	X+, r1
    323c:	1c 92       	st	X, r1
    323e:	19 97       	sbiw	r26, 0x09	; 9
    3240:	8f ef       	ldi	r24, 0xFF	; 255
    3242:	13 96       	adiw	r26, 0x03	; 3
    3244:	8c 93       	st	X, r24
    3246:	13 97       	sbiw	r26, 0x03	; 3
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    3248:	15 96       	adiw	r26, 0x05	; 5
    324a:	3c 93       	st	X, r19
    324c:	2e 93       	st	-X, r18
    324e:	14 97       	sbiw	r26, 0x04	; 4
    3250:	f9 01       	movw	r30, r18
    3252:	80 81       	ld	r24, Z
    3254:	91 81       	ldd	r25, Z+1	; 0x01
    3256:	8d 93       	st	X+, r24
    3258:	9c 93       	st	X, r25
    325a:	0d c0       	rjmp	.+26     	; 0x3276 <f_open+0x36a>

	return FR_OK;
    325c:	29 01       	movw	r4, r18
    325e:	0b c0       	rjmp	.+22     	; 0x3276 <f_open+0x36a>
    3260:	e6 e0       	ldi	r30, 0x06	; 6
    3262:	4e 2e       	mov	r4, r30
    3264:	51 2c       	mov	r5, r1
    3266:	07 c0       	rjmp	.+14     	; 0x3276 <f_open+0x36a>
    3268:	78 e0       	ldi	r23, 0x08	; 8
    326a:	47 2e       	mov	r4, r23
    326c:	51 2c       	mov	r5, r1
    326e:	03 c0       	rjmp	.+6      	; 0x3276 <f_open+0x36a>
    3270:	62 e0       	ldi	r22, 0x02	; 2
    3272:	46 2e       	mov	r4, r22
    3274:	51 2c       	mov	r5, r1
}
    3276:	c2 01       	movw	r24, r4
    3278:	6e 96       	adiw	r28, 0x1e	; 30
    327a:	e1 e1       	ldi	r30, 0x11	; 17
    327c:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__epilogue_restores__+0x2>
		DWORD dw;
		if (res != FR_OK) {		/* No file, create new */
			if (res != FR_NO_FILE) return res;
			res = reserve_direntry(&dj, &dir);
			if (res != FR_OK) return res;
			memset(dir, 0, 32);		/* Initialize the new entry with open name */
    3280:	e9 81       	ldd	r30, Y+1	; 0x01
    3282:	fa 81       	ldd	r31, Y+2	; 0x02
    3284:	80 e2       	ldi	r24, 0x20	; 32
    3286:	df 01       	movw	r26, r30
    3288:	1d 92       	st	X+, r1
    328a:	8a 95       	dec	r24
    328c:	e9 f7       	brne	.-6      	; 0x3288 <f_open+0x37c>
			memcpy(&dir[DIR_Name], fn, 8+3);
    328e:	29 81       	ldd	r18, Y+1	; 0x01
    3290:	3a 81       	ldd	r19, Y+2	; 0x02
    3292:	c9 01       	movw	r24, r18
    3294:	dc 01       	movw	r26, r24
    3296:	fe 01       	movw	r30, r28
    3298:	33 96       	adiw	r30, 0x03	; 3
    329a:	8b e0       	ldi	r24, 0x0B	; 11
    329c:	01 90       	ld	r0, Z+
    329e:	0d 92       	st	X+, r0
    32a0:	81 50       	subi	r24, 0x01	; 1
    32a2:	e1 f7       	brne	.-8      	; 0x329c <f_open+0x390>
			dir[DIR_NTres] = fn[11];
    32a4:	e9 81       	ldd	r30, Y+1	; 0x01
    32a6:	fa 81       	ldd	r31, Y+2	; 0x02
    32a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    32aa:	84 87       	std	Z+12, r24	; 0x0c
			mode |= FA_CREATE_ALWAYS;
    32ac:	b8 e0       	ldi	r27, 0x08	; 8
    32ae:	3b 2a       	or	r3, r27
    32b0:	77 cf       	rjmp	.-274    	; 0x31a0 <f_open+0x294>

000032b2 <power_off>:
}

static
void power_off (void)
{
	SELECT();				/* Wait for card ready */
    32b2:	c4 98       	cbi	0x18, 4	; 24
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    32b4:	82 e3       	ldi	r24, 0x32	; 50
    32b6:	80 93 20 01 	sts	0x0120, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    32ba:	8f ef       	ldi	r24, 0xFF	; 255
    32bc:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    32be:	77 9b       	sbis	0x0e, 7	; 14
    32c0:	fe cf       	rjmp	.-4      	; 0x32be <power_off+0xc>
	return SPDR;
    32c2:	8f b1       	in	r24, 0x0f	; 15
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    32c4:	9f ef       	ldi	r25, 0xFF	; 255
    32c6:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    32c8:	77 9b       	sbis	0x0e, 7	; 14
    32ca:	fe cf       	rjmp	.-4      	; 0x32c8 <power_off+0x16>
	return SPDR;
    32cc:	8f b1       	in	r24, 0x0f	; 15

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
    32ce:	8f 3f       	cpi	r24, 0xFF	; 255
    32d0:	21 f0       	breq	.+8      	; 0x32da <power_off+0x28>
    32d2:	80 91 20 01 	lds	r24, 0x0120
    32d6:	88 23       	and	r24, r24
    32d8:	b1 f7       	brne	.-20     	; 0x32c6 <power_off+0x14>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    32da:	c4 9a       	sbi	0x18, 4	; 24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    32dc:	8f ef       	ldi	r24, 0xFF	; 255
    32de:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    32e0:	77 9b       	sbis	0x0e, 7	; 14
    32e2:	fe cf       	rjmp	.-4      	; 0x32e0 <power_off+0x2e>
	return SPDR;
    32e4:	8f b1       	in	r24, 0x0f	; 15
{
	SELECT();				/* Wait for card ready */
	wait_ready();
	release_spi();

	SPCR = 0;				/* Disable SPI function */
    32e6:	1d b8       	out	0x0d, r1	; 13
	PORTB = 0b00001111;	     /* Disable drivers */
    32e8:	8f e0       	ldi	r24, 0x0F	; 15
    32ea:	88 bb       	out	0x18, r24	; 24
    DDRB =  0b00000000;
    32ec:	17 ba       	out	0x17, r1	; 23
	PORTA |=  0x80;			/* Socket power OFF */
    32ee:	df 9a       	sbi	0x1b, 7	; 27
	Stat |= STA_NOINIT;		/* Set STA_NOINIT */
    32f0:	80 91 90 00 	lds	r24, 0x0090
    32f4:	81 60       	ori	r24, 0x01	; 1
    32f6:	80 93 90 00 	sts	0x0090, r24
}
    32fa:	08 95       	ret

000032fc <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    32fc:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 10;
    32fe:	8a e0       	ldi	r24, 0x0A	; 10
    3300:	80 93 1f 01 	sts	0x011F, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3304:	9f ef       	ldi	r25, 0xFF	; 255
    3306:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3308:	77 9b       	sbis	0x0e, 7	; 14
    330a:	fe cf       	rjmp	.-4      	; 0x3308 <rcvr_datablock+0xc>
	return SPDR;
    330c:	8f b1       	in	r24, 0x0f	; 15


	Timer1 = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
    330e:	8f 3f       	cpi	r24, 0xFF	; 255
    3310:	29 f4       	brne	.+10     	; 0x331c <rcvr_datablock+0x20>
    3312:	80 91 1f 01 	lds	r24, 0x011F
    3316:	88 23       	and	r24, r24
    3318:	b1 f7       	brne	.-20     	; 0x3306 <rcvr_datablock+0xa>
    331a:	29 c0       	rjmp	.+82     	; 0x336e <rcvr_datablock+0x72>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
    331c:	8e 3f       	cpi	r24, 0xFE	; 254
    331e:	39 f5       	brne	.+78     	; 0x336e <rcvr_datablock+0x72>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    3320:	9f ef       	ldi	r25, 0xFF	; 255
    3322:	9f b9       	out	0x0f, r25	; 15
    3324:	77 9b       	sbis	0x0e, 7	; 14
    3326:	fe cf       	rjmp	.-4      	; 0x3324 <rcvr_datablock+0x28>
    3328:	8f b1       	in	r24, 0x0f	; 15
    332a:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
    332c:	9f b9       	out	0x0f, r25	; 15
    332e:	77 9b       	sbis	0x0e, 7	; 14
    3330:	fe cf       	rjmp	.-4      	; 0x332e <rcvr_datablock+0x32>
    3332:	8f b1       	in	r24, 0x0f	; 15
    3334:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
    3336:	9f b9       	out	0x0f, r25	; 15
    3338:	77 9b       	sbis	0x0e, 7	; 14
    333a:	fe cf       	rjmp	.-4      	; 0x3338 <rcvr_datablock+0x3c>
    333c:	8f b1       	in	r24, 0x0f	; 15
    333e:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
    3340:	9f b9       	out	0x0f, r25	; 15
    3342:	77 9b       	sbis	0x0e, 7	; 14
    3344:	fe cf       	rjmp	.-4      	; 0x3342 <rcvr_datablock+0x46>
    3346:	8f b1       	in	r24, 0x0f	; 15
    3348:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
    334a:	64 50       	subi	r22, 0x04	; 4
    334c:	70 40       	sbci	r23, 0x00	; 0
    334e:	11 f0       	breq	.+4      	; 0x3354 <rcvr_datablock+0x58>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    3350:	34 96       	adiw	r30, 0x04	; 4
    3352:	e7 cf       	rjmp	.-50     	; 0x3322 <rcvr_datablock+0x26>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3354:	8f ef       	ldi	r24, 0xFF	; 255
    3356:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3358:	77 9b       	sbis	0x0e, 7	; 14
    335a:	fe cf       	rjmp	.-4      	; 0x3358 <rcvr_datablock+0x5c>
	return SPDR;
    335c:	8f b1       	in	r24, 0x0f	; 15
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    335e:	8f ef       	ldi	r24, 0xFF	; 255
    3360:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3362:	77 9b       	sbis	0x0e, 7	; 14
    3364:	fe cf       	rjmp	.-4      	; 0x3362 <rcvr_datablock+0x66>
	return SPDR;
    3366:	8f b1       	in	r24, 0x0f	; 15
    3368:	21 e0       	ldi	r18, 0x01	; 1
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <rcvr_datablock+0x76>
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
}
    3372:	c9 01       	movw	r24, r18
    3374:	08 95       	ret

00003376 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    3376:	fc 01       	movw	r30, r24
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    3378:	82 e3       	ldi	r24, 0x32	; 50
    337a:	80 93 20 01 	sts	0x0120, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    337e:	8f ef       	ldi	r24, 0xFF	; 255
    3380:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3382:	77 9b       	sbis	0x0e, 7	; 14
    3384:	fe cf       	rjmp	.-4      	; 0x3382 <xmit_datablock+0xc>
	return SPDR;
    3386:	8f b1       	in	r24, 0x0f	; 15
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3388:	9f ef       	ldi	r25, 0xFF	; 255
    338a:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    338c:	77 9b       	sbis	0x0e, 7	; 14
    338e:	fe cf       	rjmp	.-4      	; 0x338c <xmit_datablock+0x16>
	return SPDR;
    3390:	8f b1       	in	r24, 0x0f	; 15

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
    3392:	8f 3f       	cpi	r24, 0xFF	; 255
    3394:	39 f0       	breq	.+14     	; 0x33a4 <xmit_datablock+0x2e>
    3396:	80 91 20 01 	lds	r24, 0x0120
    339a:	88 23       	and	r24, r24
    339c:	b1 f7       	brne	.-20     	; 0x338a <xmit_datablock+0x14>
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	2b c0       	rjmp	.+86     	; 0x33fa <xmit_datablock+0x84>
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;

	xmit_spi(token);					/* Xmit data token */
    33a4:	6f b9       	out	0x0f, r22	; 15
    33a6:	77 9b       	sbis	0x0e, 7	; 14
    33a8:	fe cf       	rjmp	.-4      	; 0x33a6 <xmit_datablock+0x30>
	if (token != 0xFD) {	/* Is data token */
    33aa:	6d 3f       	cpi	r22, 0xFD	; 253
    33ac:	19 f4       	brne	.+6      	; 0x33b4 <xmit_datablock+0x3e>
    33ae:	21 e0       	ldi	r18, 0x01	; 1
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	23 c0       	rjmp	.+70     	; 0x33fa <xmit_datablock+0x84>
    33b4:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    33b6:	80 81       	ld	r24, Z
    33b8:	8f b9       	out	0x0f, r24	; 15
    33ba:	77 9b       	sbis	0x0e, 7	; 14
    33bc:	fe cf       	rjmp	.-4      	; 0x33ba <xmit_datablock+0x44>
			xmit_spi(*buff++);
    33be:	81 81       	ldd	r24, Z+1	; 0x01
    33c0:	8f b9       	out	0x0f, r24	; 15
    33c2:	77 9b       	sbis	0x0e, 7	; 14
    33c4:	fe cf       	rjmp	.-4      	; 0x33c2 <xmit_datablock+0x4c>
		} while (--wc);
    33c6:	91 50       	subi	r25, 0x01	; 1
    33c8:	11 f0       	breq	.+4      	; 0x33ce <xmit_datablock+0x58>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    33ca:	32 96       	adiw	r30, 0x02	; 2
    33cc:	f4 cf       	rjmp	.-24     	; 0x33b6 <xmit_datablock+0x40>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
    33ce:	8f ef       	ldi	r24, 0xFF	; 255
    33d0:	8f b9       	out	0x0f, r24	; 15
    33d2:	77 9b       	sbis	0x0e, 7	; 14
    33d4:	fe cf       	rjmp	.-4      	; 0x33d2 <xmit_datablock+0x5c>
		xmit_spi(0xFF);
    33d6:	8f ef       	ldi	r24, 0xFF	; 255
    33d8:	8f b9       	out	0x0f, r24	; 15
    33da:	77 9b       	sbis	0x0e, 7	; 14
    33dc:	fe cf       	rjmp	.-4      	; 0x33da <xmit_datablock+0x64>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    33de:	8f ef       	ldi	r24, 0xFF	; 255
    33e0:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    33e2:	77 9b       	sbis	0x0e, 7	; 14
    33e4:	fe cf       	rjmp	.-4      	; 0x33e2 <xmit_datablock+0x6c>
	return SPDR;
    33e6:	8f b1       	in	r24, 0x0f	; 15
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	8f 71       	andi	r24, 0x1F	; 31
    33ec:	85 30       	cpi	r24, 0x05	; 5
    33ee:	09 f0       	breq	.+2      	; 0x33f2 <xmit_datablock+0x7c>
    33f0:	91 e0       	ldi	r25, 0x01	; 1
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	98 27       	eor	r25, r24
    33f6:	29 2f       	mov	r18, r25
    33f8:	30 e0       	ldi	r19, 0x00	; 0
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
    33fa:	c9 01       	movw	r24, r18
    33fc:	08 95       	ret

000033fe <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    33fe:	df 92       	push	r13
    3400:	ef 92       	push	r14
    3402:	ff 92       	push	r15
    3404:	0f 93       	push	r16
    3406:	1f 93       	push	r17
    3408:	d8 2e       	mov	r13, r24
    340a:	7a 01       	movw	r14, r20
    340c:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    340e:	87 ff       	sbrs	r24, 7
    3410:	0c c0       	rjmp	.+24     	; 0x342a <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    3412:	87 e7       	ldi	r24, 0x77	; 119
    3414:	40 e0       	ldi	r20, 0x00	; 0
    3416:	50 e0       	ldi	r21, 0x00	; 0
    3418:	60 e0       	ldi	r22, 0x00	; 0
    341a:	70 e0       	ldi	r23, 0x00	; 0
    341c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
		if (res > 1) return res;
    3420:	82 30       	cpi	r24, 0x02	; 2
    3422:	08 f0       	brcs	.+2      	; 0x3426 <send_cmd+0x28>
    3424:	53 c0       	rjmp	.+166    	; 0x34cc <send_cmd+0xce>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    3426:	8f e7       	ldi	r24, 0x7F	; 127
    3428:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	DESELECT();
    342a:	c4 9a       	sbi	0x18, 4	; 24
	SELECT();
    342c:	c4 98       	cbi	0x18, 4	; 24
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    342e:	82 e3       	ldi	r24, 0x32	; 50
    3430:	80 93 20 01 	sts	0x0120, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3434:	8f ef       	ldi	r24, 0xFF	; 255
    3436:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3438:	77 9b       	sbis	0x0e, 7	; 14
    343a:	fe cf       	rjmp	.-4      	; 0x3438 <send_cmd+0x3a>
	return SPDR;
    343c:	8f b1       	in	r24, 0x0f	; 15
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    343e:	9f ef       	ldi	r25, 0xFF	; 255
    3440:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3442:	77 9b       	sbis	0x0e, 7	; 14
    3444:	fe cf       	rjmp	.-4      	; 0x3442 <send_cmd+0x44>
	return SPDR;
    3446:	8f b1       	in	r24, 0x0f	; 15

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
    3448:	8f 3f       	cpi	r24, 0xFF	; 255
    344a:	31 f0       	breq	.+12     	; 0x3458 <send_cmd+0x5a>
    344c:	80 91 20 01 	lds	r24, 0x0120
    3450:	88 23       	and	r24, r24
    3452:	b1 f7       	brne	.-20     	; 0x3440 <send_cmd+0x42>
    3454:	8f ef       	ldi	r24, 0xFF	; 255
    3456:	3a c0       	rjmp	.+116    	; 0x34cc <send_cmd+0xce>
	DESELECT();
	SELECT();
	if (wait_ready() != 0xFF) return 0xFF;

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
    3458:	df b8       	out	0x0f, r13	; 15
    345a:	77 9b       	sbis	0x0e, 7	; 14
    345c:	fe cf       	rjmp	.-4      	; 0x345a <send_cmd+0x5c>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    345e:	81 2f       	mov	r24, r17
    3460:	99 27       	eor	r25, r25
    3462:	aa 27       	eor	r26, r26
    3464:	bb 27       	eor	r27, r27
    3466:	8f b9       	out	0x0f, r24	; 15
    3468:	77 9b       	sbis	0x0e, 7	; 14
    346a:	fe cf       	rjmp	.-4      	; 0x3468 <send_cmd+0x6a>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    346c:	c8 01       	movw	r24, r16
    346e:	aa 27       	eor	r26, r26
    3470:	bb 27       	eor	r27, r27
    3472:	8f b9       	out	0x0f, r24	; 15
    3474:	77 9b       	sbis	0x0e, 7	; 14
    3476:	fe cf       	rjmp	.-4      	; 0x3474 <send_cmd+0x76>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    3478:	bb 27       	eor	r27, r27
    347a:	a1 2f       	mov	r26, r17
    347c:	90 2f       	mov	r25, r16
    347e:	8f 2d       	mov	r24, r15
    3480:	8f b9       	out	0x0f, r24	; 15
    3482:	77 9b       	sbis	0x0e, 7	; 14
    3484:	fe cf       	rjmp	.-4      	; 0x3482 <send_cmd+0x84>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    3486:	ef b8       	out	0x0f, r14	; 15
    3488:	77 9b       	sbis	0x0e, 7	; 14
    348a:	fe cf       	rjmp	.-4      	; 0x3488 <send_cmd+0x8a>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    348c:	80 e4       	ldi	r24, 0x40	; 64
    348e:	d8 16       	cp	r13, r24
    3490:	11 f4       	brne	.+4      	; 0x3496 <send_cmd+0x98>
    3492:	85 e9       	ldi	r24, 0x95	; 149
    3494:	06 c0       	rjmp	.+12     	; 0x34a2 <send_cmd+0xa4>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    3496:	88 e4       	ldi	r24, 0x48	; 72
    3498:	d8 16       	cp	r13, r24
    349a:	11 f4       	brne	.+4      	; 0x34a0 <send_cmd+0xa2>
    349c:	87 e8       	ldi	r24, 0x87	; 135
    349e:	01 c0       	rjmp	.+2      	; 0x34a2 <send_cmd+0xa4>
    34a0:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    34a2:	8f b9       	out	0x0f, r24	; 15
    34a4:	77 9b       	sbis	0x0e, 7	; 14
    34a6:	fe cf       	rjmp	.-4      	; 0x34a4 <send_cmd+0xa6>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    34a8:	8c e4       	ldi	r24, 0x4C	; 76
    34aa:	d8 16       	cp	r13, r24
    34ac:	29 f4       	brne	.+10     	; 0x34b8 <send_cmd+0xba>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    34ae:	8f ef       	ldi	r24, 0xFF	; 255
    34b0:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    34b2:	77 9b       	sbis	0x0e, 7	; 14
    34b4:	fe cf       	rjmp	.-4      	; 0x34b2 <send_cmd+0xb4>
	return SPDR;
    34b6:	8f b1       	in	r24, 0x0f	; 15
    34b8:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    34ba:	2f ef       	ldi	r18, 0xFF	; 255
    34bc:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    34be:	77 9b       	sbis	0x0e, 7	; 14
    34c0:	fe cf       	rjmp	.-4      	; 0x34be <send_cmd+0xc0>
	return SPDR;
    34c2:	8f b1       	in	r24, 0x0f	; 15
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
    34c4:	87 ff       	sbrs	r24, 7
    34c6:	02 c0       	rjmp	.+4      	; 0x34cc <send_cmd+0xce>
    34c8:	91 50       	subi	r25, 0x01	; 1
    34ca:	c1 f7       	brne	.-16     	; 0x34bc <send_cmd+0xbe>

	return res;			/* Return with the response value */
}
    34cc:	1f 91       	pop	r17
    34ce:	0f 91       	pop	r16
    34d0:	ff 90       	pop	r15
    34d2:	ef 90       	pop	r14
    34d4:	df 90       	pop	r13
    34d6:	08 95       	ret

000034d8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    34d8:	a4 e0       	ldi	r26, 0x04	; 4
    34da:	b0 e0       	ldi	r27, 0x00	; 0
    34dc:	e2 e7       	ldi	r30, 0x72	; 114
    34de:	fa e1       	ldi	r31, 0x1A	; 26
    34e0:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <__prologue_saves__+0x18>
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    34e4:	88 23       	and	r24, r24
    34e6:	11 f0       	breq	.+4      	; 0x34ec <disk_initialize+0x14>
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	b6 c0       	rjmp	.+364    	; 0x3658 <disk_initialize+0x180>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    34ec:	80 91 90 00 	lds	r24, 0x0090
    34f0:	81 fd       	sbrc	r24, 1
    34f2:	b0 c0       	rjmp	.+352    	; 0x3654 <disk_initialize+0x17c>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
	for (Timer1 = 3; Timer1; );	/* Wait for 30ms */
    34f4:	83 e0       	ldi	r24, 0x03	; 3
    34f6:	80 93 1f 01 	sts	0x011F, r24
    34fa:	80 91 1f 01 	lds	r24, 0x011F
    34fe:	88 23       	and	r24, r24
    3500:	e1 f7       	brne	.-8      	; 0x34fa <disk_initialize+0x22>
	PORTB = 0b10110011;				/* Enable drivers */
    3502:	83 eb       	ldi	r24, 0xB3	; 179
    3504:	88 bb       	out	0x18, r24	; 24
    DDRB =  0b10110000;
    3506:	80 eb       	ldi	r24, 0xB0	; 176
    3508:	87 bb       	out	0x17, r24	; 23
    SPCR = 0b01010000;			/* Initialize SPI port (Mode 0) */
    350a:	80 e5       	ldi	r24, 0x50	; 80
    350c:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0b00000001;
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	8e b9       	out	0x0e, r24	; 14
    3512:	8a e0       	ldi	r24, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3514:	9f ef       	ldi	r25, 0xFF	; 255
    3516:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3518:	77 9b       	sbis	0x0e, 7	; 14
    351a:	fe cf       	rjmp	.-4      	; 0x3518 <disk_initialize+0x40>
	return SPDR;
    351c:	2f b1       	in	r18, 0x0f	; 15

	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    351e:	81 50       	subi	r24, 0x01	; 1
    3520:	d1 f7       	brne	.-12     	; 0x3516 <disk_initialize+0x3e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    3522:	80 e4       	ldi	r24, 0x40	; 64
    3524:	40 e0       	ldi	r20, 0x00	; 0
    3526:	50 e0       	ldi	r21, 0x00	; 0
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	70 e0       	ldi	r23, 0x00	; 0
    352c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    3530:	81 30       	cpi	r24, 0x01	; 1
    3532:	09 f0       	breq	.+2      	; 0x3536 <disk_initialize+0x5e>
    3534:	7c c0       	rjmp	.+248    	; 0x362e <disk_initialize+0x156>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    3536:	84 e6       	ldi	r24, 0x64	; 100
    3538:	80 93 1f 01 	sts	0x011F, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
    353c:	88 e4       	ldi	r24, 0x48	; 72
    353e:	4a ea       	ldi	r20, 0xAA	; 170
    3540:	51 e0       	ldi	r21, 0x01	; 1
    3542:	60 e0       	ldi	r22, 0x00	; 0
    3544:	70 e0       	ldi	r23, 0x00	; 0
    3546:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    354a:	81 30       	cpi	r24, 0x01	; 1
    354c:	09 f0       	breq	.+2      	; 0x3550 <disk_initialize+0x78>
    354e:	48 c0       	rjmp	.+144    	; 0x35e0 <disk_initialize+0x108>
    3550:	7e 01       	movw	r14, r28
    3552:	08 94       	sec
    3554:	e1 1c       	adc	r14, r1
    3556:	f1 1c       	adc	r15, r1
    3558:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    355a:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    355c:	9e 01       	movw	r18, r28
    355e:	2b 5f       	subi	r18, 0xFB	; 251
    3560:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3562:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3564:	77 9b       	sbis	0x0e, 7	; 14
    3566:	fe cf       	rjmp	.-4      	; 0x3564 <disk_initialize+0x8c>
	return SPDR;
    3568:	8f b1       	in	r24, 0x0f	; 15

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    356a:	f8 01       	movw	r30, r16
    356c:	81 93       	st	Z+, r24
    356e:	8f 01       	movw	r16, r30
    3570:	e2 17       	cp	r30, r18
    3572:	f3 07       	cpc	r31, r19
    3574:	b1 f7       	brne	.-20     	; 0x3562 <disk_initialize+0x8a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    3576:	8b 81       	ldd	r24, Y+3	; 0x03
    3578:	81 30       	cpi	r24, 0x01	; 1
    357a:	09 f0       	breq	.+2      	; 0x357e <disk_initialize+0xa6>
    357c:	58 c0       	rjmp	.+176    	; 0x362e <disk_initialize+0x156>
    357e:	8c 81       	ldd	r24, Y+4	; 0x04
    3580:	8a 3a       	cpi	r24, 0xAA	; 170
    3582:	09 f0       	breq	.+2      	; 0x3586 <disk_initialize+0xae>
    3584:	54 c0       	rjmp	.+168    	; 0x362e <disk_initialize+0x156>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3586:	80 91 1f 01 	lds	r24, 0x011F
    358a:	88 23       	and	r24, r24
    358c:	49 f0       	breq	.+18     	; 0x35a0 <disk_initialize+0xc8>
    358e:	89 ee       	ldi	r24, 0xE9	; 233
    3590:	40 e0       	ldi	r20, 0x00	; 0
    3592:	50 e0       	ldi	r21, 0x00	; 0
    3594:	60 e0       	ldi	r22, 0x00	; 0
    3596:	70 e4       	ldi	r23, 0x40	; 64
    3598:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    359c:	88 23       	and	r24, r24
    359e:	99 f7       	brne	.-26     	; 0x3586 <disk_initialize+0xae>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    35a0:	80 91 1f 01 	lds	r24, 0x011F
    35a4:	88 23       	and	r24, r24
    35a6:	09 f4       	brne	.+2      	; 0x35aa <disk_initialize+0xd2>
    35a8:	42 c0       	rjmp	.+132    	; 0x362e <disk_initialize+0x156>
    35aa:	8a e7       	ldi	r24, 0x7A	; 122
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	60 e0       	ldi	r22, 0x00	; 0
    35b2:	70 e0       	ldi	r23, 0x00	; 0
    35b4:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    35b8:	88 23       	and	r24, r24
    35ba:	c9 f5       	brne	.+114    	; 0x362e <disk_initialize+0x156>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    35bc:	9f ef       	ldi	r25, 0xFF	; 255
    35be:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    35c0:	77 9b       	sbis	0x0e, 7	; 14
    35c2:	fe cf       	rjmp	.-4      	; 0x35c0 <disk_initialize+0xe8>
	return SPDR;
    35c4:	8f b1       	in	r24, 0x0f	; 15
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    35c6:	f7 01       	movw	r30, r14
    35c8:	81 93       	st	Z+, r24
    35ca:	7f 01       	movw	r14, r30
    35cc:	e0 17       	cp	r30, r16
    35ce:	f1 07       	cpc	r31, r17
    35d0:	b1 f7       	brne	.-20     	; 0x35be <disk_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? 12 : 4;
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	86 fd       	sbrc	r24, 6
    35d6:	02 c0       	rjmp	.+4      	; 0x35dc <disk_initialize+0x104>
    35d8:	14 e0       	ldi	r17, 0x04	; 4
    35da:	2a c0       	rjmp	.+84     	; 0x3630 <disk_initialize+0x158>
    35dc:	1c e0       	ldi	r17, 0x0C	; 12
    35de:	28 c0       	rjmp	.+80     	; 0x3630 <disk_initialize+0x158>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    35e0:	89 ee       	ldi	r24, 0xE9	; 233
    35e2:	40 e0       	ldi	r20, 0x00	; 0
    35e4:	50 e0       	ldi	r21, 0x00	; 0
    35e6:	60 e0       	ldi	r22, 0x00	; 0
    35e8:	70 e0       	ldi	r23, 0x00	; 0
    35ea:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    35ee:	82 30       	cpi	r24, 0x02	; 2
    35f0:	18 f0       	brcs	.+6      	; 0x35f8 <disk_initialize+0x120>
    35f2:	01 e4       	ldi	r16, 0x41	; 65
    35f4:	11 e0       	ldi	r17, 0x01	; 1
    35f6:	02 c0       	rjmp	.+4      	; 0x35fc <disk_initialize+0x124>
    35f8:	09 ee       	ldi	r16, 0xE9	; 233
    35fa:	12 e0       	ldi	r17, 0x02	; 2
				ty = 2; cmd = ACMD41;	/* SDSC */
			} else {
				ty = 1; cmd = CMD1;		/* MMC */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    35fc:	80 91 1f 01 	lds	r24, 0x011F
    3600:	88 23       	and	r24, r24
    3602:	49 f0       	breq	.+18     	; 0x3616 <disk_initialize+0x13e>
    3604:	80 2f       	mov	r24, r16
    3606:	40 e0       	ldi	r20, 0x00	; 0
    3608:	50 e0       	ldi	r21, 0x00	; 0
    360a:	60 e0       	ldi	r22, 0x00	; 0
    360c:	70 e0       	ldi	r23, 0x00	; 0
    360e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    3612:	88 23       	and	r24, r24
    3614:	99 f7       	brne	.-26     	; 0x35fc <disk_initialize+0x124>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3616:	80 91 1f 01 	lds	r24, 0x011F
    361a:	88 23       	and	r24, r24
    361c:	41 f0       	breq	.+16     	; 0x362e <disk_initialize+0x156>
    361e:	80 e5       	ldi	r24, 0x50	; 80
    3620:	40 e0       	ldi	r20, 0x00	; 0
    3622:	52 e0       	ldi	r21, 0x02	; 2
    3624:	60 e0       	ldi	r22, 0x00	; 0
    3626:	70 e0       	ldi	r23, 0x00	; 0
    3628:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    362c:	81 11       	cpse	r24, r1
    362e:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
    3630:	10 93 21 01 	sts	0x0121, r17
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    3634:	c4 9a       	sbi	0x18, 4	; 24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3636:	8f ef       	ldi	r24, 0xFF	; 255
    3638:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    363a:	77 9b       	sbis	0x0e, 7	; 14
    363c:	fe cf       	rjmp	.-4      	; 0x363a <disk_initialize+0x162>
	return SPDR;
    363e:	8f b1       	in	r24, 0x0f	; 15
		}
	}
	CardType = ty;
	release_spi();

	if (ty) {			/* Initialization succeded */
    3640:	11 23       	and	r17, r17
    3642:	31 f0       	breq	.+12     	; 0x3650 <disk_initialize+0x178>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    3644:	80 91 90 00 	lds	r24, 0x0090
    3648:	8e 7f       	andi	r24, 0xFE	; 254
    364a:	80 93 90 00 	sts	0x0090, r24
    364e:	02 c0       	rjmp	.+4      	; 0x3654 <disk_initialize+0x17c>
	} else {			/* Initialization failed */
		power_off();
    3650:	0e 94 59 19 	call	0x32b2	; 0x32b2 <power_off>
	}

	return Stat;
    3654:	80 91 90 00 	lds	r24, 0x0090
}
    3658:	24 96       	adiw	r28, 0x04	; 4
    365a:	e6 e0       	ldi	r30, 0x06	; 6
    365c:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__epilogue_restores__+0x18>

00003660 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    3660:	88 23       	and	r24, r24
    3662:	11 f0       	breq	.+4      	; 0x3668 <disk_status+0x8>
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	08 95       	ret
	return Stat;
    3668:	80 91 90 00 	lds	r24, 0x0090
}
    366c:	08 95       	ret

0000366e <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    366e:	0f 93       	push	r16
    3670:	cf 93       	push	r28
    3672:	df 93       	push	r29
    3674:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
    3676:	88 23       	and	r24, r24
    3678:	09 f0       	breq	.+2      	; 0x367c <disk_read+0xe>
    367a:	4f c0       	rjmp	.+158    	; 0x371a <disk_read+0xac>
    367c:	00 23       	and	r16, r16
    367e:	09 f4       	brne	.+2      	; 0x3682 <disk_read+0x14>
    3680:	4c c0       	rjmp	.+152    	; 0x371a <disk_read+0xac>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3682:	80 91 90 00 	lds	r24, 0x0090
    3686:	80 ff       	sbrs	r24, 0
    3688:	03 c0       	rjmp	.+6      	; 0x3690 <disk_read+0x22>
    368a:	23 e0       	ldi	r18, 0x03	; 3
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	47 c0       	rjmp	.+142    	; 0x371e <disk_read+0xb0>

	if (!(CardType & 8)) sector *= 512;	/* Convert to byte address if needed */
    3690:	80 91 21 01 	lds	r24, 0x0121
    3694:	83 fd       	sbrc	r24, 3
    3696:	07 c0       	rjmp	.+14     	; 0x36a6 <disk_read+0x38>
    3698:	69 e0       	ldi	r22, 0x09	; 9
    369a:	22 0f       	add	r18, r18
    369c:	33 1f       	adc	r19, r19
    369e:	44 1f       	adc	r20, r20
    36a0:	55 1f       	adc	r21, r21
    36a2:	6a 95       	dec	r22
    36a4:	d1 f7       	brne	.-12     	; 0x369a <disk_read+0x2c>

	if (count == 1) {	/* Single block read */
    36a6:	01 30       	cpi	r16, 0x01	; 1
    36a8:	89 f4       	brne	.+34     	; 0x36cc <disk_read+0x5e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    36aa:	81 e5       	ldi	r24, 0x51	; 81
    36ac:	ba 01       	movw	r22, r20
    36ae:	a9 01       	movw	r20, r18
    36b0:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    36b4:	88 23       	and	r24, r24
    36b6:	21 f5       	brne	.+72     	; 0x3700 <disk_read+0x92>
    36b8:	ce 01       	movw	r24, r28
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	72 e0       	ldi	r23, 0x02	; 2
    36be:	0e 94 7e 19 	call	0x32fc	; 0x32fc <rcvr_datablock>
    36c2:	00 e0       	ldi	r16, 0x00	; 0
    36c4:	89 2b       	or	r24, r25
    36c6:	e1 f4       	brne	.+56     	; 0x3700 <disk_read+0x92>
    36c8:	01 e0       	ldi	r16, 0x01	; 1
    36ca:	1a c0       	rjmp	.+52     	; 0x3700 <disk_read+0x92>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    36cc:	82 e5       	ldi	r24, 0x52	; 82
    36ce:	ba 01       	movw	r22, r20
    36d0:	a9 01       	movw	r20, r18
    36d2:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    36d6:	88 23       	and	r24, r24
    36d8:	99 f4       	brne	.+38     	; 0x3700 <disk_read+0x92>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    36da:	ce 01       	movw	r24, r28
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	72 e0       	ldi	r23, 0x02	; 2
    36e0:	0e 94 7e 19 	call	0x32fc	; 0x32fc <rcvr_datablock>
    36e4:	89 2b       	or	r24, r25
    36e6:	29 f0       	breq	.+10     	; 0x36f2 <disk_read+0x84>
				buff += 512;
			} while (--count);
    36e8:	01 50       	subi	r16, 0x01	; 1
    36ea:	19 f0       	breq	.+6      	; 0x36f2 <disk_read+0x84>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
    36ec:	c0 50       	subi	r28, 0x00	; 0
    36ee:	de 4f       	sbci	r29, 0xFE	; 254
    36f0:	f4 cf       	rjmp	.-24     	; 0x36da <disk_read+0x6c>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    36f2:	8c e4       	ldi	r24, 0x4C	; 76
    36f4:	40 e0       	ldi	r20, 0x00	; 0
    36f6:	50 e0       	ldi	r21, 0x00	; 0
    36f8:	60 e0       	ldi	r22, 0x00	; 0
    36fa:	70 e0       	ldi	r23, 0x00	; 0
    36fc:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    3700:	c4 9a       	sbi	0x18, 4	; 24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3702:	8f ef       	ldi	r24, 0xFF	; 255
    3704:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3706:	77 9b       	sbis	0x0e, 7	; 14
    3708:	fe cf       	rjmp	.-4      	; 0x3706 <disk_read+0x98>
	return SPDR;
    370a:	8f b1       	in	r24, 0x0f	; 15
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	release_spi();

	return count ? RES_ERROR : RES_OK;
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	00 23       	and	r16, r16
    3712:	29 f0       	breq	.+10     	; 0x371e <disk_read+0xb0>
    3714:	21 e0       	ldi	r18, 0x01	; 1
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	02 c0       	rjmp	.+4      	; 0x371e <disk_read+0xb0>
    371a:	24 e0       	ldi	r18, 0x04	; 4
    371c:	30 e0       	ldi	r19, 0x00	; 0
}
    371e:	c9 01       	movw	r24, r18
    3720:	df 91       	pop	r29
    3722:	cf 91       	pop	r28
    3724:	0f 91       	pop	r16
    3726:	08 95       	ret

00003728 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    3728:	cf 92       	push	r12
    372a:	df 92       	push	r13
    372c:	ef 92       	push	r14
    372e:	ff 92       	push	r15
    3730:	0f 93       	push	r16
    3732:	cf 93       	push	r28
    3734:	df 93       	push	r29
    3736:	eb 01       	movw	r28, r22
    3738:	69 01       	movw	r12, r18
    373a:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    373c:	88 23       	and	r24, r24
    373e:	09 f0       	breq	.+2      	; 0x3742 <disk_write+0x1a>
    3740:	5e c0       	rjmp	.+188    	; 0x37fe <disk_write+0xd6>
    3742:	00 23       	and	r16, r16
    3744:	09 f4       	brne	.+2      	; 0x3748 <disk_write+0x20>
    3746:	5b c0       	rjmp	.+182    	; 0x37fe <disk_write+0xd6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3748:	80 91 90 00 	lds	r24, 0x0090
    374c:	80 ff       	sbrs	r24, 0
    374e:	03 c0       	rjmp	.+6      	; 0x3756 <disk_write+0x2e>
    3750:	23 e0       	ldi	r18, 0x03	; 3
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	56 c0       	rjmp	.+172    	; 0x3802 <disk_write+0xda>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3756:	80 91 90 00 	lds	r24, 0x0090
    375a:	82 ff       	sbrs	r24, 2
    375c:	03 c0       	rjmp	.+6      	; 0x3764 <disk_write+0x3c>
    375e:	22 e0       	ldi	r18, 0x02	; 2
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	4f c0       	rjmp	.+158    	; 0x3802 <disk_write+0xda>

	if (!(CardType & 8)) sector *= 512;	/* Convert to byte address if needed */
    3764:	80 91 21 01 	lds	r24, 0x0121
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	83 fd       	sbrc	r24, 3
    376c:	07 c0       	rjmp	.+14     	; 0x377c <disk_write+0x54>
    376e:	79 e0       	ldi	r23, 0x09	; 9
    3770:	cc 0c       	add	r12, r12
    3772:	dd 1c       	adc	r13, r13
    3774:	ee 1c       	adc	r14, r14
    3776:	ff 1c       	adc	r15, r15
    3778:	7a 95       	dec	r23
    377a:	d1 f7       	brne	.-12     	; 0x3770 <disk_write+0x48>

	if (count == 1) {	/* Single block write */
    377c:	01 30       	cpi	r16, 0x01	; 1
    377e:	69 f4       	brne	.+26     	; 0x379a <disk_write+0x72>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    3780:	88 e5       	ldi	r24, 0x58	; 88
    3782:	b7 01       	movw	r22, r14
    3784:	a6 01       	movw	r20, r12
    3786:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    378a:	88 23       	and	r24, r24
    378c:	59 f5       	brne	.+86     	; 0x37e4 <disk_write+0xbc>
    378e:	ce 01       	movw	r24, r28
    3790:	6e ef       	ldi	r22, 0xFE	; 254
    3792:	0e 94 bb 19 	call	0x3376	; 0x3376 <xmit_datablock>
    3796:	00 e0       	ldi	r16, 0x00	; 0
    3798:	22 c0       	rjmp	.+68     	; 0x37de <disk_write+0xb6>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & 6) send_cmd(ACMD23, count);
    379a:	86 70       	andi	r24, 0x06	; 6
    379c:	90 70       	andi	r25, 0x00	; 0
    379e:	89 2b       	or	r24, r25
    37a0:	39 f0       	breq	.+14     	; 0x37b0 <disk_write+0x88>
    37a2:	40 2f       	mov	r20, r16
    37a4:	50 e0       	ldi	r21, 0x00	; 0
    37a6:	60 e0       	ldi	r22, 0x00	; 0
    37a8:	70 e0       	ldi	r23, 0x00	; 0
    37aa:	87 ed       	ldi	r24, 0xD7	; 215
    37ac:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    37b0:	89 e5       	ldi	r24, 0x59	; 89
    37b2:	b7 01       	movw	r22, r14
    37b4:	a6 01       	movw	r20, r12
    37b6:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    37ba:	88 23       	and	r24, r24
    37bc:	99 f4       	brne	.+38     	; 0x37e4 <disk_write+0xbc>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    37be:	ce 01       	movw	r24, r28
    37c0:	6c ef       	ldi	r22, 0xFC	; 252
    37c2:	0e 94 bb 19 	call	0x3376	; 0x3376 <xmit_datablock>
    37c6:	89 2b       	or	r24, r25
    37c8:	29 f0       	breq	.+10     	; 0x37d4 <disk_write+0xac>
				buff += 512;
			} while (--count);
    37ca:	01 50       	subi	r16, 0x01	; 1
    37cc:	19 f0       	breq	.+6      	; 0x37d4 <disk_write+0xac>
	else {				/* Multiple block write */
		if (CardType & 6) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    37ce:	c0 50       	subi	r28, 0x00	; 0
    37d0:	de 4f       	sbci	r29, 0xFE	; 254
    37d2:	f5 cf       	rjmp	.-22     	; 0x37be <disk_write+0x96>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	6d ef       	ldi	r22, 0xFD	; 253
    37da:	0e 94 bb 19 	call	0x3376	; 0x3376 <xmit_datablock>
    37de:	89 2b       	or	r24, r25
    37e0:	09 f4       	brne	.+2      	; 0x37e4 <disk_write+0xbc>
    37e2:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    37e4:	c4 9a       	sbi	0x18, 4	; 24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    37e6:	8f ef       	ldi	r24, 0xFF	; 255
    37e8:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    37ea:	77 9b       	sbis	0x0e, 7	; 14
    37ec:	fe cf       	rjmp	.-4      	; 0x37ea <disk_write+0xc2>
	return SPDR;
    37ee:	8f b1       	in	r24, 0x0f	; 15
				count = 1;
		}
	}
	release_spi();

	return count ? RES_ERROR : RES_OK;
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	00 23       	and	r16, r16
    37f6:	29 f0       	breq	.+10     	; 0x3802 <disk_write+0xda>
    37f8:	21 e0       	ldi	r18, 0x01	; 1
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	02 c0       	rjmp	.+4      	; 0x3802 <disk_write+0xda>
    37fe:	24 e0       	ldi	r18, 0x04	; 4
    3800:	30 e0       	ldi	r19, 0x00	; 0
}
    3802:	c9 01       	movw	r24, r18
    3804:	df 91       	pop	r29
    3806:	cf 91       	pop	r28
    3808:	0f 91       	pop	r16
    380a:	ff 90       	pop	r15
    380c:	ef 90       	pop	r14
    380e:	df 90       	pop	r13
    3810:	cf 90       	pop	r12
    3812:	08 95       	ret

00003814 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3814:	a0 e1       	ldi	r26, 0x10	; 16
    3816:	b0 e0       	ldi	r27, 0x00	; 0
    3818:	e0 e1       	ldi	r30, 0x10	; 16
    381a:	fc e1       	ldi	r31, 0x1C	; 28
    381c:	0c 94 f6 1e 	jmp	0x3dec	; 0x3dec <__prologue_saves__+0x1a>
    3820:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    3822:	88 23       	and	r24, r24
    3824:	09 f0       	breq	.+2      	; 0x3828 <disk_ioctl+0x14>
    3826:	94 c1       	rjmp	.+808    	; 0x3b50 <disk_ioctl+0x33c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    3828:	64 30       	cpi	r22, 0x04	; 4
    382a:	19 f5       	brne	.+70     	; 0x3872 <disk_ioctl+0x5e>
		switch (*ptr) {
    382c:	fa 01       	movw	r30, r20
    382e:	80 81       	ld	r24, Z
    3830:	81 30       	cpi	r24, 0x01	; 1
    3832:	49 f0       	breq	.+18     	; 0x3846 <disk_ioctl+0x32>
    3834:	81 30       	cpi	r24, 0x01	; 1
    3836:	20 f0       	brcs	.+8      	; 0x3840 <disk_ioctl+0x2c>
    3838:	82 30       	cpi	r24, 0x02	; 2
    383a:	09 f0       	breq	.+2      	; 0x383e <disk_ioctl+0x2a>
    383c:	89 c1       	rjmp	.+786    	; 0x3b50 <disk_ioctl+0x33c>
    383e:	13 c0       	rjmp	.+38     	; 0x3866 <disk_ioctl+0x52>
		case 0:		/* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
				power_off();		/* Power off */
    3840:	0e 94 59 19 	call	0x32b2	; 0x32b2 <power_off>
    3844:	13 c0       	rjmp	.+38     	; 0x386c <disk_ioctl+0x58>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
	for (Timer1 = 3; Timer1; );	/* Wait for 30ms */
    3846:	83 e0       	ldi	r24, 0x03	; 3
    3848:	80 93 1f 01 	sts	0x011F, r24
    384c:	80 91 1f 01 	lds	r24, 0x011F
    3850:	88 23       	and	r24, r24
    3852:	e1 f7       	brne	.-8      	; 0x384c <disk_ioctl+0x38>
	PORTB = 0b10110011;				/* Enable drivers */
    3854:	83 eb       	ldi	r24, 0xB3	; 179
    3856:	88 bb       	out	0x18, r24	; 24
    DDRB =  0b10110000;
    3858:	80 eb       	ldi	r24, 0xB0	; 176
    385a:	87 bb       	out	0x17, r24	; 23
    SPCR = 0b01010000;			/* Initialize SPI port (Mode 0) */
    385c:	80 e5       	ldi	r24, 0x50	; 80
    385e:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0b00000001;
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	8e b9       	out	0x0e, r24	; 14
    3864:	03 c0       	rjmp	.+6      	; 0x386c <disk_ioctl+0x58>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	fa 01       	movw	r30, r20
    386a:	81 83       	std	Z+1, r24	; 0x01
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	71 c1       	rjmp	.+738    	; 0x3b54 <disk_ioctl+0x340>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    3872:	80 91 90 00 	lds	r24, 0x0090
    3876:	80 ff       	sbrs	r24, 0
    3878:	03 c0       	rjmp	.+6      	; 0x3880 <disk_ioctl+0x6c>
    387a:	23 e0       	ldi	r18, 0x03	; 3
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	6a c1       	rjmp	.+724    	; 0x3b54 <disk_ioctl+0x340>

		switch (ctrl) {
    3880:	e6 2f       	mov	r30, r22
    3882:	f0 e0       	ldi	r31, 0x00	; 0
    3884:	ef 30       	cpi	r30, 0x0F	; 15
    3886:	f1 05       	cpc	r31, r1
    3888:	20 f4       	brcc	.+8      	; 0x3892 <disk_ioctl+0x7e>
    388a:	e1 5c       	subi	r30, 0xC1	; 193
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__tablejump2__>
    3892:	24 e0       	ldi	r18, 0x04	; 4
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	55 c1       	rjmp	.+682    	; 0x3b42 <disk_ioctl+0x32e>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			SELECT();
    3898:	c4 98       	cbi	0x18, 4	; 24
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    389a:	82 e3       	ldi	r24, 0x32	; 50
    389c:	80 93 20 01 	sts	0x0120, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    38a0:	8f ef       	ldi	r24, 0xFF	; 255
    38a2:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    38a4:	77 9b       	sbis	0x0e, 7	; 14
    38a6:	fe cf       	rjmp	.-4      	; 0x38a4 <disk_ioctl+0x90>
	return SPDR;
    38a8:	8f b1       	in	r24, 0x0f	; 15
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    38aa:	9f ef       	ldi	r25, 0xFF	; 255
    38ac:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    38ae:	77 9b       	sbis	0x0e, 7	; 14
    38b0:	fe cf       	rjmp	.-4      	; 0x38ae <disk_ioctl+0x9a>
	return SPDR;
    38b2:	8f b1       	in	r24, 0x0f	; 15

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
    38b4:	8f 3f       	cpi	r24, 0xFF	; 255
    38b6:	09 f4       	brne	.+2      	; 0x38ba <disk_ioctl+0xa6>
    38b8:	3f c1       	rjmp	.+638    	; 0x3b38 <disk_ioctl+0x324>
    38ba:	80 91 20 01 	lds	r24, 0x0120
    38be:	88 23       	and	r24, r24
    38c0:	a9 f7       	brne	.-22     	; 0x38ac <disk_ioctl+0x98>
    38c2:	3d c1       	rjmp	.+634    	; 0x3b3e <disk_ioctl+0x32a>
			if (wait_ready() == 0xFF)
				res = RES_OK;
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    38c4:	89 e4       	ldi	r24, 0x49	; 73
    38c6:	40 e0       	ldi	r20, 0x00	; 0
    38c8:	50 e0       	ldi	r21, 0x00	; 0
    38ca:	60 e0       	ldi	r22, 0x00	; 0
    38cc:	70 e0       	ldi	r23, 0x00	; 0
    38ce:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    38d2:	88 23       	and	r24, r24
    38d4:	09 f0       	breq	.+2      	; 0x38d8 <disk_ioctl+0xc4>
    38d6:	33 c1       	rjmp	.+614    	; 0x3b3e <disk_ioctl+0x32a>
    38d8:	ce 01       	movw	r24, r28
    38da:	01 96       	adiw	r24, 0x01	; 1
    38dc:	60 e1       	ldi	r22, 0x10	; 16
    38de:	70 e0       	ldi	r23, 0x00	; 0
    38e0:	0e 94 7e 19 	call	0x32fc	; 0x32fc <rcvr_datablock>
    38e4:	89 2b       	or	r24, r25
    38e6:	09 f4       	brne	.+2      	; 0x38ea <disk_ioctl+0xd6>
    38e8:	2a c1       	rjmp	.+596    	; 0x3b3e <disk_ioctl+0x32a>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    38ea:	89 81       	ldd	r24, Y+1	; 0x01
    38ec:	82 95       	swap	r24
    38ee:	86 95       	lsr	r24
    38f0:	86 95       	lsr	r24
    38f2:	83 70       	andi	r24, 0x03	; 3
    38f4:	7a 85       	ldd	r23, Y+10	; 0x0a
    38f6:	49 85       	ldd	r20, Y+9	; 0x09
    38f8:	81 30       	cpi	r24, 0x01	; 1
    38fa:	89 f4       	brne	.+34     	; 0x391e <disk_ioctl+0x10a>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    38fc:	87 2f       	mov	r24, r23
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	01 96       	adiw	r24, 0x01	; 1
    3902:	34 2f       	mov	r19, r20
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	82 0f       	add	r24, r18
    3908:	93 1f       	adc	r25, r19
    390a:	a0 e0       	ldi	r26, 0x00	; 0
    390c:	b0 e0       	ldi	r27, 0x00	; 0
    390e:	2a e0       	ldi	r18, 0x0A	; 10
    3910:	88 0f       	add	r24, r24
    3912:	99 1f       	adc	r25, r25
    3914:	aa 1f       	adc	r26, r26
    3916:	bb 1f       	adc	r27, r27
    3918:	2a 95       	dec	r18
    391a:	d1 f7       	brne	.-12     	; 0x3910 <disk_ioctl+0xfc>
    391c:	c3 c0       	rjmp	.+390    	; 0x3aa4 <disk_ioctl+0x290>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    391e:	42 95       	swap	r20
    3920:	46 95       	lsr	r20
    3922:	46 95       	lsr	r20
    3924:	43 70       	andi	r20, 0x03	; 3
    3926:	28 85       	ldd	r18, Y+8	; 0x08
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	22 0f       	add	r18, r18
    392c:	33 1f       	adc	r19, r19
    392e:	22 0f       	add	r18, r18
    3930:	33 1f       	adc	r19, r19
    3932:	24 0f       	add	r18, r20
    3934:	31 1d       	adc	r19, r1
    3936:	2f 5f       	subi	r18, 0xFF	; 255
    3938:	3f 4f       	sbci	r19, 0xFF	; 255
    393a:	8f 81       	ldd	r24, Y+7	; 0x07
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	83 70       	andi	r24, 0x03	; 3
    3940:	90 70       	andi	r25, 0x00	; 0
    3942:	98 2f       	mov	r25, r24
    3944:	88 27       	eor	r24, r24
    3946:	99 0f       	add	r25, r25
    3948:	99 0f       	add	r25, r25
    394a:	28 0f       	add	r18, r24
    394c:	39 1f       	adc	r19, r25
    394e:	40 e0       	ldi	r20, 0x00	; 0
    3950:	50 e0       	ldi	r21, 0x00	; 0
    3952:	8e 81       	ldd	r24, Y+6	; 0x06
    3954:	8f 70       	andi	r24, 0x0F	; 15
    3956:	6b 85       	ldd	r22, Y+11	; 0x0b
    3958:	66 1f       	adc	r22, r22
    395a:	66 27       	eor	r22, r22
    395c:	66 1f       	adc	r22, r22
    395e:	86 0f       	add	r24, r22
    3960:	8e 5f       	subi	r24, 0xFE	; 254
    3962:	73 70       	andi	r23, 0x03	; 3
    3964:	77 0f       	add	r23, r23
    3966:	87 0f       	add	r24, r23
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	09 97       	sbiw	r24, 0x09	; 9
    396c:	04 c0       	rjmp	.+8      	; 0x3976 <disk_ioctl+0x162>
    396e:	22 0f       	add	r18, r18
    3970:	33 1f       	adc	r19, r19
    3972:	44 1f       	adc	r20, r20
    3974:	55 1f       	adc	r21, r21
    3976:	8a 95       	dec	r24
    3978:	d2 f7       	brpl	.-12     	; 0x396e <disk_ioctl+0x15a>
    397a:	f8 01       	movw	r30, r16
    397c:	20 83       	st	Z, r18
    397e:	31 83       	std	Z+1, r19	; 0x01
    3980:	42 83       	std	Z+2, r20	; 0x02
    3982:	53 83       	std	Z+3, r21	; 0x03
    3984:	d9 c0       	rjmp	.+434    	; 0x3b38 <disk_ioctl+0x324>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	92 e0       	ldi	r25, 0x02	; 2
    398a:	fa 01       	movw	r30, r20
    398c:	91 83       	std	Z+1, r25	; 0x01
    398e:	80 83       	st	Z, r24
    3990:	d3 c0       	rjmp	.+422    	; 0x3b38 <disk_ioctl+0x324>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & 4) {			/* SDC ver 2.00 */
    3992:	80 91 21 01 	lds	r24, 0x0121
    3996:	f8 2e       	mov	r15, r24
    3998:	82 ff       	sbrs	r24, 2
    399a:	2f c0       	rjmp	.+94     	; 0x39fa <disk_ioctl+0x1e6>
				if (send_cmd(ACMD13, 0) == 0) {		/* Read SD status */
    399c:	8d ec       	ldi	r24, 0xCD	; 205
    399e:	40 e0       	ldi	r20, 0x00	; 0
    39a0:	50 e0       	ldi	r21, 0x00	; 0
    39a2:	60 e0       	ldi	r22, 0x00	; 0
    39a4:	70 e0       	ldi	r23, 0x00	; 0
    39a6:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    39aa:	88 23       	and	r24, r24
    39ac:	09 f0       	breq	.+2      	; 0x39b0 <disk_ioctl+0x19c>
    39ae:	c7 c0       	rjmp	.+398    	; 0x3b3e <disk_ioctl+0x32a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    39b0:	8f ef       	ldi	r24, 0xFF	; 255
    39b2:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    39b4:	77 9b       	sbis	0x0e, 7	; 14
    39b6:	fe cf       	rjmp	.-4      	; 0x39b4 <disk_ioctl+0x1a0>
	return SPDR;
    39b8:	8f b1       	in	r24, 0x0f	; 15

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & 4) {			/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {		/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    39ba:	ce 01       	movw	r24, r28
    39bc:	01 96       	adiw	r24, 0x01	; 1
    39be:	60 e1       	ldi	r22, 0x10	; 16
    39c0:	70 e0       	ldi	r23, 0x00	; 0
    39c2:	0e 94 7e 19 	call	0x32fc	; 0x32fc <rcvr_datablock>
    39c6:	89 2b       	or	r24, r25
    39c8:	09 f4       	brne	.+2      	; 0x39cc <disk_ioctl+0x1b8>
    39ca:	b9 c0       	rjmp	.+370    	; 0x3b3e <disk_ioctl+0x32a>
    39cc:	80 e3       	ldi	r24, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    39ce:	9f ef       	ldi	r25, 0xFF	; 255
    39d0:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    39d2:	77 9b       	sbis	0x0e, 7	; 14
    39d4:	fe cf       	rjmp	.-4      	; 0x39d2 <disk_ioctl+0x1be>
	return SPDR;
    39d6:	2f b1       	in	r18, 0x0f	; 15
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & 4) {			/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {		/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    39d8:	81 50       	subi	r24, 0x01	; 1
    39da:	d1 f7       	brne	.-12     	; 0x39d0 <disk_ioctl+0x1bc>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    39dc:	2b 85       	ldd	r18, Y+11	; 0x0b
    39de:	22 95       	swap	r18
    39e0:	2f 70       	andi	r18, 0x0F	; 15
    39e2:	80 e1       	ldi	r24, 0x10	; 16
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	a0 e0       	ldi	r26, 0x00	; 0
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	04 c0       	rjmp	.+8      	; 0x39f4 <disk_ioctl+0x1e0>
    39ec:	88 0f       	add	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	aa 1f       	adc	r26, r26
    39f2:	bb 1f       	adc	r27, r27
    39f4:	2a 95       	dec	r18
    39f6:	d2 f7       	brpl	.-12     	; 0x39ec <disk_ioctl+0x1d8>
    39f8:	55 c0       	rjmp	.+170    	; 0x3aa4 <disk_ioctl+0x290>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    39fa:	89 e4       	ldi	r24, 0x49	; 73
    39fc:	40 e0       	ldi	r20, 0x00	; 0
    39fe:	50 e0       	ldi	r21, 0x00	; 0
    3a00:	60 e0       	ldi	r22, 0x00	; 0
    3a02:	70 e0       	ldi	r23, 0x00	; 0
    3a04:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    3a08:	88 23       	and	r24, r24
    3a0a:	09 f0       	breq	.+2      	; 0x3a0e <disk_ioctl+0x1fa>
    3a0c:	98 c0       	rjmp	.+304    	; 0x3b3e <disk_ioctl+0x32a>
    3a0e:	ce 01       	movw	r24, r28
    3a10:	01 96       	adiw	r24, 0x01	; 1
    3a12:	60 e1       	ldi	r22, 0x10	; 16
    3a14:	70 e0       	ldi	r23, 0x00	; 0
    3a16:	0e 94 7e 19 	call	0x32fc	; 0x32fc <rcvr_datablock>
    3a1a:	89 2b       	or	r24, r25
    3a1c:	09 f4       	brne	.+2      	; 0x3a20 <disk_ioctl+0x20c>
    3a1e:	8f c0       	rjmp	.+286    	; 0x3b3e <disk_ioctl+0x32a>
    3a20:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a22:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & 2) {			/* SDC ver 1.XX */
    3a24:	f1 fe       	sbrs	r15, 1
    3a26:	1b c0       	rjmp	.+54     	; 0x3a5e <disk_ioctl+0x24a>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    3a28:	88 1f       	adc	r24, r24
    3a2a:	88 27       	eor	r24, r24
    3a2c:	88 1f       	adc	r24, r24
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	01 96       	adiw	r24, 0x01	; 1
    3a32:	24 2f       	mov	r18, r20
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	2f 73       	andi	r18, 0x3F	; 63
    3a38:	30 70       	andi	r19, 0x00	; 0
    3a3a:	22 0f       	add	r18, r18
    3a3c:	33 1f       	adc	r19, r19
    3a3e:	82 0f       	add	r24, r18
    3a40:	93 1f       	adc	r25, r19
    3a42:	2e 85       	ldd	r18, Y+14	; 0x0e
    3a44:	22 95       	swap	r18
    3a46:	26 95       	lsr	r18
    3a48:	26 95       	lsr	r18
    3a4a:	23 70       	andi	r18, 0x03	; 3
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	21 50       	subi	r18, 0x01	; 1
    3a50:	30 40       	sbci	r19, 0x00	; 0
    3a52:	02 c0       	rjmp	.+4      	; 0x3a58 <disk_ioctl+0x244>
    3a54:	88 0f       	add	r24, r24
    3a56:	99 1f       	adc	r25, r25
    3a58:	2a 95       	dec	r18
    3a5a:	e2 f7       	brpl	.-8      	; 0x3a54 <disk_ioctl+0x240>
    3a5c:	21 c0       	rjmp	.+66     	; 0x3aa0 <disk_ioctl+0x28c>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    3a5e:	28 2f       	mov	r18, r24
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	23 70       	andi	r18, 0x03	; 3
    3a64:	30 70       	andi	r19, 0x00	; 0
    3a66:	f3 e0       	ldi	r31, 0x03	; 3
    3a68:	22 0f       	add	r18, r18
    3a6a:	33 1f       	adc	r19, r19
    3a6c:	fa 95       	dec	r31
    3a6e:	e1 f7       	brne	.-8      	; 0x3a68 <disk_ioctl+0x254>
    3a70:	82 95       	swap	r24
    3a72:	86 95       	lsr	r24
    3a74:	87 70       	andi	r24, 0x07	; 7
    3a76:	28 0f       	add	r18, r24
    3a78:	31 1d       	adc	r19, r1
    3a7a:	2f 5f       	subi	r18, 0xFF	; 255
    3a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a7e:	84 2f       	mov	r24, r20
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	8c 77       	andi	r24, 0x7C	; 124
    3a84:	90 70       	andi	r25, 0x00	; 0
    3a86:	95 95       	asr	r25
    3a88:	87 95       	ror	r24
    3a8a:	95 95       	asr	r25
    3a8c:	87 95       	ror	r24
    3a8e:	01 96       	adiw	r24, 0x01	; 1
    3a90:	ac 01       	movw	r20, r24
    3a92:	24 9f       	mul	r18, r20
    3a94:	c0 01       	movw	r24, r0
    3a96:	25 9f       	mul	r18, r21
    3a98:	90 0d       	add	r25, r0
    3a9a:	34 9f       	mul	r19, r20
    3a9c:	90 0d       	add	r25, r0
    3a9e:	11 24       	eor	r1, r1
    3aa0:	a0 e0       	ldi	r26, 0x00	; 0
    3aa2:	b0 e0       	ldi	r27, 0x00	; 0
    3aa4:	f8 01       	movw	r30, r16
    3aa6:	80 83       	st	Z, r24
    3aa8:	91 83       	std	Z+1, r25	; 0x01
    3aaa:	a2 83       	std	Z+2, r26	; 0x02
    3aac:	b3 83       	std	Z+3, r27	; 0x03
    3aae:	44 c0       	rjmp	.+136    	; 0x3b38 <disk_ioctl+0x324>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    3ab0:	80 91 21 01 	lds	r24, 0x0121
    3ab4:	fa 01       	movw	r30, r20
    3ab6:	80 83       	st	Z, r24
    3ab8:	3f c0       	rjmp	.+126    	; 0x3b38 <disk_ioctl+0x324>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    3aba:	89 e4       	ldi	r24, 0x49	; 73
    3abc:	01 c0       	rjmp	.+2      	; 0x3ac0 <disk_ioctl+0x2ac>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    3abe:	8a e4       	ldi	r24, 0x4A	; 74
    3ac0:	40 e0       	ldi	r20, 0x00	; 0
    3ac2:	50 e0       	ldi	r21, 0x00	; 0
    3ac4:	60 e0       	ldi	r22, 0x00	; 0
    3ac6:	70 e0       	ldi	r23, 0x00	; 0
    3ac8:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    3acc:	88 23       	and	r24, r24
    3ace:	b9 f5       	brne	.+110    	; 0x3b3e <disk_ioctl+0x32a>
    3ad0:	c8 01       	movw	r24, r16
    3ad2:	60 e1       	ldi	r22, 0x10	; 16
    3ad4:	70 e0       	ldi	r23, 0x00	; 0
    3ad6:	29 c0       	rjmp	.+82     	; 0x3b2a <disk_ioctl+0x316>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    3ad8:	8a e7       	ldi	r24, 0x7A	; 122
    3ada:	40 e0       	ldi	r20, 0x00	; 0
    3adc:	50 e0       	ldi	r21, 0x00	; 0
    3ade:	60 e0       	ldi	r22, 0x00	; 0
    3ae0:	70 e0       	ldi	r23, 0x00	; 0
    3ae2:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    3ae6:	88 23       	and	r24, r24
    3ae8:	51 f5       	brne	.+84     	; 0x3b3e <disk_ioctl+0x32a>
    3aea:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3aec:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    3aee:	98 01       	movw	r18, r16
    3af0:	2d 5f       	subi	r18, 0xFD	; 253
    3af2:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3af4:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3af6:	77 9b       	sbis	0x0e, 7	; 14
    3af8:	fe cf       	rjmp	.-4      	; 0x3af6 <disk_ioctl+0x2e2>
	return SPDR;
    3afa:	8f b1       	in	r24, 0x0f	; 15
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    3afc:	80 83       	st	Z, r24
    3afe:	e2 17       	cp	r30, r18
    3b00:	f3 07       	cpc	r31, r19
    3b02:	d1 f0       	breq	.+52     	; 0x3b38 <disk_ioctl+0x324>
    3b04:	31 96       	adiw	r30, 0x01	; 1
    3b06:	f6 cf       	rjmp	.-20     	; 0x3af4 <disk_ioctl+0x2e0>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    3b08:	8d ec       	ldi	r24, 0xCD	; 205
    3b0a:	40 e0       	ldi	r20, 0x00	; 0
    3b0c:	50 e0       	ldi	r21, 0x00	; 0
    3b0e:	60 e0       	ldi	r22, 0x00	; 0
    3b10:	70 e0       	ldi	r23, 0x00	; 0
    3b12:	0e 94 ff 19 	call	0x33fe	; 0x33fe <send_cmd>
    3b16:	88 23       	and	r24, r24
    3b18:	91 f4       	brne	.+36     	; 0x3b3e <disk_ioctl+0x32a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3b1a:	8f ef       	ldi	r24, 0xFF	; 255
    3b1c:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3b1e:	77 9b       	sbis	0x0e, 7	; 14
    3b20:	fe cf       	rjmp	.-4      	; 0x3b1e <disk_ioctl+0x30a>
	return SPDR;
    3b22:	8f b1       	in	r24, 0x0f	; 15
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    3b24:	c8 01       	movw	r24, r16
    3b26:	60 e4       	ldi	r22, 0x40	; 64
    3b28:	70 e0       	ldi	r23, 0x00	; 0
    3b2a:	0e 94 7e 19 	call	0x32fc	; 0x32fc <rcvr_datablock>
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	89 2b       	or	r24, r25
    3b34:	31 f4       	brne	.+12     	; 0x3b42 <disk_ioctl+0x32e>
    3b36:	03 c0       	rjmp	.+6      	; 0x3b3e <disk_ioctl+0x32a>
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	30 e0       	ldi	r19, 0x00	; 0
    3b3c:	02 c0       	rjmp	.+4      	; 0x3b42 <disk_ioctl+0x32e>
    3b3e:	21 e0       	ldi	r18, 0x01	; 1
    3b40:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    3b42:	c4 9a       	sbi	0x18, 4	; 24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3b44:	8f ef       	ldi	r24, 0xFF	; 255
    3b46:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    3b48:	77 9b       	sbis	0x0e, 7	; 14
    3b4a:	fe cf       	rjmp	.-4      	; 0x3b48 <disk_ioctl+0x334>
	return SPDR;
    3b4c:	8f b1       	in	r24, 0x0f	; 15
    3b4e:	02 c0       	rjmp	.+4      	; 0x3b54 <disk_ioctl+0x340>
    3b50:	24 e0       	ldi	r18, 0x04	; 4
    3b52:	30 e0       	ldi	r19, 0x00	; 0

		release_spi();
	}

	return res;
}
    3b54:	c9 01       	movw	r24, r18
    3b56:	60 96       	adiw	r28, 0x10	; 16
    3b58:	e5 e0       	ldi	r30, 0x05	; 5
    3b5a:	0c 94 12 1f 	jmp	0x3e24	; 0x3e24 <__epilogue_restores__+0x1a>

00003b5e <disk_timerproc>:
{
	static BYTE pv;
	BYTE n, s;


	n = Timer1;						/* 100Hz decrement timer */
    3b5e:	80 91 1f 01 	lds	r24, 0x011F
	if (n) Timer1 = --n;
    3b62:	88 23       	and	r24, r24
    3b64:	19 f0       	breq	.+6      	; 0x3b6c <disk_timerproc+0xe>
    3b66:	81 50       	subi	r24, 0x01	; 1
    3b68:	80 93 1f 01 	sts	0x011F, r24
	n = Timer2;
    3b6c:	80 91 20 01 	lds	r24, 0x0120
	if (n) Timer2 = --n;
    3b70:	88 23       	and	r24, r24
    3b72:	19 f0       	breq	.+6      	; 0x3b7a <disk_timerproc+0x1c>
    3b74:	81 50       	subi	r24, 0x01	; 1
    3b76:	80 93 20 01 	sts	0x0120, r24

	n = pv;
    3b7a:	90 91 1e 01 	lds	r25, 0x011E
	pv = SOCKPORT & (SOCKWP | SOCKINS);	/* Sample socket switch */
    3b7e:	86 b3       	in	r24, 0x16	; 22
    3b80:	83 70       	andi	r24, 0x03	; 3
    3b82:	80 93 1e 01 	sts	0x011E, r24

	if (n == pv) {					/* Have contacts stabled? */
    3b86:	98 17       	cp	r25, r24
    3b88:	71 f4       	brne	.+28     	; 0x3ba6 <disk_timerproc+0x48>
		s = Stat;
    3b8a:	80 91 90 00 	lds	r24, 0x0090

		if (pv & SOCKWP)			/* WP is H (write protected) */
    3b8e:	90 ff       	sbrs	r25, 0
    3b90:	02 c0       	rjmp	.+4      	; 0x3b96 <disk_timerproc+0x38>
			s |= STA_PROTECT;
    3b92:	84 60       	ori	r24, 0x04	; 4
    3b94:	01 c0       	rjmp	.+2      	; 0x3b98 <disk_timerproc+0x3a>
		else						/* WP is L (write enabled) */
			s &= ~STA_PROTECT;
    3b96:	8b 7f       	andi	r24, 0xFB	; 251

		if (pv & SOCKINS)			/* INS = H (Socket empty) */
    3b98:	91 ff       	sbrs	r25, 1
    3b9a:	02 c0       	rjmp	.+4      	; 0x3ba0 <disk_timerproc+0x42>
			s |= (STA_NODISK | STA_NOINIT);
    3b9c:	83 60       	ori	r24, 0x03	; 3
    3b9e:	01 c0       	rjmp	.+2      	; 0x3ba2 <disk_timerproc+0x44>
		else						/* INS = L (Card inserted) */
			s &= ~STA_NODISK;
    3ba0:	8d 7f       	andi	r24, 0xFD	; 253

		Stat = s;
    3ba2:	80 93 90 00 	sts	0x0090, r24
    3ba6:	08 95       	ret

00003ba8 <samurai>:
    3ba8:	1f 1d       	adc	r17, r15
    3baa:	1f 1e       	adc	r1, r31
    3bac:	1f 1e       	adc	r1, r31
    3bae:	1f 1f       	adc	r17, r31
    3bb0:	1e 1f       	adc	r17, r30
    3bb2:	1e 1f       	adc	r17, r30

00003bb4 <mktime>:
;Size: 89/88 words

.global mktime
.func mktime
mktime:
	push	YL
    3bb4:	cf 93       	push	r28
	push	YH
    3bb6:	df 93       	push	r29
	_MOVW	YH,YL, r25,r24
    3bb8:	ec 01       	movw	r28, r24
	adiw	YL, 12
    3bba:	2c 96       	adiw	r28, 0x0c	; 12

	ldi	r20, 138	; (365..366) * tm_year
    3bbc:	4a e8       	ldi	r20, 0x8A	; 138
	rcall	ldcp16
    3bbe:	34 d0       	rcall	.+104    	; 0x3c28 <ldcp16>
	clr	r22
    3bc0:	66 27       	eor	r22, r22
	clr	r23
    3bc2:	77 27       	eor	r23, r23
	ldi	r19, 70
    3bc4:	36 e4       	ldi	r19, 0x46	; 70
0:	ldi	XL, lo8(366)
    3bc6:	ae e6       	ldi	r26, 0x6E	; 110
	ldi	XH, hi8(366)
    3bc8:	b1 e0       	ldi	r27, 0x01	; 1
	mov	r21, r19
    3bca:	53 2f       	mov	r21, r19
	andi	r21, 3
    3bcc:	53 70       	andi	r21, 0x03	; 3
	breq	1f
    3bce:	09 f0       	breq	.+2      	; 0x3bd2 <mktime+0x1e>
	sbiw	XL, 1
    3bd0:	11 97       	sbiw	r26, 0x01	; 1
1:	cp	r19, r18
    3bd2:	32 17       	cp	r19, r18
	breq	2f
    3bd4:	29 f0       	breq	.+10     	; 0x3be0 <mktime+0x2c>
	brcc	91f
    3bd6:	78 f5       	brcc	.+94     	; 0x3c36 <ldcp16+0xe>
	add	r22, XL
    3bd8:	6a 0f       	add	r22, r26
	adc	r23, XH
    3bda:	7b 1f       	adc	r23, r27
	inc	r19
    3bdc:	33 95       	inc	r19
	rjmp	0b
    3bde:	f3 cf       	rjmp	.-26     	; 0x3bc6 <mktime+0x12>
2:
	ldi	r20, 12		; + (28..31) * tm_mon
    3be0:	4c e0       	ldi	r20, 0x0C	; 12
	rcall	ldcp16
    3be2:	22 d0       	rcall	.+68     	; 0x3c28 <ldcp16>
	ldi	ZL, lo8(samurai)
    3be4:	e8 ea       	ldi	r30, 0xA8	; 168
	ldi	ZH, hi8(samurai)
    3be6:	fb e3       	ldi	r31, 0x3B	; 59
	ldi	r19, 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
3:	lpm
    3bea:	c8 95       	lpm
	adiw	ZL, 1
    3bec:	31 96       	adiw	r30, 0x01	; 1
	cpi	r19, 1
    3bee:	31 30       	cpi	r19, 0x01	; 1
	brne	4f
    3bf0:	11 f4       	brne	.+4      	; 0x3bf6 <mktime+0x42>
	cpse	r21, r1
    3bf2:	51 11       	cpse	r21, r1
	dec	r0
    3bf4:	0a 94       	dec	r0
4:	cp	r19, r18
    3bf6:	32 17       	cp	r19, r18
	brcc	5f
    3bf8:	20 f4       	brcc	.+8      	; 0x3c02 <mktime+0x4e>
	add	r22, r0
    3bfa:	60 0d       	add	r22, r0
	adc	r23, r1
    3bfc:	71 1d       	adc	r23, r1
	inc	r19
    3bfe:	33 95       	inc	r19
	rjmp	3b
    3c00:	f4 cf       	rjmp	.-24     	; 0x3bea <mktime+0x36>
5:
	mov	r20, r0		; + tm_mday
    3c02:	40 2d       	mov	r20, r0
	inc	r20
    3c04:	43 95       	inc	r20
	rcall	ldcp16
    3c06:	10 d0       	rcall	.+32     	; 0x3c28 <ldcp16>
	subi	r18, 1
    3c08:	21 50       	subi	r18, 0x01	; 1
	brcs	91f
    3c0a:	a8 f0       	brcs	.+42     	; 0x3c36 <ldcp16+0xe>
	add	r22, r18
    3c0c:	62 0f       	add	r22, r18
	adc	r23, r1
    3c0e:	71 1d       	adc	r23, r1
	clr	r24
    3c10:	88 27       	eor	r24, r24
	clr	r25
    3c12:	99 27       	eor	r25, r25
	; r25:r22 = days from orign

	ldi	r20, 24		; * 24 + tm_hour
    3c14:	48 e1       	ldi	r20, 0x18	; 24
	rcall	ldcp16
    3c16:	08 d0       	rcall	.+16     	; 0x3c28 <ldcp16>
	rcall	muladd3208
    3c18:	15 d0       	rcall	.+42     	; 0x3c44 <muladd3208>

	ldi	r20, 60		; * 60 + tm_min
    3c1a:	4c e3       	ldi	r20, 0x3C	; 60
	rcall	ldcp16
    3c1c:	05 d0       	rcall	.+10     	; 0x3c28 <ldcp16>
	rcall	muladd3208
    3c1e:	12 d0       	rcall	.+36     	; 0x3c44 <muladd3208>

	ldi	r18, 60		; * 60 + tm_sec
    3c20:	2c e3       	ldi	r18, 0x3C	; 60
	rcall	ldcp16
    3c22:	02 d0       	rcall	.+4      	; 0x3c28 <ldcp16>
	rcall	muladd3208
    3c24:	0f d0       	rcall	.+30     	; 0x3c44 <muladd3208>
	rjmp	92f
    3c26:	0b c0       	rjmp	.+22     	; 0x3c3e <ldcp16+0x16>

00003c28 <ldcp16>:

ldcp16:	ld	r19, -Y		; Load an item with error check (< r20)
    3c28:	3a 91       	ld	r19, -Y
	ld	r18, -Y
    3c2a:	2a 91       	ld	r18, -Y
	cp	r18, r20
    3c2c:	24 17       	cp	r18, r20
	cpc	r19, r1
    3c2e:	31 05       	cpc	r19, r1
	brcs	93f
    3c30:	40 f0       	brcs	.+16     	; 0x3c42 <ldcp16+0x1a>
	pop	r0
    3c32:	0f 90       	pop	r0
	pop	r0
    3c34:	0f 90       	pop	r0

91:	ldi	r22, -1		; parameter error
    3c36:	6f ef       	ldi	r22, 0xFF	; 255
	ldi	r23, -1
    3c38:	7f ef       	ldi	r23, 0xFF	; 255
	ldi	r24, -1
    3c3a:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1
    3c3c:	9f ef       	ldi	r25, 0xFF	; 255

92:	pop	YH
    3c3e:	df 91       	pop	r29
	pop	YL
    3c40:	cf 91       	pop	r28
93:	ret
    3c42:	08 95       	ret

00003c44 <muladd3208>:

muladd3208:
	ldi	r21, 33		; r25:r22 *= r20;
    3c44:	51 e2       	ldi	r21, 0x21	; 33
	sub	r26, r26
    3c46:	aa 1b       	sub	r26, r26
0:	brcc	1f
    3c48:	08 f4       	brcc	.+2      	; 0x3c4c <muladd3208+0x8>
	add	r26, r20
    3c4a:	a4 0f       	add	r26, r20
1:	ror	r26
    3c4c:	a7 95       	ror	r26
	ror	r25
    3c4e:	97 95       	ror	r25
	ror	r24
    3c50:	87 95       	ror	r24
	ror	r23
    3c52:	77 95       	ror	r23
	ror	r22
    3c54:	67 95       	ror	r22
	dec	r21
    3c56:	5a 95       	dec	r21
	brne	0b
    3c58:	b9 f7       	brne	.-18     	; 0x3c48 <muladd3208+0x4>
	add	r22, r18	; r25:r22 += r18;
    3c5a:	62 0f       	add	r22, r18
	adc	r23, r1
    3c5c:	71 1d       	adc	r23, r1
	adc	r24, r1
    3c5e:	81 1d       	adc	r24, r1
	adc	r25, r1
    3c60:	91 1d       	adc	r25, r1
	ret
    3c62:	08 95       	ret

00003c64 <gmtime>:
;Size: 93/89 words

.global gmtime
.func gmtime
gmtime:
	push	YL
    3c64:	cf 93       	push	r28
	push	YH
    3c66:	df 93       	push	r29

	_MOVW	ZH,ZL, r25,r24		;r21:r18 = utc
    3c68:	fc 01       	movw	r30, r24
	ldd	r18, Z+0		;
    3c6a:	20 81       	ld	r18, Z
	ldd	r19, Z+1		;
    3c6c:	31 81       	ldd	r19, Z+1	; 0x01
	ldd	r20, Z+2		;
    3c6e:	42 81       	ldd	r20, Z+2	; 0x02
	ldd	r21, Z+3		;/
    3c70:	53 81       	ldd	r21, Z+3	; 0x03
	clr	YL			;Invalid time?
    3c72:	cc 27       	eor	r28, r28
	clr	YH			;
    3c74:	dd 27       	eor	r29, r29
	sbrc	r21, 7			;
    3c76:	57 fd       	sbrc	r21, 7
	rjmp	99f			;/
    3c78:	3c c0       	rjmp	.+120    	; 0x3cf2 <gmtime+0x8e>
	ldi	YL, lo8(time_tm)
    3c7a:	c2 e2       	ldi	r28, 0x22	; 34
	ldi	YH, hi8(time_tm)
    3c7c:	d1 e0       	ldi	r29, 0x01	; 1
	; r21:r18 = seconds from origin

	ldi	r22, 60			;tm_sec = % 60
    3c7e:	6c e3       	ldi	r22, 0x3C	; 60
	rcall	div3208			;
    3c80:	3c d0       	rcall	.+120    	; 0x3cfa <div3208>
	std	Y+0, r0			;
    3c82:	08 82       	st	Y, r0
	std	Y+1, r1			;/
    3c84:	19 82       	std	Y+1, r1	; 0x01
	rcall	div3208			;tm_min = % 60
    3c86:	39 d0       	rcall	.+114    	; 0x3cfa <div3208>
	std	Y+2, r0			;
    3c88:	0a 82       	std	Y+2, r0	; 0x02
	std	Y+3, r1			;/
    3c8a:	1b 82       	std	Y+3, r1	; 0x03
	ldi	r22, 24			;tm_hour = % 24
    3c8c:	68 e1       	ldi	r22, 0x18	; 24
	rcall	div3208			;
    3c8e:	35 d0       	rcall	.+106    	; 0x3cfa <div3208>
	std	Y+4, r0			;
    3c90:	0c 82       	std	Y+4, r0	; 0x04
	std	Y+5, r1			;/
    3c92:	1d 82       	std	Y+5, r1	; 0x05
	; r19:r18 = days from origin

	_MOVW	ZH,ZL, r19,r18
    3c94:	f9 01       	movw	r30, r18
	subi	r18, lo8(-4)		;tm_wday
    3c96:	2c 5f       	subi	r18, 0xFC	; 252
	sbci	r19, hi8(-4)		;
    3c98:	3f 4f       	sbci	r19, 0xFF	; 255
	ldi	r22, 7			;
    3c9a:	67 e0       	ldi	r22, 0x07	; 7
	rcall	div3208			;
    3c9c:	2e d0       	rcall	.+92     	; 0x3cfa <div3208>
	std	Y+12, r0		;
    3c9e:	0c 86       	std	Y+12, r0	; 0x0c
	std	Y+13, r1		;/
    3ca0:	1d 86       	std	Y+13, r1	; 0x0d
	_MOVW	r19,r18, ZH,ZL
    3ca2:	9f 01       	movw	r18, r30

	ldi	XL, 70			;tm_year
    3ca4:	a6 e4       	ldi	r26, 0x46	; 70
0:	ldi	ZL, lo8(366)		;
    3ca6:	ee e6       	ldi	r30, 0x6E	; 110
	ldi	ZH, hi8(366)		;
    3ca8:	f1 e0       	ldi	r31, 0x01	; 1
	mov	XH, XL			;
    3caa:	ba 2f       	mov	r27, r26
	andi	XH, 3			;
    3cac:	b3 70       	andi	r27, 0x03	; 3
	breq	1f			;
    3cae:	09 f0       	breq	.+2      	; 0x3cb2 <gmtime+0x4e>
	sbiw	ZL, 1			;
    3cb0:	31 97       	sbiw	r30, 0x01	; 1
1:	cp	r18, ZL			;
    3cb2:	2e 17       	cp	r18, r30
	cpc	r19, ZH			;
    3cb4:	3f 07       	cpc	r19, r31
	brcs	2f			;
    3cb6:	20 f0       	brcs	.+8      	; 0x3cc0 <gmtime+0x5c>
	sub	r18, ZL			;
    3cb8:	2e 1b       	sub	r18, r30
	sbc	r19, ZH			;
    3cba:	3f 0b       	sbc	r19, r31
	inc	XL			;
    3cbc:	a3 95       	inc	r26
	rjmp	0b			;
    3cbe:	f3 cf       	rjmp	.-26     	; 0x3ca6 <gmtime+0x42>
2:	std	Y+10, XL		;
    3cc0:	aa 87       	std	Y+10, r26	; 0x0a
	std	Y+11, r1		;/
    3cc2:	1b 86       	std	Y+11, r1	; 0x0b
	std	Y+14, r18		;tm_yday
    3cc4:	2e 87       	std	Y+14, r18	; 0x0e
	std	Y+15, r19		;/
    3cc6:	3f 87       	std	Y+15, r19	; 0x0f
	; r19:r18 = days in year

	ldi	ZL, lo8(samurai)	;tm_mon
    3cc8:	e8 ea       	ldi	r30, 0xA8	; 168
	ldi	ZH, hi8(samurai)	;
    3cca:	fb e3       	ldi	r31, 0x3B	; 59
	clr	XL			;
    3ccc:	aa 27       	eor	r26, r26
3:	lpm				;
    3cce:	c8 95       	lpm
	adiw	ZL, 1			;
    3cd0:	31 96       	adiw	r30, 0x01	; 1
	cpi	XL, 1			;
    3cd2:	a1 30       	cpi	r26, 0x01	; 1
	brne	4f			;
    3cd4:	11 f4       	brne	.+4      	; 0x3cda <gmtime+0x76>
	cpse	XH, r1			;
    3cd6:	b1 11       	cpse	r27, r1
	dec	r0			;
    3cd8:	0a 94       	dec	r0
4:	cp	r18, r0			;
    3cda:	20 15       	cp	r18, r0
	cpc	r19, r1			;
    3cdc:	31 05       	cpc	r19, r1
	brcs	5f			;
    3cde:	20 f0       	brcs	.+8      	; 0x3ce8 <gmtime+0x84>
	sub	r18, r0			;
    3ce0:	20 19       	sub	r18, r0
	sbc	r19, r1			;
    3ce2:	31 09       	sbc	r19, r1
	inc	XL			;
    3ce4:	a3 95       	inc	r26
	rjmp	3b			;
    3ce6:	f3 cf       	rjmp	.-26     	; 0x3cce <gmtime+0x6a>
5:	std	Y+8, XL			;
    3ce8:	a8 87       	std	Y+8, r26	; 0x08
	std	Y+9, r1			;/
    3cea:	19 86       	std	Y+9, r1	; 0x09
	inc	r18			;tm_mday
    3cec:	23 95       	inc	r18
	std	Y+6, r18		;
    3cee:	2e 83       	std	Y+6, r18	; 0x06
	std	Y+7, r19		;/
    3cf0:	3f 83       	std	Y+7, r19	; 0x07

99:	_MOVW	r25,r24, YH,YL		;Return pointer to internal tm buffer
    3cf2:	ce 01       	movw	r24, r28
	pop	YH
    3cf4:	df 91       	pop	r29
	pop	YL
    3cf6:	cf 91       	pop	r28
	ret
    3cf8:	08 95       	ret

00003cfa <div3208>:

div3208:			; r0 = r21:r18 % r22;
	clr	r0		; r21:r18 /= r22;
    3cfa:	00 24       	eor	r0, r0
	ldi	r23, 32
    3cfc:	70 e2       	ldi	r23, 0x20	; 32
1:	lsl	r18
    3cfe:	22 0f       	add	r18, r18
	rol	r19
    3d00:	33 1f       	adc	r19, r19
	rol	r20
    3d02:	44 1f       	adc	r20, r20
	rol	r21
    3d04:	55 1f       	adc	r21, r21
	rol	r0
    3d06:	00 1c       	adc	r0, r0
	cp	r0, r22
    3d08:	06 16       	cp	r0, r22
	brcs	2f
    3d0a:	10 f0       	brcs	.+4      	; 0x3d10 <div3208+0x16>
	sub	r0, r22
    3d0c:	06 1a       	sub	r0, r22
	inc	r18
    3d0e:	23 95       	inc	r18
2:	dec	r23
    3d10:	7a 95       	dec	r23
	brne	1b
    3d12:	a9 f7       	brne	.-22     	; 0x3cfe <div3208+0x4>
	ret
    3d14:	08 95       	ret

00003d16 <memcmp>:
    3d16:	fb 01       	movw	r30, r22
    3d18:	dc 01       	movw	r26, r24
    3d1a:	04 c0       	rjmp	.+8      	; 0x3d24 <memcmp+0xe>
    3d1c:	8d 91       	ld	r24, X+
    3d1e:	01 90       	ld	r0, Z+
    3d20:	80 19       	sub	r24, r0
    3d22:	21 f4       	brne	.+8      	; 0x3d2c <memcmp+0x16>
    3d24:	41 50       	subi	r20, 0x01	; 1
    3d26:	50 40       	sbci	r21, 0x00	; 0
    3d28:	c8 f7       	brcc	.-14     	; 0x3d1c <memcmp+0x6>
    3d2a:	88 1b       	sub	r24, r24
    3d2c:	99 0b       	sbc	r25, r25
    3d2e:	08 95       	ret

00003d30 <memcpy>:
    3d30:	fb 01       	movw	r30, r22
    3d32:	dc 01       	movw	r26, r24
    3d34:	02 c0       	rjmp	.+4      	; 0x3d3a <memcpy+0xa>
    3d36:	01 90       	ld	r0, Z+
    3d38:	0d 92       	st	X+, r0
    3d3a:	41 50       	subi	r20, 0x01	; 1
    3d3c:	50 40       	sbci	r21, 0x00	; 0
    3d3e:	d8 f7       	brcc	.-10     	; 0x3d36 <memcpy+0x6>
    3d40:	08 95       	ret

00003d42 <memset>:
    3d42:	dc 01       	movw	r26, r24
    3d44:	01 c0       	rjmp	.+2      	; 0x3d48 <memset+0x6>
    3d46:	6d 93       	st	X+, r22
    3d48:	41 50       	subi	r20, 0x01	; 1
    3d4a:	50 40       	sbci	r21, 0x00	; 0
    3d4c:	e0 f7       	brcc	.-8      	; 0x3d46 <memset+0x4>
    3d4e:	08 95       	ret

00003d50 <__mulsi3>:
    3d50:	62 9f       	mul	r22, r18
    3d52:	d0 01       	movw	r26, r0
    3d54:	73 9f       	mul	r23, r19
    3d56:	f0 01       	movw	r30, r0
    3d58:	82 9f       	mul	r24, r18
    3d5a:	e0 0d       	add	r30, r0
    3d5c:	f1 1d       	adc	r31, r1
    3d5e:	64 9f       	mul	r22, r20
    3d60:	e0 0d       	add	r30, r0
    3d62:	f1 1d       	adc	r31, r1
    3d64:	92 9f       	mul	r25, r18
    3d66:	f0 0d       	add	r31, r0
    3d68:	83 9f       	mul	r24, r19
    3d6a:	f0 0d       	add	r31, r0
    3d6c:	74 9f       	mul	r23, r20
    3d6e:	f0 0d       	add	r31, r0
    3d70:	65 9f       	mul	r22, r21
    3d72:	f0 0d       	add	r31, r0
    3d74:	99 27       	eor	r25, r25
    3d76:	72 9f       	mul	r23, r18
    3d78:	b0 0d       	add	r27, r0
    3d7a:	e1 1d       	adc	r30, r1
    3d7c:	f9 1f       	adc	r31, r25
    3d7e:	63 9f       	mul	r22, r19
    3d80:	b0 0d       	add	r27, r0
    3d82:	e1 1d       	adc	r30, r1
    3d84:	f9 1f       	adc	r31, r25
    3d86:	bd 01       	movw	r22, r26
    3d88:	cf 01       	movw	r24, r30
    3d8a:	11 24       	eor	r1, r1
    3d8c:	08 95       	ret

00003d8e <__udivmodsi4>:
    3d8e:	a1 e2       	ldi	r26, 0x21	; 33
    3d90:	1a 2e       	mov	r1, r26
    3d92:	aa 1b       	sub	r26, r26
    3d94:	bb 1b       	sub	r27, r27
    3d96:	fd 01       	movw	r30, r26
    3d98:	0d c0       	rjmp	.+26     	; 0x3db4 <__udivmodsi4_ep>

00003d9a <__udivmodsi4_loop>:
    3d9a:	aa 1f       	adc	r26, r26
    3d9c:	bb 1f       	adc	r27, r27
    3d9e:	ee 1f       	adc	r30, r30
    3da0:	ff 1f       	adc	r31, r31
    3da2:	a2 17       	cp	r26, r18
    3da4:	b3 07       	cpc	r27, r19
    3da6:	e4 07       	cpc	r30, r20
    3da8:	f5 07       	cpc	r31, r21
    3daa:	20 f0       	brcs	.+8      	; 0x3db4 <__udivmodsi4_ep>
    3dac:	a2 1b       	sub	r26, r18
    3dae:	b3 0b       	sbc	r27, r19
    3db0:	e4 0b       	sbc	r30, r20
    3db2:	f5 0b       	sbc	r31, r21

00003db4 <__udivmodsi4_ep>:
    3db4:	66 1f       	adc	r22, r22
    3db6:	77 1f       	adc	r23, r23
    3db8:	88 1f       	adc	r24, r24
    3dba:	99 1f       	adc	r25, r25
    3dbc:	1a 94       	dec	r1
    3dbe:	69 f7       	brne	.-38     	; 0x3d9a <__udivmodsi4_loop>
    3dc0:	60 95       	com	r22
    3dc2:	70 95       	com	r23
    3dc4:	80 95       	com	r24
    3dc6:	90 95       	com	r25
    3dc8:	9b 01       	movw	r18, r22
    3dca:	ac 01       	movw	r20, r24
    3dcc:	bd 01       	movw	r22, r26
    3dce:	cf 01       	movw	r24, r30
    3dd0:	08 95       	ret

00003dd2 <__prologue_saves__>:
    3dd2:	2f 92       	push	r2
    3dd4:	3f 92       	push	r3
    3dd6:	4f 92       	push	r4
    3dd8:	5f 92       	push	r5
    3dda:	6f 92       	push	r6
    3ddc:	7f 92       	push	r7
    3dde:	8f 92       	push	r8
    3de0:	9f 92       	push	r9
    3de2:	af 92       	push	r10
    3de4:	bf 92       	push	r11
    3de6:	cf 92       	push	r12
    3de8:	df 92       	push	r13
    3dea:	ef 92       	push	r14
    3dec:	ff 92       	push	r15
    3dee:	0f 93       	push	r16
    3df0:	1f 93       	push	r17
    3df2:	cf 93       	push	r28
    3df4:	df 93       	push	r29
    3df6:	cd b7       	in	r28, 0x3d	; 61
    3df8:	de b7       	in	r29, 0x3e	; 62
    3dfa:	ca 1b       	sub	r28, r26
    3dfc:	db 0b       	sbc	r29, r27
    3dfe:	0f b6       	in	r0, 0x3f	; 63
    3e00:	f8 94       	cli
    3e02:	de bf       	out	0x3e, r29	; 62
    3e04:	0f be       	out	0x3f, r0	; 63
    3e06:	cd bf       	out	0x3d, r28	; 61
    3e08:	09 94       	ijmp

00003e0a <__epilogue_restores__>:
    3e0a:	2a 88       	ldd	r2, Y+18	; 0x12
    3e0c:	39 88       	ldd	r3, Y+17	; 0x11
    3e0e:	48 88       	ldd	r4, Y+16	; 0x10
    3e10:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e12:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e14:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e16:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e18:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e1a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e1c:	b9 84       	ldd	r11, Y+9	; 0x09
    3e1e:	c8 84       	ldd	r12, Y+8	; 0x08
    3e20:	df 80       	ldd	r13, Y+7	; 0x07
    3e22:	ee 80       	ldd	r14, Y+6	; 0x06
    3e24:	fd 80       	ldd	r15, Y+5	; 0x05
    3e26:	0c 81       	ldd	r16, Y+4	; 0x04
    3e28:	1b 81       	ldd	r17, Y+3	; 0x03
    3e2a:	aa 81       	ldd	r26, Y+2	; 0x02
    3e2c:	b9 81       	ldd	r27, Y+1	; 0x01
    3e2e:	ce 0f       	add	r28, r30
    3e30:	d1 1d       	adc	r29, r1
    3e32:	0f b6       	in	r0, 0x3f	; 63
    3e34:	f8 94       	cli
    3e36:	de bf       	out	0x3e, r29	; 62
    3e38:	0f be       	out	0x3f, r0	; 63
    3e3a:	cd bf       	out	0x3d, r28	; 61
    3e3c:	ed 01       	movw	r28, r26
    3e3e:	08 95       	ret

00003e40 <__tablejump2__>:
    3e40:	ee 0f       	add	r30, r30
    3e42:	ff 1f       	adc	r31, r31

00003e44 <__tablejump__>:
    3e44:	05 90       	lpm	r0, Z+
    3e46:	f4 91       	lpm	r31, Z+
    3e48:	e0 2d       	mov	r30, r0
    3e4a:	09 94       	ijmp

00003e4c <_exit>:
    3e4c:	f8 94       	cli

00003e4e <__stop_program>:
    3e4e:	ff cf       	rjmp	.-2      	; 0x3e4e <__stop_program>
